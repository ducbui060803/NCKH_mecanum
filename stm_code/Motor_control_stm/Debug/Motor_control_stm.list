
Motor_control_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a178  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800a318  0800a318  0000b318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a764  0800a764  0000c224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a764  0800a764  0000b764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a76c  0800a76c  0000c224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a76c  0800a76c  0000b76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a770  0800a770  0000b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800a774  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  20000224  0800a998  0000c224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800a998  0000c8c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a50  00000000  00000000  0000c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002237  00000000  00000000  0001cca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ced  00000000  00000000  0001ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cbd  00000000  00000000  00020c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c29  00000000  00000000  000388d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c2a  00000000  00000000  0004b4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e8  00000000  00000000  000df168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e4b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a300 	.word	0x0800a300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800a300 	.word	0x0800a300

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b9be 	b.w	8000fb0 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f83c 	bl	8000cb8 <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f7ff ff49 	bl	8000aec <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x1c>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcbf 	bl	8000608 <__aeabi_dmul>
 8000c8a:	f7ff ff57 	bl	8000b3c <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc40 	bl	8000514 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcb6 	bl	8000608 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf8 	bl	8000298 <__aeabi_dsub>
 8000ca8:	f7ff ff48 	bl	8000b3c <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11)          // kiểm tra đúng timer
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d103      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        // Đặt code cần chạy mỗi chu kỳ ở đây
        update_encoder_speed();
 8000fc6:	f000 f8d1 	bl	800116c <update_encoder_speed>
        read_IMU();
 8000fca:	f000 f965 	bl	8001298 <read_IMU>
    }
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40014800 	.word	0x40014800

08000fdc <HAL_UART_TxCpltCallback>:

/* UART callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <HAL_UART_TxCpltCallback+0x24>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d102      	bne.n	8000ff4 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_tx_ready = 1;
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <HAL_UART_TxCpltCallback+0x28>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40011400 	.word	0x40011400
 8001004:	20000709 	.word	0x20000709

08001008 <user_init>:

void user_init()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800100e:	2108      	movs	r1, #8
 8001010:	4846      	ldr	r0, [pc, #280]	@ (800112c <user_init+0x124>)
 8001012:	f004 fb13 	bl	800563c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001016:	210c      	movs	r1, #12
 8001018:	4844      	ldr	r0, [pc, #272]	@ (800112c <user_init+0x124>)
 800101a:	f004 fb0f 	bl	800563c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800101e:	2104      	movs	r1, #4
 8001020:	4843      	ldr	r0, [pc, #268]	@ (8001130 <user_init+0x128>)
 8001022:	f004 fb0b 	bl	800563c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001026:	2100      	movs	r1, #0
 8001028:	4842      	ldr	r0, [pc, #264]	@ (8001134 <user_init+0x12c>)
 800102a:	f004 fb07 	bl	800563c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800102e:	213c      	movs	r1, #60	@ 0x3c
 8001030:	4841      	ldr	r0, [pc, #260]	@ (8001138 <user_init+0x130>)
 8001032:	f004 fc59 	bl	80058e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001036:	213c      	movs	r1, #60	@ 0x3c
 8001038:	4840      	ldr	r0, [pc, #256]	@ (800113c <user_init+0x134>)
 800103a:	f004 fc55 	bl	80058e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800103e:	213c      	movs	r1, #60	@ 0x3c
 8001040:	483f      	ldr	r0, [pc, #252]	@ (8001140 <user_init+0x138>)
 8001042:	f004 fc51 	bl	80058e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001046:	213c      	movs	r1, #60	@ 0x3c
 8001048:	483e      	ldr	r0, [pc, #248]	@ (8001144 <user_init+0x13c>)
 800104a:	f004 fc4d 	bl	80058e8 <HAL_TIM_Encoder_Start>

	HAL_UART_Receive_DMA(&huart6, rx_buffer, RX_BUFFER_SIZE);
 800104e:	2264      	movs	r2, #100	@ 0x64
 8001050:	493d      	ldr	r1, [pc, #244]	@ (8001148 <user_init+0x140>)
 8001052:	483e      	ldr	r0, [pc, #248]	@ (800114c <user_init+0x144>)
 8001054:	f005 fb98 	bl	8006788 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim11);
 8001058:	483d      	ldr	r0, [pc, #244]	@ (8001150 <user_init+0x148>)
 800105a:	f004 fa33 	bl	80054c4 <HAL_TIM_Base_Start_IT>
	// Set chiều quay THUẬN CHIỀU KIM ĐỒNG HỒ:
	// M1: IN1_1 = 1, IN2_1 = 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // IN1_1
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001064:	483b      	ldr	r0, [pc, #236]	@ (8001154 <user_init+0x14c>)
 8001066:	f002 fd07 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // IN2_1
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001070:	4839      	ldr	r0, [pc, #228]	@ (8001158 <user_init+0x150>)
 8001072:	f002 fd01 	bl	8003a78 <HAL_GPIO_WritePin>

	// M2: IN1_2 = 1, IN2_2 = 0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);    // IN1_2
 8001076:	2200      	movs	r2, #0
 8001078:	2104      	movs	r1, #4
 800107a:	4838      	ldr	r0, [pc, #224]	@ (800115c <user_init+0x154>)
 800107c:	f002 fcfc 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);  // IN2_2
 8001080:	2201      	movs	r2, #1
 8001082:	2140      	movs	r1, #64	@ 0x40
 8001084:	4835      	ldr	r0, [pc, #212]	@ (800115c <user_init+0x154>)
 8001086:	f002 fcf7 	bl	8003a78 <HAL_GPIO_WritePin>

	// M3: IN1_3 = 1, IN2_3 = 0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);    // IN1_3
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001090:	4833      	ldr	r0, [pc, #204]	@ (8001160 <user_init+0x158>)
 8001092:	f002 fcf1 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);  // IN2_3
 8001096:	2201      	movs	r2, #1
 8001098:	2108      	movs	r1, #8
 800109a:	4832      	ldr	r0, [pc, #200]	@ (8001164 <user_init+0x15c>)
 800109c:	f002 fcec 	bl	8003a78 <HAL_GPIO_WritePin>

	// M4: IN1_4 = 1, IN2_4 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);    // IN1_4
 80010a0:	2201      	movs	r2, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	482c      	ldr	r0, [pc, #176]	@ (8001158 <user_init+0x150>)
 80010a6:	f002 fce7 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);  // IN2_4
 80010aa:	2200      	movs	r2, #0
 80010ac:	2104      	movs	r1, #4
 80010ae:	482a      	ldr	r0, [pc, #168]	@ (8001158 <user_init+0x150>)
 80010b0:	f002 fce2 	bl	8003a78 <HAL_GPIO_WritePin>

	 // Reset BNO055
	uint8_t reset_cmd = 0x20;
 80010b4:	2320      	movs	r3, #32
 80010b6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3, BNO055_ADDRESS, 0x3F, 1, &reset_cmd, 1, HAL_MAX_DELAY);
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2301      	movs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	223f      	movs	r2, #63	@ 0x3f
 80010ca:	2150      	movs	r1, #80	@ 0x50
 80010cc:	4826      	ldr	r0, [pc, #152]	@ (8001168 <user_init+0x160>)
 80010ce:	f002 fe31 	bl	8003d34 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);  // Rất quan trọng!
 80010d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d6:	f001 fea5 	bl	8002e24 <HAL_Delay>

	// Set to config mode
	uint8_t config_mode = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, BNO055_ADDRESS, 0x3D, 1, &config_mode, 1, HAL_MAX_DELAY);
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	223d      	movs	r2, #61	@ 0x3d
 80010f0:	2150      	movs	r1, #80	@ 0x50
 80010f2:	481d      	ldr	r0, [pc, #116]	@ (8001168 <user_init+0x160>)
 80010f4:	f002 fe1e 	bl	8003d34 <HAL_I2C_Mem_Write>
	HAL_Delay(25);
 80010f8:	2019      	movs	r0, #25
 80010fa:	f001 fe93 	bl	8002e24 <HAL_Delay>

	// Set to NDOF mode
	uint8_t ndof_mode = 0x0C;
 80010fe:	230c      	movs	r3, #12
 8001100:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, BNO055_ADDRESS, 0x3D, 1, &ndof_mode, 1, HAL_MAX_DELAY);
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1d7b      	adds	r3, r7, #5
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	223d      	movs	r2, #61	@ 0x3d
 8001114:	2150      	movs	r1, #80	@ 0x50
 8001116:	4814      	ldr	r0, [pc, #80]	@ (8001168 <user_init+0x160>)
 8001118:	f002 fe0c 	bl	8003d34 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800111c:	2014      	movs	r0, #20
 800111e:	f001 fe81 	bl	8002e24 <HAL_Delay>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200003b4 	.word	0x200003b4
 8001130:	200003fc 	.word	0x200003fc
 8001134:	20000444 	.word	0x20000444
 8001138:	20000294 	.word	0x20000294
 800113c:	200002dc 	.word	0x200002dc
 8001140:	20000324 	.word	0x20000324
 8001144:	2000036c 	.word	0x2000036c
 8001148:	20000640 	.word	0x20000640
 800114c:	200004d4 	.word	0x200004d4
 8001150:	2000048c 	.word	0x2000048c
 8001154:	40020000 	.word	0x40020000
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40020400 	.word	0x40020400
 8001164:	40021000 	.word	0x40021000
 8001168:	20000240 	.word	0x20000240

0800116c <update_encoder_speed>:

void update_encoder_speed(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e06f      	b.n	8001258 <update_encoder_speed+0xec>
	{
		switch (i)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d82e      	bhi.n	80011dc <update_encoder_speed+0x70>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <update_encoder_speed+0x18>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001195 	.word	0x08001195
 8001188:	080011a7 	.word	0x080011a7
 800118c:	080011b9 	.word	0x080011b9
 8001190:	080011cb 	.word	0x080011cb
		{
			case 0:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim1);
 8001194:	4b35      	ldr	r3, [pc, #212]	@ (800126c <update_encoder_speed+0x100>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	b219      	sxth	r1, r3
 800119c:	4a34      	ldr	r2, [pc, #208]	@ (8001270 <update_encoder_speed+0x104>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 80011a4:	e01b      	b.n	80011de <update_encoder_speed+0x72>
			case 1:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim2);
 80011a6:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <update_encoder_speed+0x108>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	b219      	sxth	r1, r3
 80011ae:	4a30      	ldr	r2, [pc, #192]	@ (8001270 <update_encoder_speed+0x104>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 80011b6:	e012      	b.n	80011de <update_encoder_speed+0x72>
			case 2:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim3);
 80011b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <update_encoder_speed+0x10c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	b219      	sxth	r1, r3
 80011c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001270 <update_encoder_speed+0x104>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 80011c8:	e009      	b.n	80011de <update_encoder_speed+0x72>
			case 3:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim4);
 80011ca:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <update_encoder_speed+0x110>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	b219      	sxth	r1, r3
 80011d2:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <update_encoder_speed+0x104>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 80011da:	e000      	b.n	80011de <update_encoder_speed+0x72>
			default:
				break;
 80011dc:	bf00      	nop
		}

		delta_encoder[i] = encoder_current[i] - encoder_past[i];
 80011de:	4a24      	ldr	r2, [pc, #144]	@ (8001270 <update_encoder_speed+0x104>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4925      	ldr	r1, [pc, #148]	@ (8001280 <update_encoder_speed+0x114>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b219      	sxth	r1, r3
 80011f8:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <update_encoder_speed+0x118>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    if (delta_encoder[i] < -32768)
		{
	    	delta_encoder[i] += 65536;
		}

	    encoder_past[i] = encoder_current[i];
 8001200:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <update_encoder_speed+0x104>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001208:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <update_encoder_speed+0x114>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	    float speed_rps = (float) delta_encoder[i] / PPR / DT;
 8001210:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <update_encoder_speed+0x118>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001288 <update_encoder_speed+0x11c>
 8001224:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001228:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800128c <update_encoder_speed+0x120>
 800122c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001230:	edc7 7a00 	vstr	s15, [r7]
	    speed_rpm[i] = speed_rps * 60.0f;
 8001234:	edd7 7a00 	vldr	s15, [r7]
 8001238:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001290 <update_encoder_speed+0x124>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	b219      	sxth	r1, r3
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <update_encoder_speed+0x128>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b03      	cmp	r3, #3
 800125c:	dd8c      	ble.n	8001178 <update_encoder_speed+0xc>
	}
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000294 	.word	0x20000294
 8001270:	20000714 	.word	0x20000714
 8001274:	200002dc 	.word	0x200002dc
 8001278:	20000324 	.word	0x20000324
 800127c:	2000036c 	.word	0x2000036c
 8001280:	2000071c 	.word	0x2000071c
 8001284:	20000724 	.word	0x20000724
 8001288:	43700000 	.word	0x43700000
 800128c:	3c23d70a 	.word	0x3c23d70a
 8001290:	42700000 	.word	0x42700000
 8001294:	2000072c 	.word	0x2000072c

08001298 <read_IMU>:

void read_IMU(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
    uint8_t buffer[2];

    // ==== Read Yaw (Euler Heading) ====
    HAL_I2C_Mem_Read(&hi2c3, BNO055_ADDRESS, BNO055_EULER_H_LSB, 1, buffer, 2, HAL_MAX_DELAY);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	463b      	mov	r3, r7
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	221a      	movs	r2, #26
 80012b0:	2150      	movs	r1, #80	@ 0x50
 80012b2:	4843      	ldr	r0, [pc, #268]	@ (80013c0 <read_IMU+0x128>)
 80012b4:	f002 fe38 	bl	8003f28 <HAL_I2C_Mem_Read>
    int16_t yaw_raw = (int16_t)((buffer[1] << 8) | buffer[0]);
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	783b      	ldrb	r3, [r7, #0]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	80fb      	strh	r3, [r7, #6]
    yaw_deg = ((float)yaw_raw) / 16.0f;  // 1° = 16 LSB
 80012c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <read_IMU+0x12c>)
 80012de:	edc3 7a00 	vstr	s15, [r3]
    if (yaw_deg > 180)
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <read_IMU+0x12c>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80013c8 <read_IMU+0x130>
 80012ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	dd09      	ble.n	800130a <read_IMU+0x72>
        yaw_deg -= 360;
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <read_IMU+0x12c>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80013cc <read_IMU+0x134>
 8001300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <read_IMU+0x12c>)
 8001306:	edc3 7a00 	vstr	s15, [r3]
    yaw_deg += 180;
 800130a:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <read_IMU+0x12c>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80013c8 <read_IMU+0x130>
 8001314:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <read_IMU+0x12c>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
    yaw = yaw_deg * (M_PI / 180.0f);  // rad
 800131e:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <read_IMU+0x12c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f918 	bl	8000558 <__aeabi_f2d>
 8001328:	a323      	add	r3, pc, #140	@ (adr r3, 80013b8 <read_IMU+0x120>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f96b 	bl	8000608 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc1f 	bl	8000b7c <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <read_IMU+0x138>)
 8001342:	6013      	str	r3, [r2, #0]

    // ==== Read Gyro Z (yaw rate) ====
    HAL_I2C_Mem_Read(&hi2c3, BNO055_ADDRESS, BNO055_GYRO_DATA_Z_LSB, 1, buffer, 2, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2302      	movs	r3, #2
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	463b      	mov	r3, r7
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	221e      	movs	r2, #30
 8001356:	2150      	movs	r1, #80	@ 0x50
 8001358:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <read_IMU+0x128>)
 800135a:	f002 fde5 	bl	8003f28 <HAL_I2C_Mem_Read>
    int16_t gyro_z_raw = (int16_t)((buffer[1] << 8) | buffer[0]);
 800135e:	787b      	ldrb	r3, [r7, #1]
 8001360:	b21b      	sxth	r3, r3
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	783b      	ldrb	r3, [r7, #0]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	80bb      	strh	r3, [r7, #4]
    theta_dot = ((float)gyro_z_raw) / 16.0f;  // deg/s
 800136e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800137e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <read_IMU+0x13c>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
    theta_dot *= (M_PI / 180.0f);  // rad/s
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <read_IMU+0x13c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8e3 	bl	8000558 <__aeabi_f2d>
 8001392:	a309      	add	r3, pc, #36	@ (adr r3, 80013b8 <read_IMU+0x120>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f936 	bl	8000608 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbea 	bl	8000b7c <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <read_IMU+0x13c>)
 80013ac:	6013      	str	r3, [r2, #0]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	a2529d39 	.word	0xa2529d39
 80013bc:	3f91df46 	.word	0x3f91df46
 80013c0:	20000240 	.word	0x20000240
 80013c4:	20000734 	.word	0x20000734
 80013c8:	43340000 	.word	0x43340000
 80013cc:	43b40000 	.word	0x43b40000
 80013d0:	20000738 	.word	0x20000738
 80013d4:	2000073c 	.word	0x2000073c

080013d8 <check_uart_command>:

void check_uart_command(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
    static uint16_t old_pos = 0;
    uint16_t new_pos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart6.hdmarx);  // vị trí mới
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <check_uart_command+0x90>)
 80013e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80013ec:	80fb      	strh	r3, [r7, #6]

    if (new_pos != old_pos)
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <check_uart_command+0x94>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d033      	beq.n	8001460 <check_uart_command+0x88>
    {
        while (old_pos != new_pos)
 80013f8:	e02d      	b.n	8001456 <check_uart_command+0x7e>
        {
            char c = rx_buffer[old_pos++];
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <check_uart_command+0x94>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	b291      	uxth	r1, r2
 8001402:	4a1a      	ldr	r2, [pc, #104]	@ (800146c <check_uart_command+0x94>)
 8001404:	8011      	strh	r1, [r2, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <check_uart_command+0x98>)
 800140a:	5c9b      	ldrb	r3, [r3, r2]
 800140c:	717b      	strb	r3, [r7, #5]

            // Xử lý ký tự c (dùng buffer đệm riêng)
            if (c == '\n')
 800140e:	797b      	ldrb	r3, [r7, #5]
 8001410:	2b0a      	cmp	r3, #10
 8001412:	d10b      	bne.n	800142c <check_uart_command+0x54>
            {
                // Kết thúc chuỗi, parse
                parse_uart_line(temp_line);
 8001414:	4817      	ldr	r0, [pc, #92]	@ (8001474 <check_uart_command+0x9c>)
 8001416:	f000 f831 	bl	800147c <parse_uart_line>
                temp_line_index = 0;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <check_uart_command+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
                memset(temp_line, 0, sizeof(temp_line));
 8001420:	2264      	movs	r2, #100	@ 0x64
 8001422:	2100      	movs	r1, #0
 8001424:	4813      	ldr	r0, [pc, #76]	@ (8001474 <check_uart_command+0x9c>)
 8001426:	f006 fe56 	bl	80080d6 <memset>
 800142a:	e00d      	b.n	8001448 <check_uart_command+0x70>
            }
            else if (temp_line_index < sizeof(temp_line) - 1)
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <check_uart_command+0xa0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b62      	cmp	r3, #98	@ 0x62
 8001432:	d809      	bhi.n	8001448 <check_uart_command+0x70>
            {
                temp_line[temp_line_index++] = c;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <check_uart_command+0xa0>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	b2d1      	uxtb	r1, r2
 800143c:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <check_uart_command+0xa0>)
 800143e:	7011      	strb	r1, [r2, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4a0c      	ldr	r2, [pc, #48]	@ (8001474 <check_uart_command+0x9c>)
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	5453      	strb	r3, [r2, r1]
            }

            if (old_pos >= RX_BUFFER_SIZE)
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <check_uart_command+0x94>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b63      	cmp	r3, #99	@ 0x63
 800144e:	d902      	bls.n	8001456 <check_uart_command+0x7e>
                old_pos = 0;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <check_uart_command+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	801a      	strh	r2, [r3, #0]
        while (old_pos != new_pos)
 8001456:	4b05      	ldr	r3, [pc, #20]	@ (800146c <check_uart_command+0x94>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	88fa      	ldrh	r2, [r7, #6]
 800145c:	429a      	cmp	r2, r3
 800145e:	d1cc      	bne.n	80013fa <check_uart_command+0x22>
        }
    }
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200004d4 	.word	0x200004d4
 800146c:	20000768 	.word	0x20000768
 8001470:	20000640 	.word	0x20000640
 8001474:	200005dc 	.word	0x200005dc
 8001478:	2000070a 	.word	0x2000070a

0800147c <parse_uart_line>:

void parse_uart_line(char *line)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    float vx_local = 0, vy_local = 0, omega_local = 0;
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	617b      	str	r3, [r7, #20]

    char *vxStr = strtok(line, " ");
 8001496:	4931      	ldr	r1, [pc, #196]	@ (800155c <parse_uart_line+0xe0>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f006 fe37 	bl	800810c <strtok>
 800149e:	6138      	str	r0, [r7, #16]
    char *vyStr = strtok(NULL, " ");
 80014a0:	492e      	ldr	r1, [pc, #184]	@ (800155c <parse_uart_line+0xe0>)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f006 fe32 	bl	800810c <strtok>
 80014a8:	60f8      	str	r0, [r7, #12]
    char *omegaStr = strtok(NULL, " ");
 80014aa:	492c      	ldr	r1, [pc, #176]	@ (800155c <parse_uart_line+0xe0>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f006 fe2d 	bl	800810c <strtok>
 80014b2:	60b8      	str	r0, [r7, #8]

    if (vxStr && vyStr && omegaStr)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d043      	beq.n	8001542 <parse_uart_line+0xc6>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d040      	beq.n	8001542 <parse_uart_line+0xc6>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d03d      	beq.n	8001542 <parse_uart_line+0xc6>
    {
        vx_local = atof(vxStr);
 80014c6:	6938      	ldr	r0, [r7, #16]
 80014c8:	f005 feb6 	bl	8007238 <atof>
 80014cc:	ec53 2b10 	vmov	r2, r3, d0
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb52 	bl	8000b7c <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	61fb      	str	r3, [r7, #28]
        vy_local = atof(vyStr);
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f005 feab 	bl	8007238 <atof>
 80014e2:	ec53 2b10 	vmov	r2, r3, d0
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb47 	bl	8000b7c <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]
        omega_local = atof(omegaStr);
 80014f2:	68b8      	ldr	r0, [r7, #8]
 80014f4:	f005 fea0 	bl	8007238 <atof>
 80014f8:	ec53 2b10 	vmov	r2, r3, d0
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb3c 	bl	8000b7c <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	617b      	str	r3, [r7, #20]

        vx = vx_local;
 8001508:	4a15      	ldr	r2, [pc, #84]	@ (8001560 <parse_uart_line+0xe4>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	6013      	str	r3, [r2, #0]
        vy = vy_local;
 800150e:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <parse_uart_line+0xe8>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6013      	str	r3, [r2, #0]
        omega = omega_local;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <parse_uart_line+0xec>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	6013      	str	r3, [r2, #0]

        started = 1;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <parse_uart_line+0xf0>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
        move(vx, vy, omega);
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <parse_uart_line+0xe4>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <parse_uart_line+0xe8>)
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <parse_uart_line+0xec>)
 800152e:	edd3 6a00 	vldr	s13, [r3]
 8001532:	eeb0 1a66 	vmov.f32	s2, s13
 8001536:	eef0 0a47 	vmov.f32	s1, s14
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	f000 f81b 	bl	8001578 <move>
    }

    manual_mode = 1;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <parse_uart_line+0xf4>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
    last_manual_time = HAL_GetTick();
 8001548:	f001 fc60 	bl	8002e0c <HAL_GetTick>
 800154c:	4603      	mov	r3, r0
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <parse_uart_line+0xf8>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800a318 	.word	0x0800a318
 8001560:	20000740 	.word	0x20000740
 8001564:	20000744 	.word	0x20000744
 8001568:	20000748 	.word	0x20000748
 800156c:	20000708 	.word	0x20000708
 8001570:	2000070c 	.word	0x2000070c
 8001574:	20000710 	.word	0x20000710

08001578 <move>:

void move(float vx, float vy, float omega)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	ed2d 8b02 	vpush	{d8}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a03 	vstr	s0, [r7, #12]
 8001586:	edc7 0a02 	vstr	s1, [r7, #8]
 800158a:	ed87 1a01 	vstr	s2, [r7, #4]
    float v1 = (vx - vy - (L1 + L2) * omega) / r;
 800158e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001592:	edd7 7a02 	vldr	s15, [r7, #8]
 8001596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159a:	ee17 0a90 	vmov	r0, s15
 800159e:	f7fe ffdb 	bl	8000558 <__aeabi_f2d>
 80015a2:	4604      	mov	r4, r0
 80015a4:	460d      	mov	r5, r1
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7fe ffd6 	bl	8000558 <__aeabi_f2d>
 80015ac:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001848 <move+0x2d0>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f829 	bl	8000608 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7fe fe6b 	bl	8000298 <__aeabi_dsub>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001850 <move+0x2d8>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f944 	bl	800085c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff face 	bl	8000b7c <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    float v2 = (vx + vy + (L1 + L2) * omega) / r;
 80015e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	ee17 0a90 	vmov	r0, s15
 80015f4:	f7fe ffb0 	bl	8000558 <__aeabi_f2d>
 80015f8:	4604      	mov	r4, r0
 80015fa:	460d      	mov	r5, r1
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7fe ffab 	bl	8000558 <__aeabi_f2d>
 8001602:	a391      	add	r3, pc, #580	@ (adr r3, 8001848 <move+0x2d0>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fffe 	bl	8000608 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe fe42 	bl	800029c <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	a38b      	add	r3, pc, #556	@ (adr r3, 8001850 <move+0x2d8>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f919 	bl	800085c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff faa3 	bl	8000b7c <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	623b      	str	r3, [r7, #32]
    float v3 = (vx - vy + (L1 + L2) * omega) / r;
 800163a:	ed97 7a03 	vldr	s14, [r7, #12]
 800163e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001646:	ee17 0a90 	vmov	r0, s15
 800164a:	f7fe ff85 	bl	8000558 <__aeabi_f2d>
 800164e:	4604      	mov	r4, r0
 8001650:	460d      	mov	r5, r1
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe ff80 	bl	8000558 <__aeabi_f2d>
 8001658:	a37b      	add	r3, pc, #492	@ (adr r3, 8001848 <move+0x2d0>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffd3 	bl	8000608 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe fe17 	bl	800029c <__adddf3>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	a376      	add	r3, pc, #472	@ (adr r3, 8001850 <move+0x2d8>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7ff f8ee 	bl	800085c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa78 	bl	8000b7c <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	61fb      	str	r3, [r7, #28]
    float v4 = (vx + vy - (L1 + L2) * omega) / r;
 8001690:	ed97 7a03 	vldr	s14, [r7, #12]
 8001694:	edd7 7a02 	vldr	s15, [r7, #8]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	ee17 0a90 	vmov	r0, s15
 80016a0:	f7fe ff5a 	bl	8000558 <__aeabi_f2d>
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7fe ff55 	bl	8000558 <__aeabi_f2d>
 80016ae:	a366      	add	r3, pc, #408	@ (adr r3, 8001848 <move+0x2d0>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffa8 	bl	8000608 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe fdea 	bl	8000298 <__aeabi_dsub>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	a360      	add	r3, pc, #384	@ (adr r3, 8001850 <move+0x2d8>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff f8c3 	bl	800085c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa4d 	bl	8000b7c <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]

    float max_speed = fmaxf(fmaxf(fabsf(v1), fabsf(v2)), fmaxf(fabsf(v3), fabsf(v4)));
 80016e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016ea:	eeb0 7ae7 	vabs.f32	s14, s15
 80016ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80016f2:	eef0 7ae7 	vabs.f32	s15, s15
 80016f6:	eef0 0a67 	vmov.f32	s1, s15
 80016fa:	eeb0 0a47 	vmov.f32	s0, s14
 80016fe:	f008 fdc5 	bl	800a28c <fmaxf>
 8001702:	eeb0 8a40 	vmov.f32	s16, s0
 8001706:	edd7 7a07 	vldr	s15, [r7, #28]
 800170a:	eeb0 7ae7 	vabs.f32	s14, s15
 800170e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001712:	eef0 7ae7 	vabs.f32	s15, s15
 8001716:	eef0 0a67 	vmov.f32	s1, s15
 800171a:	eeb0 0a47 	vmov.f32	s0, s14
 800171e:	f008 fdb5 	bl	800a28c <fmaxf>
 8001722:	eef0 7a40 	vmov.f32	s15, s0
 8001726:	eef0 0a67 	vmov.f32	s1, s15
 800172a:	eeb0 0a48 	vmov.f32	s0, s16
 800172e:	f008 fdad 	bl	800a28c <fmaxf>
 8001732:	ed87 0a05 	vstr	s0, [r7, #20]
    if (max_speed > 1.0f)
 8001736:	edd7 7a05 	vldr	s15, [r7, #20]
 800173a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	dd1f      	ble.n	8001788 <move+0x210>
    {
        v1 /= max_speed;
 8001748:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800174c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001754:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        v2 /= max_speed;
 8001758:	edd7 6a08 	vldr	s13, [r7, #32]
 800175c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001764:	edc7 7a08 	vstr	s15, [r7, #32]
        v3 /= max_speed;
 8001768:	edd7 6a07 	vldr	s13, [r7, #28]
 800176c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	edc7 7a07 	vstr	s15, [r7, #28]
        v4 /= max_speed;
 8001778:	edd7 6a06 	vldr	s13, [r7, #24]
 800177c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001784:	edc7 7a06 	vstr	s15, [r7, #24]
    }

    Setpoint[0] = v1 * MAX_SPEED;
 8001788:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800178c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001840 <move+0x2c8>
 8001790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <move+0x2cc>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
    Setpoint[1] = v2 * MAX_SPEED;
 800179a:	edd7 7a08 	vldr	s15, [r7, #32]
 800179e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001840 <move+0x2c8>
 80017a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a6:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <move+0x2cc>)
 80017a8:	edc3 7a01 	vstr	s15, [r3, #4]
    Setpoint[2] = v3 * MAX_SPEED;
 80017ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80017b0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001840 <move+0x2c8>
 80017b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b8:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <move+0x2cc>)
 80017ba:	edc3 7a02 	vstr	s15, [r3, #8]
    Setpoint[3] = v4 * MAX_SPEED;
 80017be:	edd7 7a06 	vldr	s15, [r7, #24]
 80017c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001840 <move+0x2c8>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <move+0x2cc>)
 80017cc:	edc3 7a03 	vstr	s15, [r3, #12]

    driveMotor(0, Setpoint[0] / MAX_SPEED);  // Normalized từ -1.0 đến 1.0
 80017d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <move+0x2cc>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001840 <move+0x2c8>
 80017da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f838 	bl	8001858 <driveMotor>
    driveMotor(1, Setpoint[1] / MAX_SPEED);
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <move+0x2cc>)
 80017ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ee:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001840 <move+0x2c8>
 80017f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 f82c 	bl	8001858 <driveMotor>
    driveMotor(2, Setpoint[2] / MAX_SPEED);
 8001800:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <move+0x2cc>)
 8001802:	edd3 7a02 	vldr	s15, [r3, #8]
 8001806:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001840 <move+0x2c8>
 800180a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800180e:	eeb0 0a47 	vmov.f32	s0, s14
 8001812:	2002      	movs	r0, #2
 8001814:	f000 f820 	bl	8001858 <driveMotor>
    driveMotor(3, Setpoint[3] / MAX_SPEED);
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <move+0x2cc>)
 800181a:	edd3 7a03 	vldr	s15, [r3, #12]
 800181e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001840 <move+0x2c8>
 8001822:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f814 	bl	8001858 <driveMotor>
}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	@ 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	ecbd 8b02 	vpop	{d8}
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	f3af 8000 	nop.w
 8001840:	42c80000 	.word	0x42c80000
 8001844:	20000758 	.word	0x20000758
 8001848:	ae147ae2 	.word	0xae147ae2
 800184c:	3fcae147 	.word	0x3fcae147
 8001850:	1eb851ec 	.word	0x1eb851ec
 8001854:	3fa1eb85 	.word	0x3fa1eb85

08001858 <driveMotor>:

void driveMotor(int idx, float speed)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	ed87 0a00 	vstr	s0, [r7]
    if (idx < 0 || idx >= 4) return;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db7e      	blt.n	8001968 <driveMotor+0x110>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b03      	cmp	r3, #3
 800186e:	dc7b      	bgt.n	8001968 <driveMotor+0x110>

    uint8_t forward = (speed >= 0);
 8001870:	edd7 7a00 	vldr	s15, [r7]
 8001874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	bfac      	ite	ge
 800187e:	2301      	movge	r3, #1
 8001880:	2300      	movlt	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	74fb      	strb	r3, [r7, #19]
    float abs_speed = fabsf(speed);
 8001886:	edd7 7a00 	vldr	s15, [r7]
 800188a:	eef0 7ae7 	vabs.f32	s15, s15
 800188e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (abs_speed > 1.0f) abs_speed = 1.0f;  // Giới hạn từ -1.0 đến 1.0
 8001892:	edd7 7a05 	vldr	s15, [r7, #20]
 8001896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800189a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	dd02      	ble.n	80018aa <driveMotor+0x52>
 80018a4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018a8:	617b      	str	r3, [r7, #20]

    // Tính giá trị PWM theo PWM_MAX
    uint32_t pwm_value = (uint32_t)(abs_speed * PWM_MAX);
 80018aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ae:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001970 <driveMotor+0x118>
 80018b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	60fb      	str	r3, [r7, #12]

    // Điều khiển chiều
    HAL_GPIO_WritePin(in1_port[idx], in1_pin[idx], forward ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <driveMotor+0x11c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <driveMotor+0x120>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018d0:	7cfb      	ldrb	r3, [r7, #19]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	f002 f8cb 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(in2_port[idx], in2_pin[idx], forward ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80018e2:	4a26      	ldr	r2, [pc, #152]	@ (800197c <driveMotor+0x124>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ea:	4a25      	ldr	r2, [pc, #148]	@ (8001980 <driveMotor+0x128>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018f2:	7cfb      	ldrb	r3, [r7, #19]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	f002 f8ba 	bl	8003a78 <HAL_GPIO_WritePin>

    // Xuất PWM
    __HAL_TIM_SET_COMPARE(htim_pwm[idx], tim_channel[idx], pwm_value);
 8001904:	4a1f      	ldr	r2, [pc, #124]	@ (8001984 <driveMotor+0x12c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <driveMotor+0xc8>
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <driveMotor+0x130>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	635a      	str	r2, [r3, #52]	@ 0x34
 800191e:	e024      	b.n	800196a <driveMotor+0x112>
 8001920:	4a18      	ldr	r2, [pc, #96]	@ (8001984 <driveMotor+0x12c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d107      	bne.n	800193c <driveMotor+0xe4>
 800192c:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <driveMotor+0x130>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6393      	str	r3, [r2, #56]	@ 0x38
 800193a:	e016      	b.n	800196a <driveMotor+0x112>
 800193c:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <driveMotor+0x12c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d107      	bne.n	8001958 <driveMotor+0x100>
 8001948:	4a0f      	ldr	r2, [pc, #60]	@ (8001988 <driveMotor+0x130>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001956:	e008      	b.n	800196a <driveMotor+0x112>
 8001958:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <driveMotor+0x130>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6413      	str	r3, [r2, #64]	@ 0x40
 8001966:	e000      	b.n	800196a <driveMotor+0x112>
    if (idx < 0 || idx >= 4) return;
 8001968:	bf00      	nop
}
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	43960000 	.word	0x43960000
 8001974:	20000000 	.word	0x20000000
 8001978:	20000010 	.word	0x20000010
 800197c:	20000018 	.word	0x20000018
 8001980:	20000028 	.word	0x20000028
 8001984:	20000040 	.word	0x20000040
 8001988:	20000030 	.word	0x20000030

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001994:	f001 f9d4 	bl	8002d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001998:	f000 f884 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f000 fc16 	bl	80021cc <MX_GPIO_Init>
  MX_DMA_Init();
 80019a0:	f000 fbec 	bl	800217c <MX_DMA_Init>
  MX_TIM1_Init();
 80019a4:	f000 f914 	bl	8001bd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019a8:	f000 f96a 	bl	8001c80 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ac:	f000 f9bc 	bl	8001d28 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019b0:	f000 fa0e 	bl	8001dd0 <MX_TIM4_Init>
  MX_I2C3_Init();
 80019b4:	f000 f8de 	bl	8001b74 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 80019b8:	f000 fbb6 	bl	8002128 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80019bc:	f000 fa5c 	bl	8001e78 <MX_TIM5_Init>
  MX_TIM9_Init();
 80019c0:	f000 fadc 	bl	8001f7c <MX_TIM9_Init>
  MX_TIM10_Init();
 80019c4:	f000 fb3e 	bl	8002044 <MX_TIM10_Init>
  MX_TIM11_Init();
 80019c8:	f000 fb8a 	bl	80020e0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  user_init();
 80019cc:	f7ff fb1c 	bl	8001008 <user_init>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
//
//	HAL_Delay(2000);
//	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
//	HAL_Delay(2000);
    check_uart_command();
 80019d0:	f7ff fd02 	bl	80013d8 <check_uart_command>

    if (manual_mode && HAL_GetTick() - last_manual_time > MANUAL_TIMEOUT)
 80019d4:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <main+0xec>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d014      	beq.n	8001a06 <main+0x7a>
 80019dc:	f001 fa16 	bl	8002e0c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <main+0xf0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d90a      	bls.n	8001a06 <main+0x7a>
    {
        manual_mode = 0;
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <main+0xec>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
        move(0, 0, 0);  // Dừng robot nếu timeout
 80019f6:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8001a80 <main+0xf4>
 80019fa:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001a80 <main+0xf4>
 80019fe:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001a80 <main+0xf4>
 8001a02:	f7ff fdb9 	bl	8001578 <move>
    }

    if (send_flag && uart_tx_ready)
 8001a06:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <main+0xf8>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0e0      	beq.n	80019d0 <main+0x44>
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <main+0xfc>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0dc      	beq.n	80019d0 <main+0x44>
    {
        send_flag = 0;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <main+0xf8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
        uart_tx_ready = 0;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <main+0xfc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]

        snprintf(tx_buffer, sizeof(tx_buffer), "%.3f %.3f %.3f\n", V_send, yaw_send, theta_dot_send);
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <main+0x100>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	460d      	mov	r5, r1
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <main+0x104>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd8f 	bl	8000558 <__aeabi_f2d>
 8001a3a:	4680      	mov	r8, r0
 8001a3c:	4689      	mov	r9, r1
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <main+0x108>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a50:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a54:	e9cd 4500 	strd	r4, r5, [sp]
 8001a58:	4a0f      	ldr	r2, [pc, #60]	@ (8001a98 <main+0x10c>)
 8001a5a:	2164      	movs	r1, #100	@ 0x64
 8001a5c:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <main+0x110>)
 8001a5e:	f006 fac1 	bl	8007fe4 <sniprintf>
        HAL_UART_Transmit_DMA(&huart6, (uint8_t *)tx_buffer, strlen(tx_buffer));
 8001a62:	480e      	ldr	r0, [pc, #56]	@ (8001a9c <main+0x110>)
 8001a64:	f7fe fbbc 	bl	80001e0 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	490b      	ldr	r1, [pc, #44]	@ (8001a9c <main+0x110>)
 8001a70:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <main+0x114>)
 8001a72:	f004 fe0d 	bl	8006690 <HAL_UART_Transmit_DMA>
    check_uart_command();
 8001a76:	e7ab      	b.n	80019d0 <main+0x44>
 8001a78:	2000070c 	.word	0x2000070c
 8001a7c:	20000710 	.word	0x20000710
 8001a80:	00000000 	.word	0x00000000
 8001a84:	2000070b 	.word	0x2000070b
 8001a88:	20000709 	.word	0x20000709
 8001a8c:	2000074c 	.word	0x2000074c
 8001a90:	20000750 	.word	0x20000750
 8001a94:	20000754 	.word	0x20000754
 8001a98:	0800a31c 	.word	0x0800a31c
 8001a9c:	200006a4 	.word	0x200006a4
 8001aa0:	200004d4 	.word	0x200004d4

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	@ 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	2230      	movs	r2, #48	@ 0x30
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 fb0f 	bl	80080d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <SystemClock_Config+0xc8>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <SystemClock_Config+0xc8>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <SystemClock_Config+0xc8>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <SystemClock_Config+0xcc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a20      	ldr	r2, [pc, #128]	@ (8001b70 <SystemClock_Config+0xcc>)
 8001aee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <SystemClock_Config+0xcc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b08:	2310      	movs	r3, #16
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b14:	2308      	movs	r3, #8
 8001b16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b18:	2390      	movs	r3, #144	@ 0x90
 8001b1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001b20:	2306      	movs	r3, #6
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 ffe3 	bl	8004af4 <HAL_RCC_OscConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b34:	f000 fc88 	bl	8002448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b38:	230f      	movs	r3, #15
 8001b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2102      	movs	r1, #2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fa45 	bl	8004fe4 <HAL_RCC_ClockConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b60:	f000 fc72 	bl	8002448 <Error_Handler>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3750      	adds	r7, #80	@ 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000

08001b74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001b7a:	4a13      	ldr	r2, [pc, #76]	@ (8001bc8 <MX_I2C3_Init+0x54>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001b80:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <MX_I2C3_Init+0x58>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <MX_I2C3_Init+0x50>)
 8001bb2:	f001 ff7b 	bl	8003aac <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 fc44 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000240 	.word	0x20000240
 8001bc8:	40005c00 	.word	0x40005c00
 8001bcc:	000186a0 	.word	0x000186a0

08001bd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2224      	movs	r2, #36	@ 0x24
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f006 fa79 	bl	80080d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bec:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001bee:	4a23      	ldr	r2, [pc, #140]	@ (8001c7c <MX_TIM1_Init+0xac>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c20:	2301      	movs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	480d      	ldr	r0, [pc, #52]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001c44:	f003 fdaa 	bl	800579c <HAL_TIM_Encoder_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c4e:	f000 fbfb 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <MX_TIM1_Init+0xa8>)
 8001c60:	f004 fc44 	bl	80064ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c6a:	f000 fbed 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	3730      	adds	r7, #48	@ 0x30
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000294 	.word	0x20000294
 8001c7c:	40010000 	.word	0x40010000

08001c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	@ 0x30
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	2224      	movs	r2, #36	@ 0x24
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f006 fa21 	bl	80080d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001c9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001cb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001cf0:	f003 fd54 	bl	800579c <HAL_TIM_Encoder_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cfa:	f000 fba5 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4806      	ldr	r0, [pc, #24]	@ (8001d24 <MX_TIM2_Init+0xa4>)
 8001d0c:	f004 fbee 	bl	80064ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d16:	f000 fb97 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	@ 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200002dc 	.word	0x200002dc

08001d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	@ 0x30
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	2224      	movs	r2, #36	@ 0x24
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f006 f9cd 	bl	80080d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d44:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d46:	4a21      	ldr	r2, [pc, #132]	@ (8001dcc <MX_TIM3_Init+0xa4>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d64:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001d96:	f003 fd01 	bl	800579c <HAL_TIM_Encoder_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f000 fb52 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <MX_TIM3_Init+0xa0>)
 8001db2:	f004 fb9b 	bl	80064ec <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001dbc:	f000 fb44 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3730      	adds	r7, #48	@ 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000324 	.word	0x20000324
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	@ 0x30
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	2224      	movs	r2, #36	@ 0x24
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f006 f979 	bl	80080d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001dee:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <MX_TIM4_Init+0xa4>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001e00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e12:	2303      	movs	r3, #3
 8001e14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001e3e:	f003 fcad 	bl	800579c <HAL_TIM_Encoder_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e48:	f000 fafe 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_TIM4_Init+0xa0>)
 8001e5a:	f004 fb47 	bl	80064ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001e64:	f000 faf0 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	@ 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000036c 	.word	0x2000036c
 8001e74:	40000800 	.word	0x40000800

08001e78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	@ 0x38
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ea8:	4b32      	ldr	r3, [pc, #200]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001eaa:	4a33      	ldr	r2, [pc, #204]	@ (8001f78 <MX_TIM5_Init+0x100>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72;
 8001eae:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001eb0:	2248      	movs	r2, #72	@ 0x48
 8001eb2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001eba:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001ebc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ec0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ece:	4829      	ldr	r0, [pc, #164]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001ed0:	f003 faa8 	bl	8005424 <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001eda:	f000 fab5 	bl	8002448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ee4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4822      	ldr	r0, [pc, #136]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001eec:	f003 ff3c 	bl	8005d68 <HAL_TIM_ConfigClockSource>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001ef6:	f000 faa7 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001efa:	481e      	ldr	r0, [pc, #120]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001efc:	f003 fb44 	bl	8005588 <HAL_TIM_PWM_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001f06:	f000 fa9f 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	4619      	mov	r1, r3
 8001f18:	4816      	ldr	r0, [pc, #88]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001f1a:	f004 fae7 	bl	80064ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001f24:	f000 fa90 	bl	8002448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f28:	2360      	movs	r3, #96	@ 0x60
 8001f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001f2c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001f42:	f003 fe4f 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001f4c:	f000 fa7c 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	220c      	movs	r2, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	4807      	ldr	r0, [pc, #28]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001f58:	f003 fe44 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001f62:	f000 fa71 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f66:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <MX_TIM5_Init+0xfc>)
 8001f68:	f000 fc5e 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	@ 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200003b4 	.word	0x200003b4
 8001f78:	40000c00 	.word	0x40000c00

08001f7c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f82:	f107 0320 	add.w	r3, r7, #32
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fa4:	4a26      	ldr	r2, [pc, #152]	@ (8002040 <MX_TIM9_Init+0xc4>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72;
 8001fa8:	4b24      	ldr	r3, [pc, #144]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001faa:	2248      	movs	r2, #72	@ 0x48
 8001fac:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fba:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fc8:	481c      	ldr	r0, [pc, #112]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fca:	f003 fa2b 	bl	8005424 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001fd4:	f000 fa38 	bl	8002448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fdc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4815      	ldr	r0, [pc, #84]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001fe6:	f003 febf 	bl	8005d68 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001ff0:	f000 fa2a 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001ff4:	4811      	ldr	r0, [pc, #68]	@ (800203c <MX_TIM9_Init+0xc0>)
 8001ff6:	f003 fac7 	bl	8005588 <HAL_TIM_PWM_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002000:	f000 fa22 	bl	8002448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002004:	2360      	movs	r3, #96	@ 0x60
 8002006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002008:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800200c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2204      	movs	r2, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4807      	ldr	r0, [pc, #28]	@ (800203c <MX_TIM9_Init+0xc0>)
 800201e:	f003 fde1 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002028:	f000 fa0e 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800202c:	4803      	ldr	r0, [pc, #12]	@ (800203c <MX_TIM9_Init+0xc0>)
 800202e:	f000 fbfb 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	@ 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200003fc 	.word	0x200003fc
 8002040:	40014000 	.word	0x40014000

08002044 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	615a      	str	r2, [r3, #20]
 800205a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <MX_TIM10_Init+0x94>)
 800205e:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <MX_TIM10_Init+0x98>)
 8002060:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72;
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <MX_TIM10_Init+0x94>)
 8002064:	2248      	movs	r2, #72	@ 0x48
 8002066:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <MX_TIM10_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_TIM10_Init+0x94>)
 8002070:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002074:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_TIM10_Init+0x94>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <MX_TIM10_Init+0x94>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002082:	4815      	ldr	r0, [pc, #84]	@ (80020d8 <MX_TIM10_Init+0x94>)
 8002084:	f003 f9ce 	bl	8005424 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800208e:	f000 f9db 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002092:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <MX_TIM10_Init+0x94>)
 8002094:	f003 fa78 	bl	8005588 <HAL_TIM_PWM_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800209e:	f000 f9d3 	bl	8002448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a2:	2360      	movs	r3, #96	@ 0x60
 80020a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80020a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2200      	movs	r2, #0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <MX_TIM10_Init+0x94>)
 80020bc:	f003 fd92 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80020c6:	f000 f9bf 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80020ca:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <MX_TIM10_Init+0x94>)
 80020cc:	f000 fbac 	bl	8002828 <HAL_TIM_MspPostInit>

}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000444 	.word	0x20000444
 80020dc:	40014400 	.word	0x40014400

080020e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <MX_TIM11_Init+0x40>)
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <MX_TIM11_Init+0x44>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7200-1;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <MX_TIM11_Init+0x40>)
 80020ec:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80020f0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <MX_TIM11_Init+0x40>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <MX_TIM11_Init+0x40>)
 80020fa:	2263      	movs	r2, #99	@ 0x63
 80020fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <MX_TIM11_Init+0x40>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <MX_TIM11_Init+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_TIM11_Init+0x40>)
 800210c:	f003 f98a 	bl	8005424 <HAL_TIM_Base_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002116:	f000 f997 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000048c 	.word	0x2000048c
 8002124:	40014800 	.word	0x40014800

08002128 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <MX_USART6_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_USART6_UART_Init+0x4c>)
 8002160:	f004 fa46 	bl	80065f0 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f96d 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200004d4 	.word	0x200004d4
 8002178:	40011400 	.word	0x40011400

0800217c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_DMA_Init+0x4c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <MX_DMA_Init+0x4c>)
 800218c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <MX_DMA_Init+0x4c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2039      	movs	r0, #57	@ 0x39
 80021a4:	f000 ff3d 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80021a8:	2039      	movs	r0, #57	@ 0x39
 80021aa:	f000 ff56 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2045      	movs	r0, #69	@ 0x45
 80021b4:	f000 ff35 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80021b8:	2045      	movs	r0, #69	@ 0x45
 80021ba:	f000 ff4e 	bl	800305a <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	@ 0x30
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	4b92      	ldr	r3, [pc, #584]	@ (8002430 <MX_GPIO_Init+0x264>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a91      	ldr	r2, [pc, #580]	@ (8002430 <MX_GPIO_Init+0x264>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002430 <MX_GPIO_Init+0x264>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	4b8b      	ldr	r3, [pc, #556]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a8a      	ldr	r2, [pc, #552]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b88      	ldr	r3, [pc, #544]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b84      	ldr	r3, [pc, #528]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a83      	ldr	r2, [pc, #524]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b81      	ldr	r3, [pc, #516]	@ (8002430 <MX_GPIO_Init+0x264>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b7d      	ldr	r3, [pc, #500]	@ (8002430 <MX_GPIO_Init+0x264>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a7c      	ldr	r2, [pc, #496]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b7a      	ldr	r3, [pc, #488]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b76      	ldr	r3, [pc, #472]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a75      	ldr	r2, [pc, #468]	@ (8002430 <MX_GPIO_Init+0x264>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b73      	ldr	r3, [pc, #460]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b6f      	ldr	r3, [pc, #444]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a6e      	ldr	r2, [pc, #440]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b6c      	ldr	r3, [pc, #432]	@ (8002430 <MX_GPIO_Init+0x264>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_3_GPIO_Port, IN2_3_Pin, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	2108      	movs	r1, #8
 800228e:	4869      	ldr	r0, [pc, #420]	@ (8002434 <MX_GPIO_Init+0x268>)
 8002290:	f001 fbf2 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_4_Pin|IN1_4_Pin|IN2_1_Pin, GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	f640 0105 	movw	r1, #2053	@ 0x805
 800229a:	4867      	ldr	r0, [pc, #412]	@ (8002438 <MX_GPIO_Init+0x26c>)
 800229c:	f001 fbec 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80022a0:	2200      	movs	r2, #0
 80022a2:	f24f 0144 	movw	r1, #61508	@ 0xf044
 80022a6:	4865      	ldr	r0, [pc, #404]	@ (800243c <MX_GPIO_Init+0x270>)
 80022a8:	f001 fbe6 	bl	8003a78 <HAL_GPIO_WritePin>
                          |IN1_2_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022b2:	4863      	ldr	r0, [pc, #396]	@ (8002440 <MX_GPIO_Init+0x274>)
 80022b4:	f001 fbe0 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_3_GPIO_Port, IN1_3_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022be:	4861      	ldr	r0, [pc, #388]	@ (8002444 <MX_GPIO_Init+0x278>)
 80022c0:	f001 fbda 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80022c4:	2304      	movs	r3, #4
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	4857      	ldr	r0, [pc, #348]	@ (8002434 <MX_GPIO_Init+0x268>)
 80022d8:	f001 fa4a 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_3_Pin */
  GPIO_InitStruct.Pin = IN2_3_Pin;
 80022dc:	2308      	movs	r3, #8
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IN2_3_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4850      	ldr	r0, [pc, #320]	@ (8002434 <MX_GPIO_Init+0x268>)
 80022f4:	f001 fa3c 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80022f8:	2332      	movs	r3, #50	@ 0x32
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022fc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	4849      	ldr	r0, [pc, #292]	@ (8002434 <MX_GPIO_Init+0x268>)
 800230e:	f001 fa2f 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_4_Pin IN1_4_Pin IN2_1_Pin */
  GPIO_InitStruct.Pin = IN2_4_Pin|IN1_4_Pin|IN2_1_Pin;
 8002312:	f640 0305 	movw	r3, #2053	@ 0x805
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	4843      	ldr	r0, [pc, #268]	@ (8002438 <MX_GPIO_Init+0x26c>)
 800232c:	f001 fa20 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002330:	2301      	movs	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002334:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	483e      	ldr	r0, [pc, #248]	@ (8002440 <MX_GPIO_Init+0x274>)
 8002346:	f001 fa13 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           IN1_2_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800234a:	f24f 0344 	movw	r3, #61508	@ 0xf044
 800234e:	61fb      	str	r3, [r7, #28]
                          |IN1_2_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	2301      	movs	r3, #1
 8002352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4836      	ldr	r0, [pc, #216]	@ (800243c <MX_GPIO_Init+0x270>)
 8002364:	f001 fa04 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	4830      	ldr	r0, [pc, #192]	@ (8002440 <MX_GPIO_Init+0x274>)
 800237e:	f001 f9f7 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002382:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002394:	230a      	movs	r3, #10
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4828      	ldr	r0, [pc, #160]	@ (8002440 <MX_GPIO_Init+0x274>)
 80023a0:	f001 f9e6 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_1_Pin */
  GPIO_InitStruct.Pin = IN1_1_Pin;
 80023a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IN1_1_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	4820      	ldr	r0, [pc, #128]	@ (8002440 <MX_GPIO_Init+0x274>)
 80023be:	f001 f9d7 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023c2:	2310      	movs	r3, #16
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	4619      	mov	r1, r3
 80023d4:	4819      	ldr	r0, [pc, #100]	@ (800243c <MX_GPIO_Init+0x270>)
 80023d6:	f001 f9cb 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023da:	2320      	movs	r3, #32
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4619      	mov	r1, r3
 80023ec:	4813      	ldr	r0, [pc, #76]	@ (800243c <MX_GPIO_Init+0x270>)
 80023ee:	f001 f9bf 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023f2:	2320      	movs	r3, #32
 80023f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 031c 	add.w	r3, r7, #28
 8002402:	4619      	mov	r1, r3
 8002404:	480f      	ldr	r0, [pc, #60]	@ (8002444 <MX_GPIO_Init+0x278>)
 8002406:	f001 f9b3 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_3_Pin */
  GPIO_InitStruct.Pin = IN1_3_Pin;
 800240a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800240e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IN1_3_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4808      	ldr	r0, [pc, #32]	@ (8002444 <MX_GPIO_Init+0x278>)
 8002424:	f001 f9a4 	bl	8003770 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002428:	bf00      	nop
 800242a:	3730      	adds	r7, #48	@ 0x30
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	40021000 	.word	0x40021000
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400

08002448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800244c:	b672      	cpsid	i
}
 800244e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <Error_Handler+0x8>

08002454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_MspInit+0x4c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_MspInit+0x4c>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002468:	6453      	str	r3, [r2, #68]	@ 0x44
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_MspInit+0x4c>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002492:	2007      	movs	r0, #7
 8002494:	f000 fdba 	bl	800300c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800

080024a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a29      	ldr	r2, [pc, #164]	@ (8002568 <HAL_I2C_MspInit+0xc4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d14b      	bne.n	800255e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4b28      	ldr	r3, [pc, #160]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a27      	ldr	r2, [pc, #156]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b25      	ldr	r3, [pc, #148]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b21      	ldr	r3, [pc, #132]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a20      	ldr	r2, [pc, #128]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002510:	2304      	movs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	4815      	ldr	r0, [pc, #84]	@ (8002570 <HAL_I2C_MspInit+0xcc>)
 800251c:	f001 f928 	bl	8003770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002526:	2312      	movs	r3, #18
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002532:	2304      	movs	r3, #4
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	480d      	ldr	r0, [pc, #52]	@ (8002574 <HAL_I2C_MspInit+0xd0>)
 800253e:	f001 f917 	bl	8003770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a08      	ldr	r2, [pc, #32]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 800254c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002550:	6413      	str	r3, [r2, #64]	@ 0x40
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_I2C_MspInit+0xc8>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800255e:	bf00      	nop
 8002560:	3728      	adds	r7, #40	@ 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40005c00 	.word	0x40005c00
 800256c:	40023800 	.word	0x40023800
 8002570:	40020800 	.word	0x40020800
 8002574:	40020000 	.word	0x40020000

08002578 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	@ 0x40
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a68      	ldr	r2, [pc, #416]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d135      	bne.n	8002606 <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800259e:	4b67      	ldr	r3, [pc, #412]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a66      	ldr	r2, [pc, #408]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b64      	ldr	r3, [pc, #400]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	4b60      	ldr	r3, [pc, #384]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a5f      	ldr	r2, [pc, #380]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCA_1_Pin|ENCB_1_Pin;
 80025d2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	2301      	movs	r3, #1
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4854      	ldr	r0, [pc, #336]	@ (8002740 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80025f0:	f001 f8be 	bl	8003770 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	201a      	movs	r0, #26
 80025fa:	f000 fd12 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80025fe:	201a      	movs	r0, #26
 8002600:	f000 fd2b 	bl	800305a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002604:	e094      	b.n	8002730 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d12c      	bne.n	800266a <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	4b49      	ldr	r3, [pc, #292]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	4a48      	ldr	r2, [pc, #288]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002620:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	4b42      	ldr	r3, [pc, #264]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	4a41      	ldr	r2, [pc, #260]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6313      	str	r3, [r2, #48]	@ 0x30
 800263c:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENCB_3_Pin|ENCA_3_Pin;
 8002648:	2322      	movs	r3, #34	@ 0x22
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002650:	2301      	movs	r3, #1
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002658:	2301      	movs	r3, #1
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002660:	4619      	mov	r1, r3
 8002662:	4838      	ldr	r0, [pc, #224]	@ (8002744 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002664:	f001 f884 	bl	8003770 <HAL_GPIO_Init>
}
 8002668:	e062      	b.n	8002730 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM3)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a36      	ldr	r2, [pc, #216]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d12c      	bne.n	80026ce <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	4b30      	ldr	r3, [pc, #192]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4a2f      	ldr	r2, [pc, #188]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	6413      	str	r3, [r2, #64]	@ 0x40
 8002684:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	4b29      	ldr	r3, [pc, #164]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	4a28      	ldr	r2, [pc, #160]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a0:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENCA_4_Pin|ENCB_4_Pin;
 80026ac:	23c0      	movs	r3, #192	@ 0xc0
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026bc:	2302      	movs	r3, #2
 80026be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026c4:	4619      	mov	r1, r3
 80026c6:	481f      	ldr	r0, [pc, #124]	@ (8002744 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80026c8:	f001 f852 	bl	8003770 <HAL_GPIO_Init>
}
 80026cc:	e030      	b.n	8002730 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM4)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d12b      	bne.n	8002730 <HAL_TIM_Encoder_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	4b17      	ldr	r3, [pc, #92]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	4a16      	ldr	r2, [pc, #88]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	4a0f      	ldr	r2, [pc, #60]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	6313      	str	r3, [r2, #48]	@ 0x30
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCA_2_Pin|ENCB_2_Pin;
 8002710:	23c0      	movs	r3, #192	@ 0xc0
 8002712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002718:	2301      	movs	r3, #1
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002720:	2302      	movs	r3, #2
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002728:	4619      	mov	r1, r3
 800272a:	4809      	ldr	r0, [pc, #36]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800272c:	f001 f820 	bl	8003770 <HAL_GPIO_Init>
}
 8002730:	bf00      	nop
 8002732:	3740      	adds	r7, #64	@ 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40010000 	.word	0x40010000
 800273c:	40023800 	.word	0x40023800
 8002740:	40021000 	.word	0x40021000
 8002744:	40020000 	.word	0x40020000
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40020400 	.word	0x40020400

08002754 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2c      	ldr	r2, [pc, #176]	@ (8002814 <HAL_TIM_Base_MspInit+0xc0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10e      	bne.n	8002784 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002782:	e042      	b.n	800280a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM9)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_TIM_Base_MspInit+0xc8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6453      	str	r3, [r2, #68]	@ 0x44
 800279e:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
}
 80027aa:	e02e      	b.n	800280a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <HAL_TIM_Base_MspInit+0xcc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a16      	ldr	r2, [pc, #88]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	e01a      	b.n	800280a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <HAL_TIM_Base_MspInit+0xd0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d115      	bne.n	800280a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <HAL_TIM_Base_MspInit+0xc4>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	201a      	movs	r0, #26
 8002800:	f000 fc0f 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002804:	201a      	movs	r0, #26
 8002806:	f000 fc28 	bl	800305a <HAL_NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40000c00 	.word	0x40000c00
 8002818:	40023800 	.word	0x40023800
 800281c:	40014000 	.word	0x40014000
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800

08002828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a36      	ldr	r2, [pc, #216]	@ (8002920 <HAL_TIM_MspPostInit+0xf8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d11e      	bne.n	8002888 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a34      	ldr	r2, [pc, #208]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 8002866:	230c      	movs	r3, #12
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002876:	2302      	movs	r3, #2
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	4829      	ldr	r0, [pc, #164]	@ (8002928 <HAL_TIM_MspPostInit+0x100>)
 8002882:	f000 ff75 	bl	8003770 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002886:	e047      	b.n	8002918 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM9)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_TIM_MspPostInit+0x104>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d11e      	bne.n	80028d0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_1_Pin;
 80028ae:	2340      	movs	r3, #64	@ 0x40
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80028be:	2303      	movs	r3, #3
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4819      	ldr	r0, [pc, #100]	@ (8002930 <HAL_TIM_MspPostInit+0x108>)
 80028ca:	f000 ff51 	bl	8003770 <HAL_GPIO_Init>
}
 80028ce:	e023      	b.n	8002918 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM10)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <HAL_TIM_MspPostInit+0x10c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d11e      	bne.n	8002918 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a10      	ldr	r2, [pc, #64]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <HAL_TIM_MspPostInit+0xfc>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2_Pin;
 80028f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002908:	2303      	movs	r3, #3
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	4809      	ldr	r0, [pc, #36]	@ (8002938 <HAL_TIM_MspPostInit+0x110>)
 8002914:	f000 ff2c 	bl	8003770 <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	@ 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000
 800292c:	40014000 	.word	0x40014000
 8002930:	40021000 	.word	0x40021000
 8002934:	40014400 	.word	0x40014400
 8002938:	40020400 	.word	0x40020400

0800293c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a48      	ldr	r2, [pc, #288]	@ (8002a7c <HAL_UART_MspInit+0x140>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f040 8089 	bne.w	8002a72 <HAL_UART_MspInit+0x136>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	4b46      	ldr	r3, [pc, #280]	@ (8002a80 <HAL_UART_MspInit+0x144>)
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	4a45      	ldr	r2, [pc, #276]	@ (8002a80 <HAL_UART_MspInit+0x144>)
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002970:	4b43      	ldr	r3, [pc, #268]	@ (8002a80 <HAL_UART_MspInit+0x144>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4b3f      	ldr	r3, [pc, #252]	@ (8002a80 <HAL_UART_MspInit+0x144>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4a3e      	ldr	r2, [pc, #248]	@ (8002a80 <HAL_UART_MspInit+0x144>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6313      	str	r3, [r2, #48]	@ 0x30
 800298c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a80 <HAL_UART_MspInit+0x144>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002998:	23c0      	movs	r3, #192	@ 0xc0
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029a8:	2308      	movs	r3, #8
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4834      	ldr	r0, [pc, #208]	@ (8002a84 <HAL_UART_MspInit+0x148>)
 80029b4:	f000 fedc 	bl	8003770 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80029b8:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029ba:	4a34      	ldr	r2, [pc, #208]	@ (8002a8c <HAL_UART_MspInit+0x150>)
 80029bc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80029be:	4b32      	ldr	r3, [pc, #200]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029c0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80029c4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c6:	4b30      	ldr	r3, [pc, #192]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029da:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e0:	4b29      	ldr	r3, [pc, #164]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80029e6:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f4:	4b24      	ldr	r3, [pc, #144]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80029fa:	4823      	ldr	r0, [pc, #140]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 80029fc:	f000 fb48 	bl	8003090 <HAL_DMA_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002a06:	f7ff fd1f 	bl	8002448 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a10:	4a1d      	ldr	r2, [pc, #116]	@ (8002a88 <HAL_UART_MspInit+0x14c>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002a16:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a18:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_UART_MspInit+0x158>)
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a1e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002a22:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a24:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a36:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002a56:	480e      	ldr	r0, [pc, #56]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a58:	f000 fb1a 	bl	8003090 <HAL_DMA_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002a62:	f7ff fcf1 	bl	8002448 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a09      	ldr	r2, [pc, #36]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a6c:	4a08      	ldr	r2, [pc, #32]	@ (8002a90 <HAL_UART_MspInit+0x154>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	@ 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020800 	.word	0x40020800
 8002a88:	2000051c 	.word	0x2000051c
 8002a8c:	40026428 	.word	0x40026428
 8002a90:	2000057c 	.word	0x2000057c
 8002a94:	400264a0 	.word	0x400264a0

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <NMI_Handler+0x4>

08002aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <MemManage_Handler+0x4>

08002ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <UsageFault_Handler+0x4>

08002ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aee:	f000 f979 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002afe:	f002 ff81 	bl	8005a04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002b02:	4803      	ldr	r0, [pc, #12]	@ (8002b10 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002b04:	f002 ff7e 	bl	8005a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000294 	.word	0x20000294
 8002b10:	2000048c 	.word	0x2000048c

08002b14 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <DMA2_Stream1_IRQHandler+0x10>)
 8002b1a:	f000 fbbf 	bl	800329c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000051c 	.word	0x2000051c

08002b28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <DMA2_Stream6_IRQHandler+0x10>)
 8002b2e:	f000 fbb5 	bl	800329c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000057c 	.word	0x2000057c

08002b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_kill>:

int _kill(int pid, int sig)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b56:	f005 fb7b 	bl	8008250 <__errno>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2216      	movs	r2, #22
 8002b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_exit>:

void _exit (int status)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe7 	bl	8002b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b7e:	bf00      	nop
 8002b80:	e7fd      	b.n	8002b7e <_exit+0x12>

08002b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e00a      	b.n	8002baa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b94:	f3af 8000 	nop.w
 8002b98:	4601      	mov	r1, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	60ba      	str	r2, [r7, #8]
 8002ba0:	b2ca      	uxtb	r2, r1
 8002ba2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	dbf0      	blt.n	8002b94 <_read+0x12>
  }

  return len;
 8002bb2:	687b      	ldr	r3, [r7, #4]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e009      	b.n	8002be2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	60ba      	str	r2, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dbf1      	blt.n	8002bce <_write+0x12>
  }
  return len;
 8002bea:	687b      	ldr	r3, [r7, #4]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_close>:

int _close(int file)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c1c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_isatty>:

int _isatty(int file)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f005 fae0 	bl	8008250 <__errno>
 8002c90:	4603      	mov	r3, r0
 8002c92:	220c      	movs	r2, #12
 8002c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <_sbrk+0x64>)
 8002cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20020000 	.word	0x20020000
 8002cbc:	00000400 	.word	0x00000400
 8002cc0:	2000076c 	.word	0x2000076c
 8002cc4:	200008c0 	.word	0x200008c0

08002cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <SystemInit+0x20>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <SystemInit+0x20>)
 8002cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cf0:	f7ff ffea 	bl	8002cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf4:	480c      	ldr	r0, [pc, #48]	@ (8002d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cf6:	490d      	ldr	r1, [pc, #52]	@ (8002d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cfc:	e002      	b.n	8002d04 <LoopCopyDataInit>

08002cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d02:	3304      	adds	r3, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d08:	d3f9      	bcc.n	8002cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d10:	e001      	b.n	8002d16 <LoopFillZerobss>

08002d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d14:	3204      	adds	r2, #4

08002d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d18:	d3fb      	bcc.n	8002d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1a:	f005 fa9f 	bl	800825c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1e:	f7fe fe35 	bl	800198c <main>
  bx  lr    
 8002d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d2c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002d30:	0800a774 	.word	0x0800a774
  ldr r2, =_sbss
 8002d34:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002d38:	200008c0 	.word	0x200008c0

08002d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <ADC_IRQHandler>
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d44:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <HAL_Init+0x40>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <HAL_Init+0x40>)
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_Init+0x40>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <HAL_Init+0x40>)
 8002d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a07      	ldr	r2, [pc, #28]	@ (8002d80 <HAL_Init+0x40>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 f94f 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 f808 	bl	8002d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d74:	f7ff fb6e 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_InitTick+0x54>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_InitTick+0x58>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f967 	bl	8003076 <HAL_SYSTICK_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00e      	b.n	8002dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d80a      	bhi.n	8002dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db8:	2200      	movs	r2, #0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f000 f92f 	bl	8003022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc4:	4a06      	ldr	r2, [pc, #24]	@ (8002de0 <HAL_InitTick+0x5c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000050 	.word	0x20000050
 8002ddc:	20000058 	.word	0x20000058
 8002de0:	20000054 	.word	0x20000054

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	@ (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000058 	.word	0x20000058
 8002e08:	20000770 	.word	0x20000770

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000770 	.word	0x20000770

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000058 	.word	0x20000058

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	@ (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	@ (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff29 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff3e 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff8e 	bl	8002f60 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff31 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa2 	bl	8002fc8 <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff feb6 	bl	8002e0c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e099      	b.n	80031e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	e00f      	b.n	80030ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ce:	f7ff fe9d 	bl	8002e0c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d908      	bls.n	80030ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e078      	b.n	80031e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e8      	bne.n	80030ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4b38      	ldr	r3, [pc, #224]	@ (80031e8 <HAL_DMA_Init+0x158>)
 8003108:	4013      	ands	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	2b04      	cmp	r3, #4
 8003146:	d107      	bne.n	8003158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	4313      	orrs	r3, r2
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	2b04      	cmp	r3, #4
 8003180:	d117      	bne.n	80031b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa6f 	bl	8003678 <DMA_CheckFifoParam>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031ae:	2301      	movs	r3, #1
 80031b0:	e016      	b.n	80031e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa26 	bl	800360c <DMA_CalcBaseAndBitshift>
 80031c0:	4603      	mov	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	223f      	movs	r2, #63	@ 0x3f
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	f010803f 	.word	0xf010803f

080031ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Start_IT+0x26>
 800320e:	2302      	movs	r3, #2
 8003210:	e040      	b.n	8003294 <HAL_DMA_Start_IT+0xa8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d12f      	bne.n	8003286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f9b8 	bl	80035b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	223f      	movs	r2, #63	@ 0x3f
 8003246:	409a      	lsls	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0216 	orr.w	r2, r2, #22
 800325a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e005      	b.n	8003292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032a8:	4b8e      	ldr	r3, [pc, #568]	@ (80034e4 <HAL_DMA_IRQHandler+0x248>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a8e      	ldr	r2, [pc, #568]	@ (80034e8 <HAL_DMA_IRQHandler+0x24c>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	0a9b      	lsrs	r3, r3, #10
 80032b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2208      	movs	r2, #8
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01a      	beq.n	8003308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0204 	bic.w	r2, r2, #4
 80032ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	2208      	movs	r2, #8
 80032f6:	409a      	lsls	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	2201      	movs	r2, #1
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	2201      	movs	r2, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	f043 0202 	orr.w	r2, r3, #2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	2204      	movs	r2, #4
 8003344:	409a      	lsls	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d012      	beq.n	8003374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	2204      	movs	r2, #4
 8003362:	409a      	lsls	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	f043 0204 	orr.w	r2, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	2210      	movs	r2, #16
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d043      	beq.n	800340c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d03c      	beq.n	800340c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2210      	movs	r2, #16
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d018      	beq.n	80033de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d024      	beq.n	800340c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
 80033ca:	e01f      	b.n	800340c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
 80033dc:	e016      	b.n	800340c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0208 	bic.w	r2, r2, #8
 80033fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	2220      	movs	r2, #32
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 808f 	beq.w	800353c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8087 	beq.w	800353c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	2220      	movs	r2, #32
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b05      	cmp	r3, #5
 8003444:	d136      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0216 	bic.w	r2, r2, #22
 8003454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_DMA_IRQHandler+0x1da>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0208 	bic.w	r2, r2, #8
 8003484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	223f      	movs	r2, #63	@ 0x3f
 800348c:	409a      	lsls	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d07e      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
        }
        return;
 80034b2:	e079      	b.n	80035a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d031      	beq.n	800353c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e02c      	b.n	800353c <HAL_DMA_IRQHandler+0x2a0>
 80034e2:	bf00      	nop
 80034e4:	20000050 	.word	0x20000050
 80034e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d023      	beq.n	800353c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e01e      	b.n	800353c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10f      	bne.n	800352c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0210 	bic.w	r2, r2, #16
 800351a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	2b00      	cmp	r3, #0
 8003542:	d032      	beq.n	80035aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d022      	beq.n	8003596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2205      	movs	r2, #5
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	3301      	adds	r3, #1
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d307      	bcc.n	8003584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f2      	bne.n	8003568 <HAL_DMA_IRQHandler+0x2cc>
 8003582:	e000      	b.n	8003586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
 80035a6:	e000      	b.n	80035aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80035a8:	bf00      	nop
    }
  }
}
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b40      	cmp	r3, #64	@ 0x40
 80035dc:	d108      	bne.n	80035f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035ee:	e007      	b.n	8003600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3b10      	subs	r3, #16
 800361c:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <DMA_CalcBaseAndBitshift+0x64>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003626:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <DMA_CalcBaseAndBitshift+0x68>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d909      	bls.n	800364e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	659a      	str	r2, [r3, #88]	@ 0x58
 800364c:	e007      	b.n	800365e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	aaaaaaab 	.word	0xaaaaaaab
 8003674:	0800a344 	.word	0x0800a344

08003678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11f      	bne.n	80036d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d856      	bhi.n	8003746 <DMA_CheckFifoParam+0xce>
 8003698:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <DMA_CheckFifoParam+0x28>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036c3 	.word	0x080036c3
 80036a8:	080036b1 	.word	0x080036b1
 80036ac:	08003747 	.word	0x08003747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d046      	beq.n	800374a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c0:	e043      	b.n	800374a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036ca:	d140      	bne.n	800374e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d0:	e03d      	b.n	800374e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036da:	d121      	bne.n	8003720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d837      	bhi.n	8003752 <DMA_CheckFifoParam+0xda>
 80036e2:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <DMA_CheckFifoParam+0x70>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	080036ff 	.word	0x080036ff
 80036f0:	080036f9 	.word	0x080036f9
 80036f4:	08003711 	.word	0x08003711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e030      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d025      	beq.n	8003756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370e:	e022      	b.n	8003756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003718:	d11f      	bne.n	800375a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800371e:	e01c      	b.n	800375a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d903      	bls.n	800372e <DMA_CheckFifoParam+0xb6>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d003      	beq.n	8003734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800372c:	e018      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
      break;
 8003732:	e015      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e00b      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;
 8003746:	bf00      	nop
 8003748:	e00a      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
 800374c:	e008      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      break;
 800374e:	bf00      	nop
 8003750:	e006      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      break;
 8003752:	bf00      	nop
 8003754:	e004      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      break;   
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
      break;
 800375e:	bf00      	nop
    }
  } 
  
  return status; 
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop

08003770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e159      	b.n	8003a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800378c:	2201      	movs	r2, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	f040 8148 	bne.w	8003a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d005      	beq.n	80037c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d130      	bne.n	8003824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 0201 	and.w	r2, r3, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b03      	cmp	r3, #3
 800382e:	d017      	beq.n	8003860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d123      	bne.n	80038b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	220f      	movs	r2, #15
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	08da      	lsrs	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3208      	adds	r2, #8
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	2203      	movs	r2, #3
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0203 	and.w	r2, r3, #3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80a2 	beq.w	8003a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b57      	ldr	r3, [pc, #348]	@ (8003a58 <HAL_GPIO_Init+0x2e8>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	4a56      	ldr	r2, [pc, #344]	@ (8003a58 <HAL_GPIO_Init+0x2e8>)
 8003900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003904:	6453      	str	r3, [r2, #68]	@ 0x44
 8003906:	4b54      	ldr	r3, [pc, #336]	@ (8003a58 <HAL_GPIO_Init+0x2e8>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003912:	4a52      	ldr	r2, [pc, #328]	@ (8003a5c <HAL_GPIO_Init+0x2ec>)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a49      	ldr	r2, [pc, #292]	@ (8003a60 <HAL_GPIO_Init+0x2f0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d019      	beq.n	8003972 <HAL_GPIO_Init+0x202>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a48      	ldr	r2, [pc, #288]	@ (8003a64 <HAL_GPIO_Init+0x2f4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0x1fe>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a47      	ldr	r2, [pc, #284]	@ (8003a68 <HAL_GPIO_Init+0x2f8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00d      	beq.n	800396a <HAL_GPIO_Init+0x1fa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a46      	ldr	r2, [pc, #280]	@ (8003a6c <HAL_GPIO_Init+0x2fc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <HAL_GPIO_Init+0x1f6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a45      	ldr	r2, [pc, #276]	@ (8003a70 <HAL_GPIO_Init+0x300>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_GPIO_Init+0x1f2>
 800395e:	2304      	movs	r3, #4
 8003960:	e008      	b.n	8003974 <HAL_GPIO_Init+0x204>
 8003962:	2307      	movs	r3, #7
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x204>
 8003966:	2303      	movs	r3, #3
 8003968:	e004      	b.n	8003974 <HAL_GPIO_Init+0x204>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x204>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_GPIO_Init+0x204>
 8003972:	2300      	movs	r3, #0
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f002 0203 	and.w	r2, r2, #3
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4093      	lsls	r3, r2
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003984:	4935      	ldr	r1, [pc, #212]	@ (8003a5c <HAL_GPIO_Init+0x2ec>)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e0:	4a24      	ldr	r2, [pc, #144]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a10:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a34:	4a0f      	ldr	r2, [pc, #60]	@ (8003a74 <HAL_GPIO_Init+0x304>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	f67f aea2 	bls.w	800378c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3724      	adds	r7, #36	@ 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a94:	e003      	b.n	8003a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	041a      	lsls	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	619a      	str	r2, [r3, #24]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e12b      	b.n	8003d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fce6 	bl	80024a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	@ 0x24
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b10:	f001 fc60 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8003b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a81      	ldr	r2, [pc, #516]	@ (8003d20 <HAL_I2C_Init+0x274>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d807      	bhi.n	8003b30 <HAL_I2C_Init+0x84>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a80      	ldr	r2, [pc, #512]	@ (8003d24 <HAL_I2C_Init+0x278>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	bf94      	ite	ls
 8003b28:	2301      	movls	r3, #1
 8003b2a:	2300      	movhi	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e006      	b.n	8003b3e <HAL_I2C_Init+0x92>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a7d      	ldr	r2, [pc, #500]	@ (8003d28 <HAL_I2C_Init+0x27c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0e7      	b.n	8003d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a78      	ldr	r2, [pc, #480]	@ (8003d2c <HAL_I2C_Init+0x280>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0c9b      	lsrs	r3, r3, #18
 8003b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a6a      	ldr	r2, [pc, #424]	@ (8003d20 <HAL_I2C_Init+0x274>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d802      	bhi.n	8003b80 <HAL_I2C_Init+0xd4>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	e009      	b.n	8003b94 <HAL_I2C_Init+0xe8>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	4a69      	ldr	r2, [pc, #420]	@ (8003d30 <HAL_I2C_Init+0x284>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	3301      	adds	r3, #1
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ba6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	495c      	ldr	r1, [pc, #368]	@ (8003d20 <HAL_I2C_Init+0x274>)
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d819      	bhi.n	8003be8 <HAL_I2C_Init+0x13c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e59      	subs	r1, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc2:	1c59      	adds	r1, r3, #1
 8003bc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bc8:	400b      	ands	r3, r1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_I2C_Init+0x138>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e59      	subs	r1, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	e051      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003be4:	2304      	movs	r3, #4
 8003be6:	e04f      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d111      	bne.n	8003c14 <HAL_I2C_Init+0x168>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e58      	subs	r0, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e012      	b.n	8003c3a <HAL_I2C_Init+0x18e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1e58      	subs	r0, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	0099      	lsls	r1, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x196>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e022      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <HAL_I2C_Init+0x1bc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1e58      	subs	r0, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	440b      	add	r3, r1
 8003c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c66:	e00f      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	0099      	lsls	r1, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	6809      	ldr	r1, [r1, #0]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6911      	ldr	r1, [r2, #16]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68d2      	ldr	r2, [r2, #12]
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	000186a0 	.word	0x000186a0
 8003d24:	001e847f 	.word	0x001e847f
 8003d28:	003d08ff 	.word	0x003d08ff
 8003d2c:	431bde83 	.word	0x431bde83
 8003d30:	10624dd3 	.word	0x10624dd3

08003d34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	817b      	strh	r3, [r7, #10]
 8003d46:	460b      	mov	r3, r1
 8003d48:	813b      	strh	r3, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d4e:	f7ff f85d 	bl	8002e0c <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	f040 80d9 	bne.w	8003f14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2319      	movs	r3, #25
 8003d68:	2201      	movs	r2, #1
 8003d6a:	496d      	ldr	r1, [pc, #436]	@ (8003f20 <HAL_I2C_Mem_Write+0x1ec>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fc8b 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0cc      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Mem_Write+0x56>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0c5      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d007      	beq.n	8003db0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	@ 0x21
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2240      	movs	r2, #64	@ 0x40
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a4d      	ldr	r2, [pc, #308]	@ (8003f24 <HAL_I2C_Mem_Write+0x1f0>)
 8003df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df2:	88f8      	ldrh	r0, [r7, #6]
 8003df4:	893a      	ldrh	r2, [r7, #8]
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4603      	mov	r3, r0
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fac2 	bl	800438c <I2C_RequestMemoryWrite>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d052      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e081      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fd50 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06b      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_I2C_Mem_Write+0x180>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d017      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1aa      	bne.n	8003e12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fd43 	bl	800494c <I2C_WaitOnBTFFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d107      	bne.n	8003ee4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e016      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00100002 	.word	0x00100002
 8003f24:	ffff0000 	.word	0xffff0000

08003f28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	@ 0x30
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	817b      	strh	r3, [r7, #10]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	813b      	strh	r3, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f42:	f7fe ff63 	bl	8002e0c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	f040 8214 	bne.w	800437e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2319      	movs	r3, #25
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	497b      	ldr	r1, [pc, #492]	@ (800414c <HAL_I2C_Mem_Read+0x224>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fb91 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e207      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x56>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e200      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d007      	beq.n	8003fa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	@ 0x22
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8004150 <HAL_I2C_Mem_Read+0x228>)
 8003fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe6:	88f8      	ldrh	r0, [r7, #6]
 8003fe8:	893a      	ldrh	r2, [r7, #8]
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa5e 	bl	80044b8 <I2C_RequestMemoryRead>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e1bc      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d113      	bne.n	8004036 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e190      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403a:	2b01      	cmp	r3, #1
 800403c:	d11b      	bne.n	8004076 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e170      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	2b02      	cmp	r3, #2
 800407c:	d11b      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800409c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	e150      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040cc:	e144      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	f200 80f1 	bhi.w	80042ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d123      	bne.n	8004128 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fc79 	bl	80049dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e145      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004126:	e117      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	d14e      	bne.n	80041ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	2200      	movs	r2, #0
 8004138:	4906      	ldr	r1, [pc, #24]	@ (8004154 <HAL_I2C_Mem_Read+0x22c>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 faa4 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e11a      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
 800414a:	bf00      	nop
 800414c:	00100002 	.word	0x00100002
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041cc:	e0c4      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2200      	movs	r2, #0
 80041d6:	496c      	ldr	r1, [pc, #432]	@ (8004388 <HAL_I2C_Mem_Read+0x460>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fa55 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0cb      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004230:	2200      	movs	r2, #0
 8004232:	4955      	ldr	r1, [pc, #340]	@ (8004388 <HAL_I2C_Mem_Read+0x460>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fa27 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e09d      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042b8:	e04e      	b.n	8004358 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fb8c 	bl	80049dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e058      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d124      	bne.n	8004358 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004312:	2b03      	cmp	r3, #3
 8004314:	d107      	bne.n	8004326 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004324:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f aeb6 	bne.w	80040ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	@ 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010004 	.word	0x00010004

0800438c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2200      	movs	r2, #0
 80043be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f960 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043dc:	d103      	bne.n	80043e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e05f      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	492d      	ldr	r1, [pc, #180]	@ (80044b4 <I2C_RequestMemoryWrite+0x128>)
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f9bb 	bl	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e04c      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	6a39      	ldr	r1, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fa46 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b04      	cmp	r3, #4
 800443c:	d107      	bne.n	800444e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02b      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	e021      	b.n	80044a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	b29b      	uxth	r3, r3
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fa20 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e005      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449e:	893b      	ldrh	r3, [r7, #8]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	00010002 	.word	0x00010002

080044b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	460b      	mov	r3, r1
 80044cc:	813b      	strh	r3, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8c2 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004518:	d103      	bne.n	8004522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0aa      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	4952      	ldr	r1, [pc, #328]	@ (8004684 <I2C_RequestMemoryRead+0x1cc>)
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f91d 	bl	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e097      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f9a8 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e076      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	e021      	b.n	80045e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	6a39      	ldr	r1, [r7, #32]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f982 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d107      	bne.n	80045d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e050      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	6a39      	ldr	r1, [r7, #32]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f967 	bl	80048bc <I2C_WaitOnTXEFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d107      	bne.n	800460c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e035      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800461e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2200      	movs	r2, #0
 8004628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f82b 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004646:	d103      	bne.n	8004650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e013      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	4906      	ldr	r1, [pc, #24]	@ (8004684 <I2C_RequestMemoryRead+0x1cc>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f886 	bl	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010002 	.word	0x00010002

08004688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004698:	e048      	b.n	800472c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d044      	beq.n	800472c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe fbb3 	bl	8002e0c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d139      	bne.n	800472c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10d      	bne.n	80046de <I2C_WaitOnFlagUntilTimeout+0x56>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	43da      	mvns	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4013      	ands	r3, r2
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	e00c      	b.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d116      	bne.n	800472c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e023      	b.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	0c1b      	lsrs	r3, r3, #16
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10d      	bne.n	8004752 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	43da      	mvns	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4013      	ands	r3, r2
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	e00c      	b.n	800476c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	43da      	mvns	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	429a      	cmp	r2, r3
 8004770:	d093      	beq.n	800469a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478a:	e071      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d123      	bne.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	f043 0204 	orr.w	r2, r3, #4
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e067      	b.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d041      	beq.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ec:	f7fe fb0e 	bl	8002e0c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d302      	bcc.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d136      	bne.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10c      	bne.n	8004826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	43da      	mvns	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	e00b      	b.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	43da      	mvns	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e021      	b.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	0c1b      	lsrs	r3, r3, #16
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10c      	bne.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	43da      	mvns	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e00b      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	43da      	mvns	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf14      	ite	ne
 80048a6:	2301      	movne	r3, #1
 80048a8:	2300      	moveq	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f af6d 	bne.w	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c8:	e034      	b.n	8004934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f8e3 	bl	8004a96 <I2C_IsAcknowledgeFailed>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e034      	b.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d028      	beq.n	8004934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fe fa93 	bl	8002e0c <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11d      	bne.n	8004934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004902:	2b80      	cmp	r3, #128	@ 0x80
 8004904:	d016      	beq.n	8004934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e007      	b.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b80      	cmp	r3, #128	@ 0x80
 8004940:	d1c3      	bne.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004958:	e034      	b.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f89b 	bl	8004a96 <I2C_IsAcknowledgeFailed>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e034      	b.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d028      	beq.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7fe fa4b 	bl	8002e0c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11d      	bne.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d016      	beq.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	f043 0220 	orr.w	r2, r3, #32
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e007      	b.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d1c3      	bne.n	800495a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049e8:	e049      	b.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d119      	bne.n	8004a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0210 	mvn.w	r2, #16
 8004a00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e030      	b.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2c:	f7fe f9ee 	bl	8002e0c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d302      	bcc.n	8004a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11d      	bne.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b40      	cmp	r3, #64	@ 0x40
 8004a4e:	d016      	beq.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e007      	b.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	d1ae      	bne.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aac:	d11b      	bne.n	8004ae6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ab6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f043 0204 	orr.w	r2, r3, #4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e267      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d075      	beq.n	8004bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b12:	4b88      	ldr	r3, [pc, #544]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d00c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1e:	4b85      	ldr	r3, [pc, #532]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d112      	bne.n	8004b50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b82      	ldr	r3, [pc, #520]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	4b7e      	ldr	r3, [pc, #504]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05b      	beq.n	8004bfc <HAL_RCC_OscConfig+0x108>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d157      	bne.n	8004bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e242      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b58:	d106      	bne.n	8004b68 <HAL_RCC_OscConfig+0x74>
 8004b5a:	4b76      	ldr	r3, [pc, #472]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a75      	ldr	r2, [pc, #468]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e01d      	b.n	8004ba4 <HAL_RCC_OscConfig+0xb0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x98>
 8004b72:	4b70      	ldr	r3, [pc, #448]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6f      	ldr	r2, [pc, #444]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6c      	ldr	r2, [pc, #432]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0xb0>
 8004b8c:	4b69      	ldr	r3, [pc, #420]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a68      	ldr	r2, [pc, #416]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b66      	ldr	r3, [pc, #408]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe f92e 	bl	8002e0c <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fe f92a 	bl	8002e0c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e207      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xc0>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe f91a 	bl	8002e0c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fe f916 	bl	8002e0c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	@ 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1f3      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bee:	4b51      	ldr	r3, [pc, #324]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0xe8>
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d063      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d11c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b44      	ldr	r3, [pc, #272]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	4b41      	ldr	r3, [pc, #260]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x152>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e1c7      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c46:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4937      	ldr	r1, [pc, #220]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5a:	e03a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c64:	4b34      	ldr	r3, [pc, #208]	@ (8004d38 <HAL_RCC_OscConfig+0x244>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fe f8cf 	bl	8002e0c <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fe f8cb 	bl	8002e0c <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e1a8      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4b28      	ldr	r3, [pc, #160]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4925      	ldr	r1, [pc, #148]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	e015      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <HAL_RCC_OscConfig+0x244>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fe f8ae 	bl	8002e0c <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb4:	f7fe f8aa 	bl	8002e0c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e187      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d036      	beq.n	8004d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce6:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <HAL_RCC_OscConfig+0x248>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fe f88e 	bl	8002e0c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf4:	f7fe f88a 	bl	8002e0c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e167      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x200>
 8004d12:	e01b      	b.n	8004d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <HAL_RCC_OscConfig+0x248>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1a:	f7fe f877 	bl	8002e0c <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	e00e      	b.n	8004d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d22:	f7fe f873 	bl	8002e0c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d907      	bls.n	8004d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e150      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	42470000 	.word	0x42470000
 8004d3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d40:	4b88      	ldr	r3, [pc, #544]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ea      	bne.n	8004d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8097 	beq.w	8004e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5e:	4b81      	ldr	r3, [pc, #516]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10f      	bne.n	8004d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	4a7c      	ldr	r2, [pc, #496]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b77      	ldr	r3, [pc, #476]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d118      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d96:	4b74      	ldr	r3, [pc, #464]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a73      	ldr	r2, [pc, #460]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da2:	f7fe f833 	bl	8002e0c <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004daa:	f7fe f82f 	bl	8002e0c <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e10c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d106      	bne.n	8004dde <HAL_RCC_OscConfig+0x2ea>
 8004dd0:	4b64      	ldr	r3, [pc, #400]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd4:	4a63      	ldr	r2, [pc, #396]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ddc:	e01c      	b.n	8004e18 <HAL_RCC_OscConfig+0x324>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x30c>
 8004de6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a5e      	ldr	r2, [pc, #376]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004dec:	f043 0304 	orr.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0x324>
 8004e00:	4b58      	ldr	r3, [pc, #352]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e04:	4a57      	ldr	r2, [pc, #348]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0c:	4b55      	ldr	r3, [pc, #340]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a54      	ldr	r2, [pc, #336]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0304 	bic.w	r3, r3, #4
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fd fff4 	bl	8002e0c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fd fff0 	bl	8002e0c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0cb      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	4b49      	ldr	r3, [pc, #292]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0ee      	beq.n	8004e28 <HAL_RCC_OscConfig+0x334>
 8004e4a:	e014      	b.n	8004e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fd ffde 	bl	8002e0c <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fd ffda 	bl	8002e0c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0b5      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ee      	bne.n	8004e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b39      	ldr	r3, [pc, #228]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	4a38      	ldr	r2, [pc, #224]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80a1 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e92:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d05c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d141      	bne.n	8004f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea6:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_RCC_OscConfig+0x478>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fd ffae 	bl	8002e0c <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd ffaa 	bl	8002e0c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e087      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	491b      	ldr	r1, [pc, #108]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <HAL_RCC_OscConfig+0x478>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fd ff83 	bl	8002e0c <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fd ff7f 	bl	8002e0c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e05c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1c:	4b11      	ldr	r3, [pc, #68]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x416>
 8004f28:	e054      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <HAL_RCC_OscConfig+0x478>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd ff6c 	bl	8002e0c <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fd ff68 	bl	8002e0c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e045      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x444>
 8004f56:	e03d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e038      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f70:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <HAL_RCC_OscConfig+0x4ec>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d028      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d121      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d11a      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0cc      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b68      	ldr	r3, [pc, #416]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d90c      	bls.n	8005020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b65      	ldr	r3, [pc, #404]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b63      	ldr	r3, [pc, #396]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0b8      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d020      	beq.n	800506e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005038:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a58      	ldr	r2, [pc, #352]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005050:	4b53      	ldr	r3, [pc, #332]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a52      	ldr	r2, [pc, #328]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800505a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505c:	4b50      	ldr	r3, [pc, #320]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	494d      	ldr	r1, [pc, #308]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d044      	beq.n	8005104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	4b47      	ldr	r3, [pc, #284]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d119      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e07f      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d003      	beq.n	80050a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a2:	4b3f      	ldr	r3, [pc, #252]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e06f      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b2:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e067      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c2:	4b37      	ldr	r3, [pc, #220]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f023 0203 	bic.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4934      	ldr	r1, [pc, #208]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d4:	f7fd fe9a 	bl	8002e0c <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050dc:	f7fd fe96 	bl	8002e0c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e04f      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	4b2b      	ldr	r3, [pc, #172]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 020c 	and.w	r2, r3, #12
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	429a      	cmp	r2, r3
 8005102:	d1eb      	bne.n	80050dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005104:	4b25      	ldr	r3, [pc, #148]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d20c      	bcs.n	800512c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005112:	4b22      	ldr	r3, [pc, #136]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	4b20      	ldr	r3, [pc, #128]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d001      	beq.n	800512c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e032      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005138:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4916      	ldr	r1, [pc, #88]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005156:	4b12      	ldr	r3, [pc, #72]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	490e      	ldr	r1, [pc, #56]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800516a:	f000 f821 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800516e:	4602      	mov	r2, r0
 8005170:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	490a      	ldr	r1, [pc, #40]	@ (80051a4 <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	5ccb      	ldrb	r3, [r1, r3]
 800517e:	fa22 f303 	lsr.w	r3, r2, r3
 8005182:	4a09      	ldr	r2, [pc, #36]	@ (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fdfa 	bl	8002d84 <HAL_InitTick>

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40023c00 	.word	0x40023c00
 80051a0:	40023800 	.word	0x40023800
 80051a4:	0800a32c 	.word	0x0800a32c
 80051a8:	20000050 	.word	0x20000050
 80051ac:	20000054 	.word	0x20000054

080051b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b4:	b094      	sub	sp, #80	@ 0x50
 80051b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c8:	4b79      	ldr	r3, [pc, #484]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d00d      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x40>
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	f200 80e1 	bhi.w	800539c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0x34>
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0x3a>
 80051e2:	e0db      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e4:	4b73      	ldr	r3, [pc, #460]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051e8:	e0db      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ea:	4b73      	ldr	r3, [pc, #460]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051ee:	e0d8      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f0:	4b6f      	ldr	r3, [pc, #444]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fa:	4b6d      	ldr	r3, [pc, #436]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d063      	beq.n	80052ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005206:	4b6a      	ldr	r3, [pc, #424]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	2200      	movs	r2, #0
 800520e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005210:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
 800521e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	f04f 0000 	mov.w	r0, #0
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	0159      	lsls	r1, r3, #5
 8005230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005234:	0150      	lsls	r0, r2, #5
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4621      	mov	r1, r4
 800523c:	1a51      	subs	r1, r2, r1
 800523e:	6139      	str	r1, [r7, #16]
 8005240:	4629      	mov	r1, r5
 8005242:	eb63 0301 	sbc.w	r3, r3, r1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005254:	4659      	mov	r1, fp
 8005256:	018b      	lsls	r3, r1, #6
 8005258:	4651      	mov	r1, sl
 800525a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800525e:	4651      	mov	r1, sl
 8005260:	018a      	lsls	r2, r1, #6
 8005262:	4651      	mov	r1, sl
 8005264:	ebb2 0801 	subs.w	r8, r2, r1
 8005268:	4659      	mov	r1, fp
 800526a:	eb63 0901 	sbc.w	r9, r3, r1
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800527e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005282:	4690      	mov	r8, r2
 8005284:	4699      	mov	r9, r3
 8005286:	4623      	mov	r3, r4
 8005288:	eb18 0303 	adds.w	r3, r8, r3
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	462b      	mov	r3, r5
 8005290:	eb49 0303 	adc.w	r3, r9, r3
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052a2:	4629      	mov	r1, r5
 80052a4:	024b      	lsls	r3, r1, #9
 80052a6:	4621      	mov	r1, r4
 80052a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052ac:	4621      	mov	r1, r4
 80052ae:	024a      	lsls	r2, r1, #9
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b6:	2200      	movs	r2, #0
 80052b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052c0:	f7fb fcac 	bl	8000c1c <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4613      	mov	r3, r2
 80052ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052cc:	e058      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	2200      	movs	r2, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	4611      	mov	r1, r2
 80052da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	0159      	lsls	r1, r3, #5
 80052f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fa:	0150      	lsls	r0, r2, #5
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4641      	mov	r1, r8
 8005302:	ebb2 0a01 	subs.w	sl, r2, r1
 8005306:	4649      	mov	r1, r9
 8005308:	eb63 0b01 	sbc.w	fp, r3, r1
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800531c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005320:	ebb2 040a 	subs.w	r4, r2, sl
 8005324:	eb63 050b 	sbc.w	r5, r3, fp
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	00eb      	lsls	r3, r5, #3
 8005332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005336:	00e2      	lsls	r2, r4, #3
 8005338:	4614      	mov	r4, r2
 800533a:	461d      	mov	r5, r3
 800533c:	4643      	mov	r3, r8
 800533e:	18e3      	adds	r3, r4, r3
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	464b      	mov	r3, r9
 8005344:	eb45 0303 	adc.w	r3, r5, r3
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005356:	4629      	mov	r1, r5
 8005358:	028b      	lsls	r3, r1, #10
 800535a:	4621      	mov	r1, r4
 800535c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005360:	4621      	mov	r1, r4
 8005362:	028a      	lsls	r2, r1, #10
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536a:	2200      	movs	r2, #0
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	61fa      	str	r2, [r7, #28]
 8005370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005374:	f7fb fc52 	bl	8000c1c <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4613      	mov	r3, r2
 800537e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	3301      	adds	r3, #1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800539a:	e002      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3750      	adds	r7, #80	@ 0x50
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	007a1200 	.word	0x007a1200

080053bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000050 	.word	0x20000050

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053d8:	f7ff fff0 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0a9b      	lsrs	r3, r3, #10
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4903      	ldr	r1, [pc, #12]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40023800 	.word	0x40023800
 80053f8:	0800a33c 	.word	0x0800a33c

080053fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005400:	f7ff ffdc 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0b5b      	lsrs	r3, r3, #13
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800a33c 	.word	0x0800a33c

08005424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e041      	b.n	80054ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fd f982 	bl	8002754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f000 fd70 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d001      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e044      	b.n	8005566 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005574 <HAL_TIM_Base_Start_IT+0xb0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x6c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005506:	d013      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x6c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <HAL_TIM_Base_Start_IT+0xb4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x6c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a19      	ldr	r2, [pc, #100]	@ (800557c <HAL_TIM_Base_Start_IT+0xb8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x6c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <HAL_TIM_Base_Start_IT+0xbc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x6c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a16      	ldr	r2, [pc, #88]	@ (8005584 <HAL_TIM_Base_Start_IT+0xc0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d111      	bne.n	8005554 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b06      	cmp	r3, #6
 8005540:	d010      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	e007      	b.n	8005564 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000

08005588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e041      	b.n	800561e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f839 	bl	8005626 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f000 fcbe 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_TIM_PWM_Start+0x24>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e022      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d109      	bne.n	800567a <HAL_TIM_PWM_Start+0x3e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	e015      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d109      	bne.n	8005694 <HAL_TIM_PWM_Start+0x58>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e008      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e068      	b.n	8005780 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0x82>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056bc:	e013      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0x92>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056cc:	e00b      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	e003      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2201      	movs	r2, #1
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fed6 	bl	80064a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a23      	ldr	r2, [pc, #140]	@ (8005788 <HAL_TIM_PWM_Start+0x14c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d107      	bne.n	800570e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <HAL_TIM_PWM_Start+0x14c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_TIM_PWM_Start+0x10e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005720:	d013      	beq.n	800574a <HAL_TIM_PWM_Start+0x10e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a19      	ldr	r2, [pc, #100]	@ (800578c <HAL_TIM_PWM_Start+0x150>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00e      	beq.n	800574a <HAL_TIM_PWM_Start+0x10e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a17      	ldr	r2, [pc, #92]	@ (8005790 <HAL_TIM_PWM_Start+0x154>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_TIM_PWM_Start+0x10e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a16      	ldr	r2, [pc, #88]	@ (8005794 <HAL_TIM_PWM_Start+0x158>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_TIM_PWM_Start+0x10e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <HAL_TIM_PWM_Start+0x15c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d111      	bne.n	800576e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b06      	cmp	r3, #6
 800575a:	d010      	beq.n	800577e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	e007      	b.n	800577e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40014000 	.word	0x40014000

0800579c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e097      	b.n	80058e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fc fed7 	bl	8002578 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 fba9 	bl	8005f48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4313      	orrs	r3, r2
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800583c:	f023 030c 	bic.w	r3, r3, #12
 8005840:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005848:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	4313      	orrs	r3, r2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	011a      	lsls	r2, r3, #4
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	031b      	lsls	r3, r3, #12
 800586c:	4313      	orrs	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	4313      	orrs	r3, r2
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005900:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005908:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005910:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d110      	bne.n	800593a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d102      	bne.n	8005924 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800591e:	7b7b      	ldrb	r3, [r7, #13]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d001      	beq.n	8005928 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e069      	b.n	80059fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005938:	e031      	b.n	800599e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d110      	bne.n	8005962 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d102      	bne.n	800594c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005946:	7b3b      	ldrb	r3, [r7, #12]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d001      	beq.n	8005950 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e055      	b.n	80059fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005960:	e01d      	b.n	800599e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d108      	bne.n	800597a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800596e:	7b7b      	ldrb	r3, [r7, #13]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d102      	bne.n	800597a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005974:	7b3b      	ldrb	r3, [r7, #12]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e03e      	b.n	80059fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_TIM_Encoder_Start+0xc4>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d008      	beq.n	80059bc <HAL_TIM_Encoder_Start+0xd4>
 80059aa:	e00f      	b.n	80059cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fd73 	bl	80064a0 <TIM_CCxChannelCmd>
      break;
 80059ba:	e016      	b.n	80059ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2201      	movs	r2, #1
 80059c2:	2104      	movs	r1, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fd6b 	bl	80064a0 <TIM_CCxChannelCmd>
      break;
 80059ca:	e00e      	b.n	80059ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd63 	bl	80064a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	2104      	movs	r1, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fd5c 	bl	80064a0 <TIM_CCxChannelCmd>
      break;
 80059e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0201 	orr.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d020      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01b      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0202 	mvn.w	r2, #2
 8005a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa5b 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa4d 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa5e 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d020      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0204 	mvn.w	r2, #4
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa35 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa27 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa38 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d020      	beq.n	8005b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0208 	mvn.w	r2, #8
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa0f 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa01 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fa12 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d020      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0210 	mvn.w	r2, #16
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2208      	movs	r2, #8
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f9e9 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9db 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f9ec 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0201 	mvn.w	r2, #1
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fb fa22 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00c      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd24 	bl	80065dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9bd 	bl	8005f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0220 	mvn.w	r2, #32
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fcf6 	bl	80065c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e0ae      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	f200 809f 	bhi.w	8005d50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c12:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c4d 	.word	0x08005c4d
 8005c1c:	08005d51 	.word	0x08005d51
 8005c20:	08005d51 	.word	0x08005d51
 8005c24:	08005d51 	.word	0x08005d51
 8005c28:	08005c8d 	.word	0x08005c8d
 8005c2c:	08005d51 	.word	0x08005d51
 8005c30:	08005d51 	.word	0x08005d51
 8005c34:	08005d51 	.word	0x08005d51
 8005c38:	08005ccf 	.word	0x08005ccf
 8005c3c:	08005d51 	.word	0x08005d51
 8005c40:	08005d51 	.word	0x08005d51
 8005c44:	08005d51 	.word	0x08005d51
 8005c48:	08005d0f 	.word	0x08005d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f9fe 	bl	8006054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0208 	orr.w	r2, r2, #8
 8005c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	619a      	str	r2, [r3, #24]
      break;
 8005c8a:	e064      	b.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fa44 	bl	8006120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]
      break;
 8005ccc:	e043      	b.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fa8f 	bl	80061f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0208 	orr.w	r2, r2, #8
 8005ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0204 	bic.w	r2, r2, #4
 8005cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69d9      	ldr	r1, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	61da      	str	r2, [r3, #28]
      break;
 8005d0c:	e023      	b.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fad9 	bl	80062cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	021a      	lsls	r2, r3, #8
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	61da      	str	r2, [r3, #28]
      break;
 8005d4e:	e002      	b.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
      break;
 8005d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_ConfigClockSource+0x1c>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e0b4      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x186>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dbc:	d03e      	beq.n	8005e3c <HAL_TIM_ConfigClockSource+0xd4>
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc2:	f200 8087 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dca:	f000 8086 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x172>
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd2:	d87f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b70      	cmp	r3, #112	@ 0x70
 8005dd6:	d01a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0xa6>
 8005dd8:	2b70      	cmp	r3, #112	@ 0x70
 8005dda:	d87b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ddc:	2b60      	cmp	r3, #96	@ 0x60
 8005dde:	d050      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x11a>
 8005de0:	2b60      	cmp	r3, #96	@ 0x60
 8005de2:	d877      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de4:	2b50      	cmp	r3, #80	@ 0x50
 8005de6:	d03c      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0xfa>
 8005de8:	2b50      	cmp	r3, #80	@ 0x50
 8005dea:	d873      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d058      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d86f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b30      	cmp	r3, #48	@ 0x30
 8005df6:	d064      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005df8:	2b30      	cmp	r3, #48	@ 0x30
 8005dfa:	d86b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d060      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d867      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05c      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d05a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e0c:	e062      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	f000 fb1f 	bl	8006460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	609a      	str	r2, [r3, #8]
      break;
 8005e3a:	e04f      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e4c:	f000 fb08 	bl	8006460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e5e:	609a      	str	r2, [r3, #8]
      break;
 8005e60:	e03c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f000 fa7c 	bl	800636c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2150      	movs	r1, #80	@ 0x50
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fad5 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 8005e80:	e02c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 fa9b 	bl	80063ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2160      	movs	r1, #96	@ 0x60
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fac5 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e01c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fa5c 	bl	800636c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2140      	movs	r1, #64	@ 0x40
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fab5 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e00c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f000 faac 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 8005ed2:	e003      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a37      	ldr	r2, [pc, #220]	@ (8006038 <TIM_Base_SetConfig+0xf0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_Base_SetConfig+0x38>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f66:	d00b      	beq.n	8005f80 <TIM_Base_SetConfig+0x38>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a34      	ldr	r2, [pc, #208]	@ (800603c <TIM_Base_SetConfig+0xf4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_Base_SetConfig+0x38>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a33      	ldr	r2, [pc, #204]	@ (8006040 <TIM_Base_SetConfig+0xf8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_Base_SetConfig+0x38>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a32      	ldr	r2, [pc, #200]	@ (8006044 <TIM_Base_SetConfig+0xfc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d108      	bne.n	8005f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a28      	ldr	r2, [pc, #160]	@ (8006038 <TIM_Base_SetConfig+0xf0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01b      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa0:	d017      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a25      	ldr	r2, [pc, #148]	@ (800603c <TIM_Base_SetConfig+0xf4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a24      	ldr	r2, [pc, #144]	@ (8006040 <TIM_Base_SetConfig+0xf8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a23      	ldr	r2, [pc, #140]	@ (8006044 <TIM_Base_SetConfig+0xfc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a22      	ldr	r2, [pc, #136]	@ (8006048 <TIM_Base_SetConfig+0x100>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a21      	ldr	r2, [pc, #132]	@ (800604c <TIM_Base_SetConfig+0x104>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_Base_SetConfig+0x8a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a20      	ldr	r2, [pc, #128]	@ (8006050 <TIM_Base_SetConfig+0x108>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a0c      	ldr	r2, [pc, #48]	@ (8006038 <TIM_Base_SetConfig+0xf0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d103      	bne.n	8006012 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f043 0204 	orr.w	r2, r3, #4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	601a      	str	r2, [r3, #0]
}
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800

08006054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f023 0201 	bic.w	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 0302 	bic.w	r3, r3, #2
 800609c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a1c      	ldr	r2, [pc, #112]	@ (800611c <TIM_OC1_SetConfig+0xc8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10c      	bne.n	80060ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0308 	bic.w	r3, r3, #8
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a13      	ldr	r2, [pc, #76]	@ (800611c <TIM_OC1_SetConfig+0xc8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d111      	bne.n	80060f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40010000 	.word	0x40010000

08006120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f023 0210 	bic.w	r2, r3, #16
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0320 	bic.w	r3, r3, #32
 800616a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1e      	ldr	r2, [pc, #120]	@ (80061f4 <TIM_OC2_SetConfig+0xd4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10d      	bne.n	800619c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800619a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <TIM_OC2_SetConfig+0xd4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d113      	bne.n	80061cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000

080061f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <TIM_OC3_SetConfig+0xd0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d10d      	bne.n	8006272 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800625c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a14      	ldr	r2, [pc, #80]	@ (80062c8 <TIM_OC3_SetConfig+0xd0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d113      	bne.n	80062a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000

080062cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	031b      	lsls	r3, r3, #12
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a10      	ldr	r2, [pc, #64]	@ (8006368 <TIM_OC4_SetConfig+0x9c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d109      	bne.n	8006340 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	019b      	lsls	r3, r3, #6
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000

0800636c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 030a 	bic.w	r3, r3, #10
 80063a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b087      	sub	sp, #28
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f023 0210 	bic.w	r2, r3, #16
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	031b      	lsls	r3, r3, #12
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	f043 0307 	orr.w	r3, r3, #7
 800644c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800647a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	021a      	lsls	r2, r3, #8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	431a      	orrs	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	609a      	str	r2, [r3, #8]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2201      	movs	r2, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	43db      	mvns	r3, r3
 80064c2:	401a      	ands	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	431a      	orrs	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006500:	2302      	movs	r3, #2
 8006502:	e050      	b.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1c      	ldr	r2, [pc, #112]	@ (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d018      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006550:	d013      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00e      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a13      	ldr	r2, [pc, #76]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d10c      	bne.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	4313      	orrs	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40000c00 	.word	0x40000c00
 80065c4:	40014000 	.word	0x40014000

080065c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e042      	b.n	8006688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc f990 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2224      	movs	r2, #36	@ 0x24
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fb8b 	bl	8006d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	@ 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d162      	bne.n	8006770 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_UART_Transmit_DMA+0x26>
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e05b      	b.n	8006772 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	88fa      	ldrh	r2, [r7, #6]
 80066ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2221      	movs	r2, #33	@ 0x21
 80066d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066de:	4a27      	ldr	r2, [pc, #156]	@ (800677c <HAL_UART_Transmit_DMA+0xec>)
 80066e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	4a26      	ldr	r2, [pc, #152]	@ (8006780 <HAL_UART_Transmit_DMA+0xf0>)
 80066e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ee:	4a25      	ldr	r2, [pc, #148]	@ (8006784 <HAL_UART_Transmit_DMA+0xf4>)
 80066f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	2200      	movs	r2, #0
 80066f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066fa:	f107 0308 	add.w	r3, r7, #8
 80066fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	6819      	ldr	r1, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3304      	adds	r3, #4
 800670e:	461a      	mov	r2, r3
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	f7fc fd6b 	bl	80031ec <HAL_DMA_Start_IT>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2210      	movs	r2, #16
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e021      	b.n	8006772 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006736:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3314      	adds	r3, #20
 800673e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	617b      	str	r3, [r7, #20]
   return(result);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3314      	adds	r3, #20
 8006756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006758:	627a      	str	r2, [r7, #36]	@ 0x24
 800675a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6a39      	ldr	r1, [r7, #32]
 800675e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	61fb      	str	r3, [r7, #28]
   return(result);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e5      	bne.n	8006738 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3730      	adds	r7, #48	@ 0x30
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	0800683b 	.word	0x0800683b
 8006780:	080068d5 	.word	0x080068d5
 8006784:	08006a59 	.word	0x08006a59

08006788 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d112      	bne.n	80067c8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_UART_Receive_DMA+0x26>
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e00b      	b.n	80067ca <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f994 	bl	8006aec <UART_Start_Receive_DMA>
 80067c4:	4603      	mov	r3, r0
 80067c6:	e000      	b.n	80067ca <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b090      	sub	sp, #64	@ 0x40
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d137      	bne.n	80068c6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006858:	2200      	movs	r2, #0
 800685a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800685c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	623b      	str	r3, [r7, #32]
   return(result);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006872:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3314      	adds	r3, #20
 800687a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800687c:	633a      	str	r2, [r7, #48]	@ 0x30
 800687e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e5      	bne.n	800685c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	69b9      	ldr	r1, [r7, #24]
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	617b      	str	r3, [r7, #20]
   return(result);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068c4:	e002      	b.n	80068cc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068c8:	f7fa fb88 	bl	8000fdc <HAL_UART_TxCpltCallback>
}
 80068cc:	bf00      	nop
 80068ce:	3740      	adds	r7, #64	@ 0x40
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff ff75 	bl	80067d2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b09c      	sub	sp, #112	@ 0x70
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d172      	bne.n	80069f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800690c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800690e:	2200      	movs	r2, #0
 8006910:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800692a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006932:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006934:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006938:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	667b      	str	r3, [r7, #100]	@ 0x64
 800695e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006966:	647a      	str	r2, [r7, #68]	@ 0x44
 8006968:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800696c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e5      	bne.n	8006946 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	623b      	str	r3, [r7, #32]
   return(result);
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006990:	663b      	str	r3, [r7, #96]	@ 0x60
 8006992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3314      	adds	r3, #20
 8006998:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800699a:	633a      	str	r2, [r7, #48]	@ 0x30
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d119      	bne.n	80069f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f023 0310 	bic.w	r3, r3, #16
 80069d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80069de:	61fa      	str	r2, [r7, #28]
 80069e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	69b9      	ldr	r1, [r7, #24]
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	617b      	str	r3, [r7, #20]
   return(result);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069f4:	2200      	movs	r2, #0
 80069f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d106      	bne.n	8006a0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a04:	4619      	mov	r1, r3
 8006a06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a08:	f7ff ff0b 	bl	8006822 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a0c:	e002      	b.n	8006a14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a10:	f7ff fee9 	bl	80067e6 <HAL_UART_RxCpltCallback>
}
 8006a14:	bf00      	nop
 8006a16:	3770      	adds	r7, #112	@ 0x70
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d108      	bne.n	8006a4a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff feed 	bl	8006822 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a48:	e002      	b.n	8006a50 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff fed5 	bl	80067fa <HAL_UART_RxHalfCpltCallback>
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a74:	2b80      	cmp	r3, #128	@ 0x80
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b21      	cmp	r3, #33	@ 0x21
 8006a8a:	d108      	bne.n	8006a9e <UART_DMAError+0x46>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006a98:	68b8      	ldr	r0, [r7, #8]
 8006a9a:	f000 f8cd 	bl	8006c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa8:	2b40      	cmp	r3, #64	@ 0x40
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b22      	cmp	r3, #34	@ 0x22
 8006abe:	d108      	bne.n	8006ad2 <UART_DMAError+0x7a>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	f000 f8db 	bl	8006c88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad6:	f043 0210 	orr.w	r2, r3, #16
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ade:	68b8      	ldr	r0, [r7, #8]
 8006ae0:	f7ff fe95 	bl	800680e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b098      	sub	sp, #96	@ 0x60
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2222      	movs	r2, #34	@ 0x22
 8006b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	4a44      	ldr	r2, [pc, #272]	@ (8006c2c <UART_Start_Receive_DMA+0x140>)
 8006b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b20:	4a43      	ldr	r2, [pc, #268]	@ (8006c30 <UART_Start_Receive_DMA+0x144>)
 8006b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	4a42      	ldr	r2, [pc, #264]	@ (8006c34 <UART_Start_Receive_DMA+0x148>)
 8006b2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	2200      	movs	r2, #0
 8006b32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	f7fc fb4e 	bl	80031ec <HAL_DMA_Start_IT>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2210      	movs	r2, #16
 8006b5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e05d      	b.n	8006c24 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d019      	beq.n	8006bba <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ba6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bda:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006bdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006be0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c04:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3314      	adds	r3, #20
 8006c0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6a39      	ldr	r1, [r7, #32]
 8006c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3760      	adds	r7, #96	@ 0x60
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	080068f1 	.word	0x080068f1
 8006c30:	08006a1d 	.word	0x08006a1d
 8006c34:	08006a59 	.word	0x08006a59

08006c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b089      	sub	sp, #36	@ 0x24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	61ba      	str	r2, [r7, #24]
 8006c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6979      	ldr	r1, [r7, #20]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006c7c:	bf00      	nop
 8006c7e:	3724      	adds	r7, #36	@ 0x24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b095      	sub	sp, #84	@ 0x54
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ce4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d119      	bne.n	8006d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d20:	61ba      	str	r2, [r7, #24]
 8006d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6979      	ldr	r1, [r7, #20]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d42:	bf00      	nop
 8006d44:	3754      	adds	r7, #84	@ 0x54
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d54:	b0c0      	sub	sp, #256	@ 0x100
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6c:	68d9      	ldr	r1, [r3, #12]
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	ea40 0301 	orr.w	r3, r0, r1
 8006d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006da8:	f021 010c 	bic.w	r1, r1, #12
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006db6:	430b      	orrs	r3, r1
 8006db8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dca:	6999      	ldr	r1, [r3, #24]
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	ea40 0301 	orr.w	r3, r0, r1
 8006dd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b8f      	ldr	r3, [pc, #572]	@ (800701c <UART_SetConfig+0x2cc>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d005      	beq.n	8006df0 <UART_SetConfig+0xa0>
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b8d      	ldr	r3, [pc, #564]	@ (8007020 <UART_SetConfig+0x2d0>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d104      	bne.n	8006dfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006df0:	f7fe fb04 	bl	80053fc <HAL_RCC_GetPCLK2Freq>
 8006df4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006df8:	e003      	b.n	8006e02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dfa:	f7fe faeb 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8006dfe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0c:	f040 810c 	bne.w	8007028 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	1891      	adds	r1, r2, r2
 8006e28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e2a:	415b      	adcs	r3, r3
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e32:	4621      	mov	r1, r4
 8006e34:	eb12 0801 	adds.w	r8, r2, r1
 8006e38:	4629      	mov	r1, r5
 8006e3a:	eb43 0901 	adc.w	r9, r3, r1
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e52:	4690      	mov	r8, r2
 8006e54:	4699      	mov	r9, r3
 8006e56:	4623      	mov	r3, r4
 8006e58:	eb18 0303 	adds.w	r3, r8, r3
 8006e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e60:	462b      	mov	r3, r5
 8006e62:	eb49 0303 	adc.w	r3, r9, r3
 8006e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e7e:	460b      	mov	r3, r1
 8006e80:	18db      	adds	r3, r3, r3
 8006e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e84:	4613      	mov	r3, r2
 8006e86:	eb42 0303 	adc.w	r3, r2, r3
 8006e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e94:	f7f9 fec2 	bl	8000c1c <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4b61      	ldr	r3, [pc, #388]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	011c      	lsls	r4, r3, #4
 8006ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006eb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	1891      	adds	r1, r2, r2
 8006ebe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ec0:	415b      	adcs	r3, r3
 8006ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ec8:	4641      	mov	r1, r8
 8006eca:	eb12 0a01 	adds.w	sl, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ee0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ee4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee8:	4692      	mov	sl, r2
 8006eea:	469b      	mov	fp, r3
 8006eec:	4643      	mov	r3, r8
 8006eee:	eb1a 0303 	adds.w	r3, sl, r3
 8006ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	eb4b 0303 	adc.w	r3, fp, r3
 8006efc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f14:	460b      	mov	r3, r1
 8006f16:	18db      	adds	r3, r3, r3
 8006f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	eb42 0303 	adc.w	r3, r2, r3
 8006f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f2a:	f7f9 fe77 	bl	8000c1c <__aeabi_uldivmod>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	4b3b      	ldr	r3, [pc, #236]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006f36:	fba3 2301 	umull	r2, r3, r3, r1
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	2264      	movs	r2, #100	@ 0x64
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	1acb      	subs	r3, r1, r3
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f4a:	4b36      	ldr	r3, [pc, #216]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f58:	441c      	add	r4, r3
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	1891      	adds	r1, r2, r2
 8006f72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f74:	415b      	adcs	r3, r3
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	1851      	adds	r1, r2, r1
 8006f80:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f82:	4649      	mov	r1, r9
 8006f84:	414b      	adcs	r3, r1
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f94:	4659      	mov	r1, fp
 8006f96:	00cb      	lsls	r3, r1, #3
 8006f98:	4651      	mov	r1, sl
 8006f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	00ca      	lsls	r2, r1, #3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4642      	mov	r2, r8
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	eb42 0303 	adc.w	r3, r2, r3
 8006fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	18db      	adds	r3, r3, r3
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	eb42 0303 	adc.w	r3, r2, r3
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fe2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006fe6:	f7f9 fe19 	bl	8000c1c <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	2164      	movs	r1, #100	@ 0x64
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	3332      	adds	r3, #50	@ 0x32
 8007002:	4a08      	ldr	r2, [pc, #32]	@ (8007024 <UART_SetConfig+0x2d4>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f003 0207 	and.w	r2, r3, #7
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4422      	add	r2, r4
 8007016:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007018:	e106      	b.n	8007228 <UART_SetConfig+0x4d8>
 800701a:	bf00      	nop
 800701c:	40011000 	.word	0x40011000
 8007020:	40011400 	.word	0x40011400
 8007024:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702c:	2200      	movs	r2, #0
 800702e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007032:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007036:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800703a:	4642      	mov	r2, r8
 800703c:	464b      	mov	r3, r9
 800703e:	1891      	adds	r1, r2, r2
 8007040:	6239      	str	r1, [r7, #32]
 8007042:	415b      	adcs	r3, r3
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
 8007046:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800704a:	4641      	mov	r1, r8
 800704c:	1854      	adds	r4, r2, r1
 800704e:	4649      	mov	r1, r9
 8007050:	eb43 0501 	adc.w	r5, r3, r1
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	00eb      	lsls	r3, r5, #3
 800705e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007062:	00e2      	lsls	r2, r4, #3
 8007064:	4614      	mov	r4, r2
 8007066:	461d      	mov	r5, r3
 8007068:	4643      	mov	r3, r8
 800706a:	18e3      	adds	r3, r4, r3
 800706c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007070:	464b      	mov	r3, r9
 8007072:	eb45 0303 	adc.w	r3, r5, r3
 8007076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007096:	4629      	mov	r1, r5
 8007098:	008b      	lsls	r3, r1, #2
 800709a:	4621      	mov	r1, r4
 800709c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a0:	4621      	mov	r1, r4
 80070a2:	008a      	lsls	r2, r1, #2
 80070a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070a8:	f7f9 fdb8 	bl	8000c1c <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4b60      	ldr	r3, [pc, #384]	@ (8007234 <UART_SetConfig+0x4e4>)
 80070b2:	fba3 2302 	umull	r2, r3, r3, r2
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	011c      	lsls	r4, r3, #4
 80070ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	1891      	adds	r1, r2, r2
 80070d2:	61b9      	str	r1, [r7, #24]
 80070d4:	415b      	adcs	r3, r3
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070dc:	4641      	mov	r1, r8
 80070de:	1851      	adds	r1, r2, r1
 80070e0:	6139      	str	r1, [r7, #16]
 80070e2:	4649      	mov	r1, r9
 80070e4:	414b      	adcs	r3, r1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070f4:	4659      	mov	r1, fp
 80070f6:	00cb      	lsls	r3, r1, #3
 80070f8:	4651      	mov	r1, sl
 80070fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fe:	4651      	mov	r1, sl
 8007100:	00ca      	lsls	r2, r1, #3
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	4603      	mov	r3, r0
 8007108:	4642      	mov	r2, r8
 800710a:	189b      	adds	r3, r3, r2
 800710c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007110:	464b      	mov	r3, r9
 8007112:	460a      	mov	r2, r1
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007126:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007134:	4649      	mov	r1, r9
 8007136:	008b      	lsls	r3, r1, #2
 8007138:	4641      	mov	r1, r8
 800713a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800713e:	4641      	mov	r1, r8
 8007140:	008a      	lsls	r2, r1, #2
 8007142:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007146:	f7f9 fd69 	bl	8000c1c <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4611      	mov	r1, r2
 8007150:	4b38      	ldr	r3, [pc, #224]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007152:	fba3 2301 	umull	r2, r3, r3, r1
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	2264      	movs	r2, #100	@ 0x64
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	1acb      	subs	r3, r1, r3
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	3332      	adds	r3, #50	@ 0x32
 8007164:	4a33      	ldr	r2, [pc, #204]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007170:	441c      	add	r4, r3
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	673b      	str	r3, [r7, #112]	@ 0x70
 800717a:	677a      	str	r2, [r7, #116]	@ 0x74
 800717c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007180:	4642      	mov	r2, r8
 8007182:	464b      	mov	r3, r9
 8007184:	1891      	adds	r1, r2, r2
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	415b      	adcs	r3, r3
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007190:	4641      	mov	r1, r8
 8007192:	1851      	adds	r1, r2, r1
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	4649      	mov	r1, r9
 8007198:	414b      	adcs	r3, r1
 800719a:	607b      	str	r3, [r7, #4]
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071a8:	4659      	mov	r1, fp
 80071aa:	00cb      	lsls	r3, r1, #3
 80071ac:	4651      	mov	r1, sl
 80071ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b2:	4651      	mov	r1, sl
 80071b4:	00ca      	lsls	r2, r1, #3
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	4642      	mov	r2, r8
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071c2:	464b      	mov	r3, r9
 80071c4:	460a      	mov	r2, r1
 80071c6:	eb42 0303 	adc.w	r3, r2, r3
 80071ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80071d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071e4:	4649      	mov	r1, r9
 80071e6:	008b      	lsls	r3, r1, #2
 80071e8:	4641      	mov	r1, r8
 80071ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ee:	4641      	mov	r1, r8
 80071f0:	008a      	lsls	r2, r1, #2
 80071f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071f6:	f7f9 fd11 	bl	8000c1c <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007200:	fba3 1302 	umull	r1, r3, r3, r2
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2164      	movs	r1, #100	@ 0x64
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	3332      	adds	r3, #50	@ 0x32
 8007212:	4a08      	ldr	r2, [pc, #32]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4422      	add	r2, r4
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800722e:	46bd      	mov	sp, r7
 8007230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007234:	51eb851f 	.word	0x51eb851f

08007238 <atof>:
 8007238:	2100      	movs	r1, #0
 800723a:	f000 be05 	b.w	8007e48 <strtod>

0800723e <sulp>:
 800723e:	b570      	push	{r4, r5, r6, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	460d      	mov	r5, r1
 8007244:	ec45 4b10 	vmov	d0, r4, r5
 8007248:	4616      	mov	r6, r2
 800724a:	f002 f81b 	bl	8009284 <__ulp>
 800724e:	ec51 0b10 	vmov	r0, r1, d0
 8007252:	b17e      	cbz	r6, 8007274 <sulp+0x36>
 8007254:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007258:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800725c:	2b00      	cmp	r3, #0
 800725e:	dd09      	ble.n	8007274 <sulp+0x36>
 8007260:	051b      	lsls	r3, r3, #20
 8007262:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007266:	2400      	movs	r4, #0
 8007268:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f9 f9ca 	bl	8000608 <__aeabi_dmul>
 8007274:	ec41 0b10 	vmov	d0, r0, r1
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	0000      	movs	r0, r0
 800727c:	0000      	movs	r0, r0
	...

08007280 <_strtod_l>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	b09f      	sub	sp, #124	@ 0x7c
 8007286:	460c      	mov	r4, r1
 8007288:	9217      	str	r2, [sp, #92]	@ 0x5c
 800728a:	2200      	movs	r2, #0
 800728c:	921a      	str	r2, [sp, #104]	@ 0x68
 800728e:	9005      	str	r0, [sp, #20]
 8007290:	f04f 0a00 	mov.w	sl, #0
 8007294:	f04f 0b00 	mov.w	fp, #0
 8007298:	460a      	mov	r2, r1
 800729a:	9219      	str	r2, [sp, #100]	@ 0x64
 800729c:	7811      	ldrb	r1, [r2, #0]
 800729e:	292b      	cmp	r1, #43	@ 0x2b
 80072a0:	d04a      	beq.n	8007338 <_strtod_l+0xb8>
 80072a2:	d838      	bhi.n	8007316 <_strtod_l+0x96>
 80072a4:	290d      	cmp	r1, #13
 80072a6:	d832      	bhi.n	800730e <_strtod_l+0x8e>
 80072a8:	2908      	cmp	r1, #8
 80072aa:	d832      	bhi.n	8007312 <_strtod_l+0x92>
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d03b      	beq.n	8007328 <_strtod_l+0xa8>
 80072b0:	2200      	movs	r2, #0
 80072b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80072b6:	782a      	ldrb	r2, [r5, #0]
 80072b8:	2a30      	cmp	r2, #48	@ 0x30
 80072ba:	f040 80b2 	bne.w	8007422 <_strtod_l+0x1a2>
 80072be:	786a      	ldrb	r2, [r5, #1]
 80072c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072c4:	2a58      	cmp	r2, #88	@ 0x58
 80072c6:	d16e      	bne.n	80073a6 <_strtod_l+0x126>
 80072c8:	9302      	str	r3, [sp, #8]
 80072ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4a8f      	ldr	r2, [pc, #572]	@ (8007510 <_strtod_l+0x290>)
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80072d8:	a919      	add	r1, sp, #100	@ 0x64
 80072da:	f001 f8cd 	bl	8008478 <__gethex>
 80072de:	f010 060f 	ands.w	r6, r0, #15
 80072e2:	4604      	mov	r4, r0
 80072e4:	d005      	beq.n	80072f2 <_strtod_l+0x72>
 80072e6:	2e06      	cmp	r6, #6
 80072e8:	d128      	bne.n	800733c <_strtod_l+0xbc>
 80072ea:	3501      	adds	r5, #1
 80072ec:	2300      	movs	r3, #0
 80072ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80072f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80072f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 858e 	bne.w	8007e16 <_strtod_l+0xb96>
 80072fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fc:	b1cb      	cbz	r3, 8007332 <_strtod_l+0xb2>
 80072fe:	4652      	mov	r2, sl
 8007300:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007304:	ec43 2b10 	vmov	d0, r2, r3
 8007308:	b01f      	add	sp, #124	@ 0x7c
 800730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730e:	2920      	cmp	r1, #32
 8007310:	d1ce      	bne.n	80072b0 <_strtod_l+0x30>
 8007312:	3201      	adds	r2, #1
 8007314:	e7c1      	b.n	800729a <_strtod_l+0x1a>
 8007316:	292d      	cmp	r1, #45	@ 0x2d
 8007318:	d1ca      	bne.n	80072b0 <_strtod_l+0x30>
 800731a:	2101      	movs	r1, #1
 800731c:	910e      	str	r1, [sp, #56]	@ 0x38
 800731e:	1c51      	adds	r1, r2, #1
 8007320:	9119      	str	r1, [sp, #100]	@ 0x64
 8007322:	7852      	ldrb	r2, [r2, #1]
 8007324:	2a00      	cmp	r2, #0
 8007326:	d1c5      	bne.n	80072b4 <_strtod_l+0x34>
 8007328:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800732a:	9419      	str	r4, [sp, #100]	@ 0x64
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 8570 	bne.w	8007e12 <_strtod_l+0xb92>
 8007332:	4652      	mov	r2, sl
 8007334:	465b      	mov	r3, fp
 8007336:	e7e5      	b.n	8007304 <_strtod_l+0x84>
 8007338:	2100      	movs	r1, #0
 800733a:	e7ef      	b.n	800731c <_strtod_l+0x9c>
 800733c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800733e:	b13a      	cbz	r2, 8007350 <_strtod_l+0xd0>
 8007340:	2135      	movs	r1, #53	@ 0x35
 8007342:	a81c      	add	r0, sp, #112	@ 0x70
 8007344:	f002 f898 	bl	8009478 <__copybits>
 8007348:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800734a:	9805      	ldr	r0, [sp, #20]
 800734c:	f001 fc6e 	bl	8008c2c <_Bfree>
 8007350:	3e01      	subs	r6, #1
 8007352:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007354:	2e04      	cmp	r6, #4
 8007356:	d806      	bhi.n	8007366 <_strtod_l+0xe6>
 8007358:	e8df f006 	tbb	[pc, r6]
 800735c:	201d0314 	.word	0x201d0314
 8007360:	14          	.byte	0x14
 8007361:	00          	.byte	0x00
 8007362:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007366:	05e1      	lsls	r1, r4, #23
 8007368:	bf48      	it	mi
 800736a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800736e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007372:	0d1b      	lsrs	r3, r3, #20
 8007374:	051b      	lsls	r3, r3, #20
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1bb      	bne.n	80072f2 <_strtod_l+0x72>
 800737a:	f000 ff69 	bl	8008250 <__errno>
 800737e:	2322      	movs	r3, #34	@ 0x22
 8007380:	6003      	str	r3, [r0, #0]
 8007382:	e7b6      	b.n	80072f2 <_strtod_l+0x72>
 8007384:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007388:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800738c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007390:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007394:	e7e7      	b.n	8007366 <_strtod_l+0xe6>
 8007396:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007518 <_strtod_l+0x298>
 800739a:	e7e4      	b.n	8007366 <_strtod_l+0xe6>
 800739c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80073a0:	f04f 3aff 	mov.w	sl, #4294967295
 80073a4:	e7df      	b.n	8007366 <_strtod_l+0xe6>
 80073a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b30      	cmp	r3, #48	@ 0x30
 80073b0:	d0f9      	beq.n	80073a6 <_strtod_l+0x126>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d09d      	beq.n	80072f2 <_strtod_l+0x72>
 80073b6:	2301      	movs	r3, #1
 80073b8:	2700      	movs	r7, #0
 80073ba:	9308      	str	r3, [sp, #32]
 80073bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073be:	930c      	str	r3, [sp, #48]	@ 0x30
 80073c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80073c2:	46b9      	mov	r9, r7
 80073c4:	220a      	movs	r2, #10
 80073c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80073c8:	7805      	ldrb	r5, [r0, #0]
 80073ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80073ce:	b2d9      	uxtb	r1, r3
 80073d0:	2909      	cmp	r1, #9
 80073d2:	d928      	bls.n	8007426 <_strtod_l+0x1a6>
 80073d4:	494f      	ldr	r1, [pc, #316]	@ (8007514 <_strtod_l+0x294>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	f000 fe85 	bl	80080e6 <strncmp>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d032      	beq.n	8007446 <_strtod_l+0x1c6>
 80073e0:	2000      	movs	r0, #0
 80073e2:	462a      	mov	r2, r5
 80073e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80073e6:	464d      	mov	r5, r9
 80073e8:	4603      	mov	r3, r0
 80073ea:	2a65      	cmp	r2, #101	@ 0x65
 80073ec:	d001      	beq.n	80073f2 <_strtod_l+0x172>
 80073ee:	2a45      	cmp	r2, #69	@ 0x45
 80073f0:	d114      	bne.n	800741c <_strtod_l+0x19c>
 80073f2:	b91d      	cbnz	r5, 80073fc <_strtod_l+0x17c>
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	4302      	orrs	r2, r0
 80073f8:	d096      	beq.n	8007328 <_strtod_l+0xa8>
 80073fa:	2500      	movs	r5, #0
 80073fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80073fe:	1c62      	adds	r2, r4, #1
 8007400:	9219      	str	r2, [sp, #100]	@ 0x64
 8007402:	7862      	ldrb	r2, [r4, #1]
 8007404:	2a2b      	cmp	r2, #43	@ 0x2b
 8007406:	d07a      	beq.n	80074fe <_strtod_l+0x27e>
 8007408:	2a2d      	cmp	r2, #45	@ 0x2d
 800740a:	d07e      	beq.n	800750a <_strtod_l+0x28a>
 800740c:	f04f 0c00 	mov.w	ip, #0
 8007410:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007414:	2909      	cmp	r1, #9
 8007416:	f240 8085 	bls.w	8007524 <_strtod_l+0x2a4>
 800741a:	9419      	str	r4, [sp, #100]	@ 0x64
 800741c:	f04f 0800 	mov.w	r8, #0
 8007420:	e0a5      	b.n	800756e <_strtod_l+0x2ee>
 8007422:	2300      	movs	r3, #0
 8007424:	e7c8      	b.n	80073b8 <_strtod_l+0x138>
 8007426:	f1b9 0f08 	cmp.w	r9, #8
 800742a:	bfd8      	it	le
 800742c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800742e:	f100 0001 	add.w	r0, r0, #1
 8007432:	bfda      	itte	le
 8007434:	fb02 3301 	mlale	r3, r2, r1, r3
 8007438:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800743a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800743e:	f109 0901 	add.w	r9, r9, #1
 8007442:	9019      	str	r0, [sp, #100]	@ 0x64
 8007444:	e7bf      	b.n	80073c6 <_strtod_l+0x146>
 8007446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	9219      	str	r2, [sp, #100]	@ 0x64
 800744c:	785a      	ldrb	r2, [r3, #1]
 800744e:	f1b9 0f00 	cmp.w	r9, #0
 8007452:	d03b      	beq.n	80074cc <_strtod_l+0x24c>
 8007454:	900a      	str	r0, [sp, #40]	@ 0x28
 8007456:	464d      	mov	r5, r9
 8007458:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800745c:	2b09      	cmp	r3, #9
 800745e:	d912      	bls.n	8007486 <_strtod_l+0x206>
 8007460:	2301      	movs	r3, #1
 8007462:	e7c2      	b.n	80073ea <_strtod_l+0x16a>
 8007464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	9219      	str	r2, [sp, #100]	@ 0x64
 800746a:	785a      	ldrb	r2, [r3, #1]
 800746c:	3001      	adds	r0, #1
 800746e:	2a30      	cmp	r2, #48	@ 0x30
 8007470:	d0f8      	beq.n	8007464 <_strtod_l+0x1e4>
 8007472:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007476:	2b08      	cmp	r3, #8
 8007478:	f200 84d2 	bhi.w	8007e20 <_strtod_l+0xba0>
 800747c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800747e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007480:	2000      	movs	r0, #0
 8007482:	930c      	str	r3, [sp, #48]	@ 0x30
 8007484:	4605      	mov	r5, r0
 8007486:	3a30      	subs	r2, #48	@ 0x30
 8007488:	f100 0301 	add.w	r3, r0, #1
 800748c:	d018      	beq.n	80074c0 <_strtod_l+0x240>
 800748e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007490:	4419      	add	r1, r3
 8007492:	910a      	str	r1, [sp, #40]	@ 0x28
 8007494:	462e      	mov	r6, r5
 8007496:	f04f 0e0a 	mov.w	lr, #10
 800749a:	1c71      	adds	r1, r6, #1
 800749c:	eba1 0c05 	sub.w	ip, r1, r5
 80074a0:	4563      	cmp	r3, ip
 80074a2:	dc15      	bgt.n	80074d0 <_strtod_l+0x250>
 80074a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80074a8:	182b      	adds	r3, r5, r0
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	f105 0501 	add.w	r5, r5, #1
 80074b0:	4405      	add	r5, r0
 80074b2:	dc1a      	bgt.n	80074ea <_strtod_l+0x26a>
 80074b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074b6:	230a      	movs	r3, #10
 80074b8:	fb03 2301 	mla	r3, r3, r1, r2
 80074bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074be:	2300      	movs	r3, #0
 80074c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074c2:	1c51      	adds	r1, r2, #1
 80074c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80074c6:	7852      	ldrb	r2, [r2, #1]
 80074c8:	4618      	mov	r0, r3
 80074ca:	e7c5      	b.n	8007458 <_strtod_l+0x1d8>
 80074cc:	4648      	mov	r0, r9
 80074ce:	e7ce      	b.n	800746e <_strtod_l+0x1ee>
 80074d0:	2e08      	cmp	r6, #8
 80074d2:	dc05      	bgt.n	80074e0 <_strtod_l+0x260>
 80074d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80074d6:	fb0e f606 	mul.w	r6, lr, r6
 80074da:	960b      	str	r6, [sp, #44]	@ 0x2c
 80074dc:	460e      	mov	r6, r1
 80074de:	e7dc      	b.n	800749a <_strtod_l+0x21a>
 80074e0:	2910      	cmp	r1, #16
 80074e2:	bfd8      	it	le
 80074e4:	fb0e f707 	mulle.w	r7, lr, r7
 80074e8:	e7f8      	b.n	80074dc <_strtod_l+0x25c>
 80074ea:	2b0f      	cmp	r3, #15
 80074ec:	bfdc      	itt	le
 80074ee:	230a      	movle	r3, #10
 80074f0:	fb03 2707 	mlale	r7, r3, r7, r2
 80074f4:	e7e3      	b.n	80074be <_strtod_l+0x23e>
 80074f6:	2300      	movs	r3, #0
 80074f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fa:	2301      	movs	r3, #1
 80074fc:	e77a      	b.n	80073f4 <_strtod_l+0x174>
 80074fe:	f04f 0c00 	mov.w	ip, #0
 8007502:	1ca2      	adds	r2, r4, #2
 8007504:	9219      	str	r2, [sp, #100]	@ 0x64
 8007506:	78a2      	ldrb	r2, [r4, #2]
 8007508:	e782      	b.n	8007410 <_strtod_l+0x190>
 800750a:	f04f 0c01 	mov.w	ip, #1
 800750e:	e7f8      	b.n	8007502 <_strtod_l+0x282>
 8007510:	0800a520 	.word	0x0800a520
 8007514:	0800a34c 	.word	0x0800a34c
 8007518:	7ff00000 	.word	0x7ff00000
 800751c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800751e:	1c51      	adds	r1, r2, #1
 8007520:	9119      	str	r1, [sp, #100]	@ 0x64
 8007522:	7852      	ldrb	r2, [r2, #1]
 8007524:	2a30      	cmp	r2, #48	@ 0x30
 8007526:	d0f9      	beq.n	800751c <_strtod_l+0x29c>
 8007528:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800752c:	2908      	cmp	r1, #8
 800752e:	f63f af75 	bhi.w	800741c <_strtod_l+0x19c>
 8007532:	3a30      	subs	r2, #48	@ 0x30
 8007534:	9209      	str	r2, [sp, #36]	@ 0x24
 8007536:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007538:	920f      	str	r2, [sp, #60]	@ 0x3c
 800753a:	f04f 080a 	mov.w	r8, #10
 800753e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007540:	1c56      	adds	r6, r2, #1
 8007542:	9619      	str	r6, [sp, #100]	@ 0x64
 8007544:	7852      	ldrb	r2, [r2, #1]
 8007546:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800754a:	f1be 0f09 	cmp.w	lr, #9
 800754e:	d939      	bls.n	80075c4 <_strtod_l+0x344>
 8007550:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007552:	1a76      	subs	r6, r6, r1
 8007554:	2e08      	cmp	r6, #8
 8007556:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800755a:	dc03      	bgt.n	8007564 <_strtod_l+0x2e4>
 800755c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800755e:	4588      	cmp	r8, r1
 8007560:	bfa8      	it	ge
 8007562:	4688      	movge	r8, r1
 8007564:	f1bc 0f00 	cmp.w	ip, #0
 8007568:	d001      	beq.n	800756e <_strtod_l+0x2ee>
 800756a:	f1c8 0800 	rsb	r8, r8, #0
 800756e:	2d00      	cmp	r5, #0
 8007570:	d14e      	bne.n	8007610 <_strtod_l+0x390>
 8007572:	9908      	ldr	r1, [sp, #32]
 8007574:	4308      	orrs	r0, r1
 8007576:	f47f aebc 	bne.w	80072f2 <_strtod_l+0x72>
 800757a:	2b00      	cmp	r3, #0
 800757c:	f47f aed4 	bne.w	8007328 <_strtod_l+0xa8>
 8007580:	2a69      	cmp	r2, #105	@ 0x69
 8007582:	d028      	beq.n	80075d6 <_strtod_l+0x356>
 8007584:	dc25      	bgt.n	80075d2 <_strtod_l+0x352>
 8007586:	2a49      	cmp	r2, #73	@ 0x49
 8007588:	d025      	beq.n	80075d6 <_strtod_l+0x356>
 800758a:	2a4e      	cmp	r2, #78	@ 0x4e
 800758c:	f47f aecc 	bne.w	8007328 <_strtod_l+0xa8>
 8007590:	499a      	ldr	r1, [pc, #616]	@ (80077fc <_strtod_l+0x57c>)
 8007592:	a819      	add	r0, sp, #100	@ 0x64
 8007594:	f001 f992 	bl	80088bc <__match>
 8007598:	2800      	cmp	r0, #0
 800759a:	f43f aec5 	beq.w	8007328 <_strtod_l+0xa8>
 800759e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b28      	cmp	r3, #40	@ 0x28
 80075a4:	d12e      	bne.n	8007604 <_strtod_l+0x384>
 80075a6:	4996      	ldr	r1, [pc, #600]	@ (8007800 <_strtod_l+0x580>)
 80075a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80075aa:	a819      	add	r0, sp, #100	@ 0x64
 80075ac:	f001 f99a 	bl	80088e4 <__hexnan>
 80075b0:	2805      	cmp	r0, #5
 80075b2:	d127      	bne.n	8007604 <_strtod_l+0x384>
 80075b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80075b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80075ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80075be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80075c2:	e696      	b.n	80072f2 <_strtod_l+0x72>
 80075c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075c6:	fb08 2101 	mla	r1, r8, r1, r2
 80075ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80075ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80075d0:	e7b5      	b.n	800753e <_strtod_l+0x2be>
 80075d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80075d4:	e7da      	b.n	800758c <_strtod_l+0x30c>
 80075d6:	498b      	ldr	r1, [pc, #556]	@ (8007804 <_strtod_l+0x584>)
 80075d8:	a819      	add	r0, sp, #100	@ 0x64
 80075da:	f001 f96f 	bl	80088bc <__match>
 80075de:	2800      	cmp	r0, #0
 80075e0:	f43f aea2 	beq.w	8007328 <_strtod_l+0xa8>
 80075e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075e6:	4988      	ldr	r1, [pc, #544]	@ (8007808 <_strtod_l+0x588>)
 80075e8:	3b01      	subs	r3, #1
 80075ea:	a819      	add	r0, sp, #100	@ 0x64
 80075ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80075ee:	f001 f965 	bl	80088bc <__match>
 80075f2:	b910      	cbnz	r0, 80075fa <_strtod_l+0x37a>
 80075f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075f6:	3301      	adds	r3, #1
 80075f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80075fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007818 <_strtod_l+0x598>
 80075fe:	f04f 0a00 	mov.w	sl, #0
 8007602:	e676      	b.n	80072f2 <_strtod_l+0x72>
 8007604:	4881      	ldr	r0, [pc, #516]	@ (800780c <_strtod_l+0x58c>)
 8007606:	f000 fe5f 	bl	80082c8 <nan>
 800760a:	ec5b ab10 	vmov	sl, fp, d0
 800760e:	e670      	b.n	80072f2 <_strtod_l+0x72>
 8007610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007612:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007614:	eba8 0303 	sub.w	r3, r8, r3
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	bf08      	it	eq
 800761e:	46a9      	moveq	r9, r5
 8007620:	2d10      	cmp	r5, #16
 8007622:	9309      	str	r3, [sp, #36]	@ 0x24
 8007624:	462c      	mov	r4, r5
 8007626:	bfa8      	it	ge
 8007628:	2410      	movge	r4, #16
 800762a:	f7f8 ff73 	bl	8000514 <__aeabi_ui2d>
 800762e:	2d09      	cmp	r5, #9
 8007630:	4682      	mov	sl, r0
 8007632:	468b      	mov	fp, r1
 8007634:	dc13      	bgt.n	800765e <_strtod_l+0x3de>
 8007636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	f43f ae5a 	beq.w	80072f2 <_strtod_l+0x72>
 800763e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007640:	dd78      	ble.n	8007734 <_strtod_l+0x4b4>
 8007642:	2b16      	cmp	r3, #22
 8007644:	dc5f      	bgt.n	8007706 <_strtod_l+0x486>
 8007646:	4972      	ldr	r1, [pc, #456]	@ (8007810 <_strtod_l+0x590>)
 8007648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800764c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007650:	4652      	mov	r2, sl
 8007652:	465b      	mov	r3, fp
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	4682      	mov	sl, r0
 800765a:	468b      	mov	fp, r1
 800765c:	e649      	b.n	80072f2 <_strtod_l+0x72>
 800765e:	4b6c      	ldr	r3, [pc, #432]	@ (8007810 <_strtod_l+0x590>)
 8007660:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007664:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007668:	f7f8 ffce 	bl	8000608 <__aeabi_dmul>
 800766c:	4682      	mov	sl, r0
 800766e:	4638      	mov	r0, r7
 8007670:	468b      	mov	fp, r1
 8007672:	f7f8 ff4f 	bl	8000514 <__aeabi_ui2d>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4650      	mov	r0, sl
 800767c:	4659      	mov	r1, fp
 800767e:	f7f8 fe0d 	bl	800029c <__adddf3>
 8007682:	2d0f      	cmp	r5, #15
 8007684:	4682      	mov	sl, r0
 8007686:	468b      	mov	fp, r1
 8007688:	ddd5      	ble.n	8007636 <_strtod_l+0x3b6>
 800768a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768c:	1b2c      	subs	r4, r5, r4
 800768e:	441c      	add	r4, r3
 8007690:	2c00      	cmp	r4, #0
 8007692:	f340 8093 	ble.w	80077bc <_strtod_l+0x53c>
 8007696:	f014 030f 	ands.w	r3, r4, #15
 800769a:	d00a      	beq.n	80076b2 <_strtod_l+0x432>
 800769c:	495c      	ldr	r1, [pc, #368]	@ (8007810 <_strtod_l+0x590>)
 800769e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076a2:	4652      	mov	r2, sl
 80076a4:	465b      	mov	r3, fp
 80076a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076aa:	f7f8 ffad 	bl	8000608 <__aeabi_dmul>
 80076ae:	4682      	mov	sl, r0
 80076b0:	468b      	mov	fp, r1
 80076b2:	f034 040f 	bics.w	r4, r4, #15
 80076b6:	d073      	beq.n	80077a0 <_strtod_l+0x520>
 80076b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80076bc:	dd49      	ble.n	8007752 <_strtod_l+0x4d2>
 80076be:	2400      	movs	r4, #0
 80076c0:	46a0      	mov	r8, r4
 80076c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80076c4:	46a1      	mov	r9, r4
 80076c6:	9a05      	ldr	r2, [sp, #20]
 80076c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007818 <_strtod_l+0x598>
 80076cc:	2322      	movs	r3, #34	@ 0x22
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	f04f 0a00 	mov.w	sl, #0
 80076d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f43f ae0b 	beq.w	80072f2 <_strtod_l+0x72>
 80076dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076de:	9805      	ldr	r0, [sp, #20]
 80076e0:	f001 faa4 	bl	8008c2c <_Bfree>
 80076e4:	9805      	ldr	r0, [sp, #20]
 80076e6:	4649      	mov	r1, r9
 80076e8:	f001 faa0 	bl	8008c2c <_Bfree>
 80076ec:	9805      	ldr	r0, [sp, #20]
 80076ee:	4641      	mov	r1, r8
 80076f0:	f001 fa9c 	bl	8008c2c <_Bfree>
 80076f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076f6:	9805      	ldr	r0, [sp, #20]
 80076f8:	f001 fa98 	bl	8008c2c <_Bfree>
 80076fc:	9805      	ldr	r0, [sp, #20]
 80076fe:	4621      	mov	r1, r4
 8007700:	f001 fa94 	bl	8008c2c <_Bfree>
 8007704:	e5f5      	b.n	80072f2 <_strtod_l+0x72>
 8007706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007708:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800770c:	4293      	cmp	r3, r2
 800770e:	dbbc      	blt.n	800768a <_strtod_l+0x40a>
 8007710:	4c3f      	ldr	r4, [pc, #252]	@ (8007810 <_strtod_l+0x590>)
 8007712:	f1c5 050f 	rsb	r5, r5, #15
 8007716:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800771a:	4652      	mov	r2, sl
 800771c:	465b      	mov	r3, fp
 800771e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007722:	f7f8 ff71 	bl	8000608 <__aeabi_dmul>
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	1b5d      	subs	r5, r3, r5
 800772a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800772e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007732:	e78f      	b.n	8007654 <_strtod_l+0x3d4>
 8007734:	3316      	adds	r3, #22
 8007736:	dba8      	blt.n	800768a <_strtod_l+0x40a>
 8007738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800773a:	eba3 0808 	sub.w	r8, r3, r8
 800773e:	4b34      	ldr	r3, [pc, #208]	@ (8007810 <_strtod_l+0x590>)
 8007740:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007744:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007748:	4650      	mov	r0, sl
 800774a:	4659      	mov	r1, fp
 800774c:	f7f9 f886 	bl	800085c <__aeabi_ddiv>
 8007750:	e782      	b.n	8007658 <_strtod_l+0x3d8>
 8007752:	2300      	movs	r3, #0
 8007754:	4f2f      	ldr	r7, [pc, #188]	@ (8007814 <_strtod_l+0x594>)
 8007756:	1124      	asrs	r4, r4, #4
 8007758:	4650      	mov	r0, sl
 800775a:	4659      	mov	r1, fp
 800775c:	461e      	mov	r6, r3
 800775e:	2c01      	cmp	r4, #1
 8007760:	dc21      	bgt.n	80077a6 <_strtod_l+0x526>
 8007762:	b10b      	cbz	r3, 8007768 <_strtod_l+0x4e8>
 8007764:	4682      	mov	sl, r0
 8007766:	468b      	mov	fp, r1
 8007768:	492a      	ldr	r1, [pc, #168]	@ (8007814 <_strtod_l+0x594>)
 800776a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800776e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007772:	4652      	mov	r2, sl
 8007774:	465b      	mov	r3, fp
 8007776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800777a:	f7f8 ff45 	bl	8000608 <__aeabi_dmul>
 800777e:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <_strtod_l+0x598>)
 8007780:	460a      	mov	r2, r1
 8007782:	400b      	ands	r3, r1
 8007784:	4925      	ldr	r1, [pc, #148]	@ (800781c <_strtod_l+0x59c>)
 8007786:	428b      	cmp	r3, r1
 8007788:	4682      	mov	sl, r0
 800778a:	d898      	bhi.n	80076be <_strtod_l+0x43e>
 800778c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007790:	428b      	cmp	r3, r1
 8007792:	bf86      	itte	hi
 8007794:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007820 <_strtod_l+0x5a0>
 8007798:	f04f 3aff 	movhi.w	sl, #4294967295
 800779c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80077a0:	2300      	movs	r3, #0
 80077a2:	9308      	str	r3, [sp, #32]
 80077a4:	e076      	b.n	8007894 <_strtod_l+0x614>
 80077a6:	07e2      	lsls	r2, r4, #31
 80077a8:	d504      	bpl.n	80077b4 <_strtod_l+0x534>
 80077aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ae:	f7f8 ff2b 	bl	8000608 <__aeabi_dmul>
 80077b2:	2301      	movs	r3, #1
 80077b4:	3601      	adds	r6, #1
 80077b6:	1064      	asrs	r4, r4, #1
 80077b8:	3708      	adds	r7, #8
 80077ba:	e7d0      	b.n	800775e <_strtod_l+0x4de>
 80077bc:	d0f0      	beq.n	80077a0 <_strtod_l+0x520>
 80077be:	4264      	negs	r4, r4
 80077c0:	f014 020f 	ands.w	r2, r4, #15
 80077c4:	d00a      	beq.n	80077dc <_strtod_l+0x55c>
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <_strtod_l+0x590>)
 80077c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077cc:	4650      	mov	r0, sl
 80077ce:	4659      	mov	r1, fp
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f9 f842 	bl	800085c <__aeabi_ddiv>
 80077d8:	4682      	mov	sl, r0
 80077da:	468b      	mov	fp, r1
 80077dc:	1124      	asrs	r4, r4, #4
 80077de:	d0df      	beq.n	80077a0 <_strtod_l+0x520>
 80077e0:	2c1f      	cmp	r4, #31
 80077e2:	dd1f      	ble.n	8007824 <_strtod_l+0x5a4>
 80077e4:	2400      	movs	r4, #0
 80077e6:	46a0      	mov	r8, r4
 80077e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077ea:	46a1      	mov	r9, r4
 80077ec:	9a05      	ldr	r2, [sp, #20]
 80077ee:	2322      	movs	r3, #34	@ 0x22
 80077f0:	f04f 0a00 	mov.w	sl, #0
 80077f4:	f04f 0b00 	mov.w	fp, #0
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e76b      	b.n	80076d4 <_strtod_l+0x454>
 80077fc:	0800a357 	.word	0x0800a357
 8007800:	0800a50c 	.word	0x0800a50c
 8007804:	0800a34e 	.word	0x0800a34e
 8007808:	0800a351 	.word	0x0800a351
 800780c:	0800a40e 	.word	0x0800a40e
 8007810:	0800a598 	.word	0x0800a598
 8007814:	0800a570 	.word	0x0800a570
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	7ca00000 	.word	0x7ca00000
 8007820:	7fefffff 	.word	0x7fefffff
 8007824:	f014 0310 	ands.w	r3, r4, #16
 8007828:	bf18      	it	ne
 800782a:	236a      	movne	r3, #106	@ 0x6a
 800782c:	4ea9      	ldr	r6, [pc, #676]	@ (8007ad4 <_strtod_l+0x854>)
 800782e:	9308      	str	r3, [sp, #32]
 8007830:	4650      	mov	r0, sl
 8007832:	4659      	mov	r1, fp
 8007834:	2300      	movs	r3, #0
 8007836:	07e7      	lsls	r7, r4, #31
 8007838:	d504      	bpl.n	8007844 <_strtod_l+0x5c4>
 800783a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800783e:	f7f8 fee3 	bl	8000608 <__aeabi_dmul>
 8007842:	2301      	movs	r3, #1
 8007844:	1064      	asrs	r4, r4, #1
 8007846:	f106 0608 	add.w	r6, r6, #8
 800784a:	d1f4      	bne.n	8007836 <_strtod_l+0x5b6>
 800784c:	b10b      	cbz	r3, 8007852 <_strtod_l+0x5d2>
 800784e:	4682      	mov	sl, r0
 8007850:	468b      	mov	fp, r1
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	b1b3      	cbz	r3, 8007884 <_strtod_l+0x604>
 8007856:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800785a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800785e:	2b00      	cmp	r3, #0
 8007860:	4659      	mov	r1, fp
 8007862:	dd0f      	ble.n	8007884 <_strtod_l+0x604>
 8007864:	2b1f      	cmp	r3, #31
 8007866:	dd56      	ble.n	8007916 <_strtod_l+0x696>
 8007868:	2b34      	cmp	r3, #52	@ 0x34
 800786a:	bfde      	ittt	le
 800786c:	f04f 33ff 	movle.w	r3, #4294967295
 8007870:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007874:	4093      	lslle	r3, r2
 8007876:	f04f 0a00 	mov.w	sl, #0
 800787a:	bfcc      	ite	gt
 800787c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007880:	ea03 0b01 	andle.w	fp, r3, r1
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	4650      	mov	r0, sl
 800788a:	4659      	mov	r1, fp
 800788c:	f7f9 f924 	bl	8000ad8 <__aeabi_dcmpeq>
 8007890:	2800      	cmp	r0, #0
 8007892:	d1a7      	bne.n	80077e4 <_strtod_l+0x564>
 8007894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800789a:	9805      	ldr	r0, [sp, #20]
 800789c:	462b      	mov	r3, r5
 800789e:	464a      	mov	r2, r9
 80078a0:	f001 fa2c 	bl	8008cfc <__s2b>
 80078a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f43f af09 	beq.w	80076be <_strtod_l+0x43e>
 80078ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b0:	2a00      	cmp	r2, #0
 80078b2:	eba3 0308 	sub.w	r3, r3, r8
 80078b6:	bfa8      	it	ge
 80078b8:	2300      	movge	r3, #0
 80078ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80078bc:	2400      	movs	r4, #0
 80078be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80078c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80078c4:	46a0      	mov	r8, r4
 80078c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078c8:	9805      	ldr	r0, [sp, #20]
 80078ca:	6859      	ldr	r1, [r3, #4]
 80078cc:	f001 f96e 	bl	8008bac <_Balloc>
 80078d0:	4681      	mov	r9, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f43f aef7 	beq.w	80076c6 <_strtod_l+0x446>
 80078d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	3202      	adds	r2, #2
 80078de:	f103 010c 	add.w	r1, r3, #12
 80078e2:	0092      	lsls	r2, r2, #2
 80078e4:	300c      	adds	r0, #12
 80078e6:	f000 fce0 	bl	80082aa <memcpy>
 80078ea:	ec4b ab10 	vmov	d0, sl, fp
 80078ee:	9805      	ldr	r0, [sp, #20]
 80078f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80078f2:	a91b      	add	r1, sp, #108	@ 0x6c
 80078f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80078f8:	f001 fd34 	bl	8009364 <__d2b>
 80078fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aee1 	beq.w	80076c6 <_strtod_l+0x446>
 8007904:	9805      	ldr	r0, [sp, #20]
 8007906:	2101      	movs	r1, #1
 8007908:	f001 fa8e 	bl	8008e28 <__i2b>
 800790c:	4680      	mov	r8, r0
 800790e:	b948      	cbnz	r0, 8007924 <_strtod_l+0x6a4>
 8007910:	f04f 0800 	mov.w	r8, #0
 8007914:	e6d7      	b.n	80076c6 <_strtod_l+0x446>
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	ea03 0a0a 	and.w	sl, r3, sl
 8007922:	e7af      	b.n	8007884 <_strtod_l+0x604>
 8007924:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007926:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007928:	2d00      	cmp	r5, #0
 800792a:	bfab      	itete	ge
 800792c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800792e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007930:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007932:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007934:	bfac      	ite	ge
 8007936:	18ef      	addge	r7, r5, r3
 8007938:	1b5e      	sublt	r6, r3, r5
 800793a:	9b08      	ldr	r3, [sp, #32]
 800793c:	1aed      	subs	r5, r5, r3
 800793e:	4415      	add	r5, r2
 8007940:	4b65      	ldr	r3, [pc, #404]	@ (8007ad8 <_strtod_l+0x858>)
 8007942:	3d01      	subs	r5, #1
 8007944:	429d      	cmp	r5, r3
 8007946:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800794a:	da50      	bge.n	80079ee <_strtod_l+0x76e>
 800794c:	1b5b      	subs	r3, r3, r5
 800794e:	2b1f      	cmp	r3, #31
 8007950:	eba2 0203 	sub.w	r2, r2, r3
 8007954:	f04f 0101 	mov.w	r1, #1
 8007958:	dc3d      	bgt.n	80079d6 <_strtod_l+0x756>
 800795a:	fa01 f303 	lsl.w	r3, r1, r3
 800795e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007960:	2300      	movs	r3, #0
 8007962:	9310      	str	r3, [sp, #64]	@ 0x40
 8007964:	18bd      	adds	r5, r7, r2
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	42af      	cmp	r7, r5
 800796a:	4416      	add	r6, r2
 800796c:	441e      	add	r6, r3
 800796e:	463b      	mov	r3, r7
 8007970:	bfa8      	it	ge
 8007972:	462b      	movge	r3, r5
 8007974:	42b3      	cmp	r3, r6
 8007976:	bfa8      	it	ge
 8007978:	4633      	movge	r3, r6
 800797a:	2b00      	cmp	r3, #0
 800797c:	bfc2      	ittt	gt
 800797e:	1aed      	subgt	r5, r5, r3
 8007980:	1af6      	subgt	r6, r6, r3
 8007982:	1aff      	subgt	r7, r7, r3
 8007984:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	dd16      	ble.n	80079b8 <_strtod_l+0x738>
 800798a:	4641      	mov	r1, r8
 800798c:	9805      	ldr	r0, [sp, #20]
 800798e:	461a      	mov	r2, r3
 8007990:	f001 fb02 	bl	8008f98 <__pow5mult>
 8007994:	4680      	mov	r8, r0
 8007996:	2800      	cmp	r0, #0
 8007998:	d0ba      	beq.n	8007910 <_strtod_l+0x690>
 800799a:	4601      	mov	r1, r0
 800799c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800799e:	9805      	ldr	r0, [sp, #20]
 80079a0:	f001 fa58 	bl	8008e54 <__multiply>
 80079a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f43f ae8d 	beq.w	80076c6 <_strtod_l+0x446>
 80079ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079ae:	9805      	ldr	r0, [sp, #20]
 80079b0:	f001 f93c 	bl	8008c2c <_Bfree>
 80079b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	dc1d      	bgt.n	80079f8 <_strtod_l+0x778>
 80079bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd23      	ble.n	8007a0a <_strtod_l+0x78a>
 80079c2:	4649      	mov	r1, r9
 80079c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80079c6:	9805      	ldr	r0, [sp, #20]
 80079c8:	f001 fae6 	bl	8008f98 <__pow5mult>
 80079cc:	4681      	mov	r9, r0
 80079ce:	b9e0      	cbnz	r0, 8007a0a <_strtod_l+0x78a>
 80079d0:	f04f 0900 	mov.w	r9, #0
 80079d4:	e677      	b.n	80076c6 <_strtod_l+0x446>
 80079d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80079da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80079de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80079e2:	35e2      	adds	r5, #226	@ 0xe2
 80079e4:	fa01 f305 	lsl.w	r3, r1, r5
 80079e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80079ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80079ec:	e7ba      	b.n	8007964 <_strtod_l+0x6e4>
 80079ee:	2300      	movs	r3, #0
 80079f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80079f2:	2301      	movs	r3, #1
 80079f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079f6:	e7b5      	b.n	8007964 <_strtod_l+0x6e4>
 80079f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079fa:	9805      	ldr	r0, [sp, #20]
 80079fc:	462a      	mov	r2, r5
 80079fe:	f001 fb25 	bl	800904c <__lshift>
 8007a02:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d1d9      	bne.n	80079bc <_strtod_l+0x73c>
 8007a08:	e65d      	b.n	80076c6 <_strtod_l+0x446>
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	dd07      	ble.n	8007a1e <_strtod_l+0x79e>
 8007a0e:	4649      	mov	r1, r9
 8007a10:	9805      	ldr	r0, [sp, #20]
 8007a12:	4632      	mov	r2, r6
 8007a14:	f001 fb1a 	bl	800904c <__lshift>
 8007a18:	4681      	mov	r9, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d0d8      	beq.n	80079d0 <_strtod_l+0x750>
 8007a1e:	2f00      	cmp	r7, #0
 8007a20:	dd08      	ble.n	8007a34 <_strtod_l+0x7b4>
 8007a22:	4641      	mov	r1, r8
 8007a24:	9805      	ldr	r0, [sp, #20]
 8007a26:	463a      	mov	r2, r7
 8007a28:	f001 fb10 	bl	800904c <__lshift>
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f ae49 	beq.w	80076c6 <_strtod_l+0x446>
 8007a34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a36:	9805      	ldr	r0, [sp, #20]
 8007a38:	464a      	mov	r2, r9
 8007a3a:	f001 fb8f 	bl	800915c <__mdiff>
 8007a3e:	4604      	mov	r4, r0
 8007a40:	2800      	cmp	r0, #0
 8007a42:	f43f ae40 	beq.w	80076c6 <_strtod_l+0x446>
 8007a46:	68c3      	ldr	r3, [r0, #12]
 8007a48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60c3      	str	r3, [r0, #12]
 8007a4e:	4641      	mov	r1, r8
 8007a50:	f001 fb68 	bl	8009124 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	da45      	bge.n	8007ae4 <_strtod_l+0x864>
 8007a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5a:	ea53 030a 	orrs.w	r3, r3, sl
 8007a5e:	d16b      	bne.n	8007b38 <_strtod_l+0x8b8>
 8007a60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d167      	bne.n	8007b38 <_strtod_l+0x8b8>
 8007a68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a6c:	0d1b      	lsrs	r3, r3, #20
 8007a6e:	051b      	lsls	r3, r3, #20
 8007a70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a74:	d960      	bls.n	8007b38 <_strtod_l+0x8b8>
 8007a76:	6963      	ldr	r3, [r4, #20]
 8007a78:	b913      	cbnz	r3, 8007a80 <_strtod_l+0x800>
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	dd5b      	ble.n	8007b38 <_strtod_l+0x8b8>
 8007a80:	4621      	mov	r1, r4
 8007a82:	2201      	movs	r2, #1
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	f001 fae1 	bl	800904c <__lshift>
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	f001 fb49 	bl	8009124 <__mcmp>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	dd50      	ble.n	8007b38 <_strtod_l+0x8b8>
 8007a96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a9a:	9a08      	ldr	r2, [sp, #32]
 8007a9c:	0d1b      	lsrs	r3, r3, #20
 8007a9e:	051b      	lsls	r3, r3, #20
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	d06a      	beq.n	8007b7a <_strtod_l+0x8fa>
 8007aa4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007aa8:	d867      	bhi.n	8007b7a <_strtod_l+0x8fa>
 8007aaa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007aae:	f67f ae9d 	bls.w	80077ec <_strtod_l+0x56c>
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8007adc <_strtod_l+0x85c>)
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7f8 fda5 	bl	8000608 <__aeabi_dmul>
 8007abe:	4b08      	ldr	r3, [pc, #32]	@ (8007ae0 <_strtod_l+0x860>)
 8007ac0:	400b      	ands	r3, r1
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	468b      	mov	fp, r1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f47f ae08 	bne.w	80076dc <_strtod_l+0x45c>
 8007acc:	9a05      	ldr	r2, [sp, #20]
 8007ace:	2322      	movs	r3, #34	@ 0x22
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e603      	b.n	80076dc <_strtod_l+0x45c>
 8007ad4:	0800a538 	.word	0x0800a538
 8007ad8:	fffffc02 	.word	0xfffffc02
 8007adc:	39500000 	.word	0x39500000
 8007ae0:	7ff00000 	.word	0x7ff00000
 8007ae4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ae8:	d165      	bne.n	8007bb6 <_strtod_l+0x936>
 8007aea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007aec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007af0:	b35a      	cbz	r2, 8007b4a <_strtod_l+0x8ca>
 8007af2:	4a9f      	ldr	r2, [pc, #636]	@ (8007d70 <_strtod_l+0xaf0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d12b      	bne.n	8007b50 <_strtod_l+0x8d0>
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	4651      	mov	r1, sl
 8007afc:	b303      	cbz	r3, 8007b40 <_strtod_l+0x8c0>
 8007afe:	4b9d      	ldr	r3, [pc, #628]	@ (8007d74 <_strtod_l+0xaf4>)
 8007b00:	465a      	mov	r2, fp
 8007b02:	4013      	ands	r3, r2
 8007b04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	d81b      	bhi.n	8007b46 <_strtod_l+0x8c6>
 8007b0e:	0d1b      	lsrs	r3, r3, #20
 8007b10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	4299      	cmp	r1, r3
 8007b1a:	d119      	bne.n	8007b50 <_strtod_l+0x8d0>
 8007b1c:	4b96      	ldr	r3, [pc, #600]	@ (8007d78 <_strtod_l+0xaf8>)
 8007b1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d102      	bne.n	8007b2a <_strtod_l+0x8aa>
 8007b24:	3101      	adds	r1, #1
 8007b26:	f43f adce 	beq.w	80076c6 <_strtod_l+0x446>
 8007b2a:	4b92      	ldr	r3, [pc, #584]	@ (8007d74 <_strtod_l+0xaf4>)
 8007b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b2e:	401a      	ands	r2, r3
 8007b30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007b34:	f04f 0a00 	mov.w	sl, #0
 8007b38:	9b08      	ldr	r3, [sp, #32]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1b9      	bne.n	8007ab2 <_strtod_l+0x832>
 8007b3e:	e5cd      	b.n	80076dc <_strtod_l+0x45c>
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295
 8007b44:	e7e8      	b.n	8007b18 <_strtod_l+0x898>
 8007b46:	4613      	mov	r3, r2
 8007b48:	e7e6      	b.n	8007b18 <_strtod_l+0x898>
 8007b4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b4e:	d0a2      	beq.n	8007a96 <_strtod_l+0x816>
 8007b50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b52:	b1db      	cbz	r3, 8007b8c <_strtod_l+0x90c>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b56:	4213      	tst	r3, r2
 8007b58:	d0ee      	beq.n	8007b38 <_strtod_l+0x8b8>
 8007b5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b5c:	9a08      	ldr	r2, [sp, #32]
 8007b5e:	4650      	mov	r0, sl
 8007b60:	4659      	mov	r1, fp
 8007b62:	b1bb      	cbz	r3, 8007b94 <_strtod_l+0x914>
 8007b64:	f7ff fb6b 	bl	800723e <sulp>
 8007b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b6c:	ec53 2b10 	vmov	r2, r3, d0
 8007b70:	f7f8 fb94 	bl	800029c <__adddf3>
 8007b74:	4682      	mov	sl, r0
 8007b76:	468b      	mov	fp, r1
 8007b78:	e7de      	b.n	8007b38 <_strtod_l+0x8b8>
 8007b7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007b7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b86:	f04f 3aff 	mov.w	sl, #4294967295
 8007b8a:	e7d5      	b.n	8007b38 <_strtod_l+0x8b8>
 8007b8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b8e:	ea13 0f0a 	tst.w	r3, sl
 8007b92:	e7e1      	b.n	8007b58 <_strtod_l+0x8d8>
 8007b94:	f7ff fb53 	bl	800723e <sulp>
 8007b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ba0:	f7f8 fb7a 	bl	8000298 <__aeabi_dsub>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4682      	mov	sl, r0
 8007baa:	468b      	mov	fp, r1
 8007bac:	f7f8 ff94 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d0c1      	beq.n	8007b38 <_strtod_l+0x8b8>
 8007bb4:	e61a      	b.n	80077ec <_strtod_l+0x56c>
 8007bb6:	4641      	mov	r1, r8
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f001 fc2b 	bl	8009414 <__ratio>
 8007bbe:	ec57 6b10 	vmov	r6, r7, d0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 ff98 	bl	8000b00 <__aeabi_dcmple>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d06f      	beq.n	8007cb4 <_strtod_l+0xa34>
 8007bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d17a      	bne.n	8007cd0 <_strtod_l+0xa50>
 8007bda:	f1ba 0f00 	cmp.w	sl, #0
 8007bde:	d158      	bne.n	8007c92 <_strtod_l+0xa12>
 8007be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d15a      	bne.n	8007ca0 <_strtod_l+0xa20>
 8007bea:	4b64      	ldr	r3, [pc, #400]	@ (8007d7c <_strtod_l+0xafc>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 ff7b 	bl	8000aec <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d159      	bne.n	8007cae <_strtod_l+0xa2e>
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4b60      	ldr	r3, [pc, #384]	@ (8007d80 <_strtod_l+0xb00>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	f7f8 fd01 	bl	8000608 <__aeabi_dmul>
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007c0e:	9606      	str	r6, [sp, #24]
 8007c10:	9307      	str	r3, [sp, #28]
 8007c12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c16:	4d57      	ldr	r5, [pc, #348]	@ (8007d74 <_strtod_l+0xaf4>)
 8007c18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1e:	401d      	ands	r5, r3
 8007c20:	4b58      	ldr	r3, [pc, #352]	@ (8007d84 <_strtod_l+0xb04>)
 8007c22:	429d      	cmp	r5, r3
 8007c24:	f040 80b2 	bne.w	8007d8c <_strtod_l+0xb0c>
 8007c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007c2e:	ec4b ab10 	vmov	d0, sl, fp
 8007c32:	f001 fb27 	bl	8009284 <__ulp>
 8007c36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c3a:	ec51 0b10 	vmov	r0, r1, d0
 8007c3e:	f7f8 fce3 	bl	8000608 <__aeabi_dmul>
 8007c42:	4652      	mov	r2, sl
 8007c44:	465b      	mov	r3, fp
 8007c46:	f7f8 fb29 	bl	800029c <__adddf3>
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4949      	ldr	r1, [pc, #292]	@ (8007d74 <_strtod_l+0xaf4>)
 8007c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8007d88 <_strtod_l+0xb08>)
 8007c50:	4019      	ands	r1, r3
 8007c52:	4291      	cmp	r1, r2
 8007c54:	4682      	mov	sl, r0
 8007c56:	d942      	bls.n	8007cde <_strtod_l+0xa5e>
 8007c58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c5a:	4b47      	ldr	r3, [pc, #284]	@ (8007d78 <_strtod_l+0xaf8>)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d103      	bne.n	8007c68 <_strtod_l+0x9e8>
 8007c60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c62:	3301      	adds	r3, #1
 8007c64:	f43f ad2f 	beq.w	80076c6 <_strtod_l+0x446>
 8007c68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007d78 <_strtod_l+0xaf8>
 8007c6c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c72:	9805      	ldr	r0, [sp, #20]
 8007c74:	f000 ffda 	bl	8008c2c <_Bfree>
 8007c78:	9805      	ldr	r0, [sp, #20]
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f000 ffd6 	bl	8008c2c <_Bfree>
 8007c80:	9805      	ldr	r0, [sp, #20]
 8007c82:	4641      	mov	r1, r8
 8007c84:	f000 ffd2 	bl	8008c2c <_Bfree>
 8007c88:	9805      	ldr	r0, [sp, #20]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	f000 ffce 	bl	8008c2c <_Bfree>
 8007c90:	e619      	b.n	80078c6 <_strtod_l+0x646>
 8007c92:	f1ba 0f01 	cmp.w	sl, #1
 8007c96:	d103      	bne.n	8007ca0 <_strtod_l+0xa20>
 8007c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f43f ada6 	beq.w	80077ec <_strtod_l+0x56c>
 8007ca0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007d50 <_strtod_l+0xad0>
 8007ca4:	4f35      	ldr	r7, [pc, #212]	@ (8007d7c <_strtod_l+0xafc>)
 8007ca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007caa:	2600      	movs	r6, #0
 8007cac:	e7b1      	b.n	8007c12 <_strtod_l+0x992>
 8007cae:	4f34      	ldr	r7, [pc, #208]	@ (8007d80 <_strtod_l+0xb00>)
 8007cb0:	2600      	movs	r6, #0
 8007cb2:	e7aa      	b.n	8007c0a <_strtod_l+0x98a>
 8007cb4:	4b32      	ldr	r3, [pc, #200]	@ (8007d80 <_strtod_l+0xb00>)
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	4639      	mov	r1, r7
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f7f8 fca4 	bl	8000608 <__aeabi_dmul>
 8007cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d09f      	beq.n	8007c0a <_strtod_l+0x98a>
 8007cca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007cce:	e7a0      	b.n	8007c12 <_strtod_l+0x992>
 8007cd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007d58 <_strtod_l+0xad8>
 8007cd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007cd8:	ec57 6b17 	vmov	r6, r7, d7
 8007cdc:	e799      	b.n	8007c12 <_strtod_l+0x992>
 8007cde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ce2:	9b08      	ldr	r3, [sp, #32]
 8007ce4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1c1      	bne.n	8007c70 <_strtod_l+0x9f0>
 8007cec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cf0:	0d1b      	lsrs	r3, r3, #20
 8007cf2:	051b      	lsls	r3, r3, #20
 8007cf4:	429d      	cmp	r5, r3
 8007cf6:	d1bb      	bne.n	8007c70 <_strtod_l+0x9f0>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 ffa6 	bl	8000c4c <__aeabi_d2lz>
 8007d00:	f7f8 fc54 	bl	80005ac <__aeabi_l2d>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 fac4 	bl	8000298 <__aeabi_dsub>
 8007d10:	460b      	mov	r3, r1
 8007d12:	4602      	mov	r2, r0
 8007d14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d1e:	ea46 060a 	orr.w	r6, r6, sl
 8007d22:	431e      	orrs	r6, r3
 8007d24:	d06f      	beq.n	8007e06 <_strtod_l+0xb86>
 8007d26:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d60 <_strtod_l+0xae0>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	f7f8 fede 	bl	8000aec <__aeabi_dcmplt>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f47f acd3 	bne.w	80076dc <_strtod_l+0x45c>
 8007d36:	a30c      	add	r3, pc, #48	@ (adr r3, 8007d68 <_strtod_l+0xae8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d40:	f7f8 fef2 	bl	8000b28 <__aeabi_dcmpgt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d093      	beq.n	8007c70 <_strtod_l+0x9f0>
 8007d48:	e4c8      	b.n	80076dc <_strtod_l+0x45c>
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
 8007d50:	00000000 	.word	0x00000000
 8007d54:	bff00000 	.word	0xbff00000
 8007d58:	00000000 	.word	0x00000000
 8007d5c:	3ff00000 	.word	0x3ff00000
 8007d60:	94a03595 	.word	0x94a03595
 8007d64:	3fdfffff 	.word	0x3fdfffff
 8007d68:	35afe535 	.word	0x35afe535
 8007d6c:	3fe00000 	.word	0x3fe00000
 8007d70:	000fffff 	.word	0x000fffff
 8007d74:	7ff00000 	.word	0x7ff00000
 8007d78:	7fefffff 	.word	0x7fefffff
 8007d7c:	3ff00000 	.word	0x3ff00000
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	7fe00000 	.word	0x7fe00000
 8007d88:	7c9fffff 	.word	0x7c9fffff
 8007d8c:	9b08      	ldr	r3, [sp, #32]
 8007d8e:	b323      	cbz	r3, 8007dda <_strtod_l+0xb5a>
 8007d90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007d94:	d821      	bhi.n	8007dda <_strtod_l+0xb5a>
 8007d96:	a328      	add	r3, pc, #160	@ (adr r3, 8007e38 <_strtod_l+0xbb8>)
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	f7f8 feae 	bl	8000b00 <__aeabi_dcmple>
 8007da4:	b1a0      	cbz	r0, 8007dd0 <_strtod_l+0xb50>
 8007da6:	4639      	mov	r1, r7
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7f8 fec7 	bl	8000b3c <__aeabi_d2uiz>
 8007dae:	2801      	cmp	r0, #1
 8007db0:	bf38      	it	cc
 8007db2:	2001      	movcc	r0, #1
 8007db4:	f7f8 fbae 	bl	8000514 <__aeabi_ui2d>
 8007db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	b9fb      	cbnz	r3, 8007e00 <_strtod_l+0xb80>
 8007dc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007dc4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007dc6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007dc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007dcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007dd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007dd6:	1b5b      	subs	r3, r3, r5
 8007dd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007dda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007dde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007de2:	f001 fa4f 	bl	8009284 <__ulp>
 8007de6:	4650      	mov	r0, sl
 8007de8:	ec53 2b10 	vmov	r2, r3, d0
 8007dec:	4659      	mov	r1, fp
 8007dee:	f7f8 fc0b 	bl	8000608 <__aeabi_dmul>
 8007df2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007df6:	f7f8 fa51 	bl	800029c <__adddf3>
 8007dfa:	4682      	mov	sl, r0
 8007dfc:	468b      	mov	fp, r1
 8007dfe:	e770      	b.n	8007ce2 <_strtod_l+0xa62>
 8007e00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007e04:	e7e0      	b.n	8007dc8 <_strtod_l+0xb48>
 8007e06:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e40 <_strtod_l+0xbc0>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f7f8 fe6e 	bl	8000aec <__aeabi_dcmplt>
 8007e10:	e798      	b.n	8007d44 <_strtod_l+0xac4>
 8007e12:	2300      	movs	r3, #0
 8007e14:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	f7ff ba6d 	b.w	80072fa <_strtod_l+0x7a>
 8007e20:	2a65      	cmp	r2, #101	@ 0x65
 8007e22:	f43f ab68 	beq.w	80074f6 <_strtod_l+0x276>
 8007e26:	2a45      	cmp	r2, #69	@ 0x45
 8007e28:	f43f ab65 	beq.w	80074f6 <_strtod_l+0x276>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f7ff bba0 	b.w	8007572 <_strtod_l+0x2f2>
 8007e32:	bf00      	nop
 8007e34:	f3af 8000 	nop.w
 8007e38:	ffc00000 	.word	0xffc00000
 8007e3c:	41dfffff 	.word	0x41dfffff
 8007e40:	94a03595 	.word	0x94a03595
 8007e44:	3fcfffff 	.word	0x3fcfffff

08007e48 <strtod>:
 8007e48:	460a      	mov	r2, r1
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	4802      	ldr	r0, [pc, #8]	@ (8007e58 <strtod+0x10>)
 8007e4e:	4b03      	ldr	r3, [pc, #12]	@ (8007e5c <strtod+0x14>)
 8007e50:	6800      	ldr	r0, [r0, #0]
 8007e52:	f7ff ba15 	b.w	8007280 <_strtod_l>
 8007e56:	bf00      	nop
 8007e58:	200001d4 	.word	0x200001d4
 8007e5c:	20000068 	.word	0x20000068

08007e60 <std>:
 8007e60:	2300      	movs	r3, #0
 8007e62:	b510      	push	{r4, lr}
 8007e64:	4604      	mov	r4, r0
 8007e66:	e9c0 3300 	strd	r3, r3, [r0]
 8007e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e6e:	6083      	str	r3, [r0, #8]
 8007e70:	8181      	strh	r1, [r0, #12]
 8007e72:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e74:	81c2      	strh	r2, [r0, #14]
 8007e76:	6183      	str	r3, [r0, #24]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	305c      	adds	r0, #92	@ 0x5c
 8007e7e:	f000 f92a 	bl	80080d6 <memset>
 8007e82:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb8 <std+0x58>)
 8007e84:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e86:	4b0d      	ldr	r3, [pc, #52]	@ (8007ebc <std+0x5c>)
 8007e88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec0 <std+0x60>)
 8007e8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <std+0x64>)
 8007e90:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <std+0x68>)
 8007e94:	6224      	str	r4, [r4, #32]
 8007e96:	429c      	cmp	r4, r3
 8007e98:	d006      	beq.n	8007ea8 <std+0x48>
 8007e9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e9e:	4294      	cmp	r4, r2
 8007ea0:	d002      	beq.n	8007ea8 <std+0x48>
 8007ea2:	33d0      	adds	r3, #208	@ 0xd0
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	d105      	bne.n	8007eb4 <std+0x54>
 8007ea8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb0:	f000 b9f8 	b.w	80082a4 <__retarget_lock_init_recursive>
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08008051 	.word	0x08008051
 8007ebc:	08008073 	.word	0x08008073
 8007ec0:	080080ab 	.word	0x080080ab
 8007ec4:	080080cf 	.word	0x080080cf
 8007ec8:	20000774 	.word	0x20000774

08007ecc <stdio_exit_handler>:
 8007ecc:	4a02      	ldr	r2, [pc, #8]	@ (8007ed8 <stdio_exit_handler+0xc>)
 8007ece:	4903      	ldr	r1, [pc, #12]	@ (8007edc <stdio_exit_handler+0x10>)
 8007ed0:	4803      	ldr	r0, [pc, #12]	@ (8007ee0 <stdio_exit_handler+0x14>)
 8007ed2:	f000 b869 	b.w	8007fa8 <_fwalk_sglue>
 8007ed6:	bf00      	nop
 8007ed8:	2000005c 	.word	0x2000005c
 8007edc:	08009be9 	.word	0x08009be9
 8007ee0:	200001d8 	.word	0x200001d8

08007ee4 <cleanup_stdio>:
 8007ee4:	6841      	ldr	r1, [r0, #4]
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f18 <cleanup_stdio+0x34>)
 8007ee8:	4299      	cmp	r1, r3
 8007eea:	b510      	push	{r4, lr}
 8007eec:	4604      	mov	r4, r0
 8007eee:	d001      	beq.n	8007ef4 <cleanup_stdio+0x10>
 8007ef0:	f001 fe7a 	bl	8009be8 <_fflush_r>
 8007ef4:	68a1      	ldr	r1, [r4, #8]
 8007ef6:	4b09      	ldr	r3, [pc, #36]	@ (8007f1c <cleanup_stdio+0x38>)
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	d002      	beq.n	8007f02 <cleanup_stdio+0x1e>
 8007efc:	4620      	mov	r0, r4
 8007efe:	f001 fe73 	bl	8009be8 <_fflush_r>
 8007f02:	68e1      	ldr	r1, [r4, #12]
 8007f04:	4b06      	ldr	r3, [pc, #24]	@ (8007f20 <cleanup_stdio+0x3c>)
 8007f06:	4299      	cmp	r1, r3
 8007f08:	d004      	beq.n	8007f14 <cleanup_stdio+0x30>
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f10:	f001 be6a 	b.w	8009be8 <_fflush_r>
 8007f14:	bd10      	pop	{r4, pc}
 8007f16:	bf00      	nop
 8007f18:	20000774 	.word	0x20000774
 8007f1c:	200007dc 	.word	0x200007dc
 8007f20:	20000844 	.word	0x20000844

08007f24 <global_stdio_init.part.0>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4b0b      	ldr	r3, [pc, #44]	@ (8007f54 <global_stdio_init.part.0+0x30>)
 8007f28:	4c0b      	ldr	r4, [pc, #44]	@ (8007f58 <global_stdio_init.part.0+0x34>)
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f5c <global_stdio_init.part.0+0x38>)
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	4620      	mov	r0, r4
 8007f30:	2200      	movs	r2, #0
 8007f32:	2104      	movs	r1, #4
 8007f34:	f7ff ff94 	bl	8007e60 <std>
 8007f38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	2109      	movs	r1, #9
 8007f40:	f7ff ff8e 	bl	8007e60 <std>
 8007f44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f48:	2202      	movs	r2, #2
 8007f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4e:	2112      	movs	r1, #18
 8007f50:	f7ff bf86 	b.w	8007e60 <std>
 8007f54:	200008ac 	.word	0x200008ac
 8007f58:	20000774 	.word	0x20000774
 8007f5c:	08007ecd 	.word	0x08007ecd

08007f60 <__sfp_lock_acquire>:
 8007f60:	4801      	ldr	r0, [pc, #4]	@ (8007f68 <__sfp_lock_acquire+0x8>)
 8007f62:	f000 b9a0 	b.w	80082a6 <__retarget_lock_acquire_recursive>
 8007f66:	bf00      	nop
 8007f68:	200008b5 	.word	0x200008b5

08007f6c <__sfp_lock_release>:
 8007f6c:	4801      	ldr	r0, [pc, #4]	@ (8007f74 <__sfp_lock_release+0x8>)
 8007f6e:	f000 b99b 	b.w	80082a8 <__retarget_lock_release_recursive>
 8007f72:	bf00      	nop
 8007f74:	200008b5 	.word	0x200008b5

08007f78 <__sinit>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	f7ff fff0 	bl	8007f60 <__sfp_lock_acquire>
 8007f80:	6a23      	ldr	r3, [r4, #32]
 8007f82:	b11b      	cbz	r3, 8007f8c <__sinit+0x14>
 8007f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f88:	f7ff bff0 	b.w	8007f6c <__sfp_lock_release>
 8007f8c:	4b04      	ldr	r3, [pc, #16]	@ (8007fa0 <__sinit+0x28>)
 8007f8e:	6223      	str	r3, [r4, #32]
 8007f90:	4b04      	ldr	r3, [pc, #16]	@ (8007fa4 <__sinit+0x2c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1f5      	bne.n	8007f84 <__sinit+0xc>
 8007f98:	f7ff ffc4 	bl	8007f24 <global_stdio_init.part.0>
 8007f9c:	e7f2      	b.n	8007f84 <__sinit+0xc>
 8007f9e:	bf00      	nop
 8007fa0:	08007ee5 	.word	0x08007ee5
 8007fa4:	200008ac 	.word	0x200008ac

08007fa8 <_fwalk_sglue>:
 8007fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fac:	4607      	mov	r7, r0
 8007fae:	4688      	mov	r8, r1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8007fbc:	d505      	bpl.n	8007fca <_fwalk_sglue+0x22>
 8007fbe:	6824      	ldr	r4, [r4, #0]
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	d1f7      	bne.n	8007fb4 <_fwalk_sglue+0xc>
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d907      	bls.n	8007fe0 <_fwalk_sglue+0x38>
 8007fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	d003      	beq.n	8007fe0 <_fwalk_sglue+0x38>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4638      	mov	r0, r7
 8007fdc:	47c0      	blx	r8
 8007fde:	4306      	orrs	r6, r0
 8007fe0:	3568      	adds	r5, #104	@ 0x68
 8007fe2:	e7e9      	b.n	8007fb8 <_fwalk_sglue+0x10>

08007fe4 <sniprintf>:
 8007fe4:	b40c      	push	{r2, r3}
 8007fe6:	b530      	push	{r4, r5, lr}
 8007fe8:	4b18      	ldr	r3, [pc, #96]	@ (800804c <sniprintf+0x68>)
 8007fea:	1e0c      	subs	r4, r1, #0
 8007fec:	681d      	ldr	r5, [r3, #0]
 8007fee:	b09d      	sub	sp, #116	@ 0x74
 8007ff0:	da08      	bge.n	8008004 <sniprintf+0x20>
 8007ff2:	238b      	movs	r3, #139	@ 0x8b
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffa:	b01d      	add	sp, #116	@ 0x74
 8007ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008000:	b002      	add	sp, #8
 8008002:	4770      	bx	lr
 8008004:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008008:	f8ad 3014 	strh.w	r3, [sp, #20]
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008012:	bf14      	ite	ne
 8008014:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008018:	4623      	moveq	r3, r4
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008022:	9002      	str	r0, [sp, #8]
 8008024:	9006      	str	r0, [sp, #24]
 8008026:	f8ad 3016 	strh.w	r3, [sp, #22]
 800802a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800802c:	ab21      	add	r3, sp, #132	@ 0x84
 800802e:	a902      	add	r1, sp, #8
 8008030:	4628      	mov	r0, r5
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	f001 facc 	bl	80095d0 <_svfiprintf_r>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	bfbc      	itt	lt
 800803c:	238b      	movlt	r3, #139	@ 0x8b
 800803e:	602b      	strlt	r3, [r5, #0]
 8008040:	2c00      	cmp	r4, #0
 8008042:	d0da      	beq.n	8007ffa <sniprintf+0x16>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e7d6      	b.n	8007ffa <sniprintf+0x16>
 800804c:	200001d4 	.word	0x200001d4

08008050 <__sread>:
 8008050:	b510      	push	{r4, lr}
 8008052:	460c      	mov	r4, r1
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	f000 f8d6 	bl	8008208 <_read_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	bfab      	itete	ge
 8008060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008062:	89a3      	ldrhlt	r3, [r4, #12]
 8008064:	181b      	addge	r3, r3, r0
 8008066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800806a:	bfac      	ite	ge
 800806c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800806e:	81a3      	strhlt	r3, [r4, #12]
 8008070:	bd10      	pop	{r4, pc}

08008072 <__swrite>:
 8008072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	461f      	mov	r7, r3
 8008078:	898b      	ldrh	r3, [r1, #12]
 800807a:	05db      	lsls	r3, r3, #23
 800807c:	4605      	mov	r5, r0
 800807e:	460c      	mov	r4, r1
 8008080:	4616      	mov	r6, r2
 8008082:	d505      	bpl.n	8008090 <__swrite+0x1e>
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2302      	movs	r3, #2
 800808a:	2200      	movs	r2, #0
 800808c:	f000 f8aa 	bl	80081e4 <_lseek_r>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	4628      	mov	r0, r5
 80080a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a6:	f000 b8c1 	b.w	800822c <_write_r>

080080aa <__sseek>:
 80080aa:	b510      	push	{r4, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b2:	f000 f897 	bl	80081e4 <_lseek_r>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	bf15      	itete	ne
 80080bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080c6:	81a3      	strheq	r3, [r4, #12]
 80080c8:	bf18      	it	ne
 80080ca:	81a3      	strhne	r3, [r4, #12]
 80080cc:	bd10      	pop	{r4, pc}

080080ce <__sclose>:
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	f000 b877 	b.w	80081c4 <_close_r>

080080d6 <memset>:
 80080d6:	4402      	add	r2, r0
 80080d8:	4603      	mov	r3, r0
 80080da:	4293      	cmp	r3, r2
 80080dc:	d100      	bne.n	80080e0 <memset+0xa>
 80080de:	4770      	bx	lr
 80080e0:	f803 1b01 	strb.w	r1, [r3], #1
 80080e4:	e7f9      	b.n	80080da <memset+0x4>

080080e6 <strncmp>:
 80080e6:	b510      	push	{r4, lr}
 80080e8:	b16a      	cbz	r2, 8008106 <strncmp+0x20>
 80080ea:	3901      	subs	r1, #1
 80080ec:	1884      	adds	r4, r0, r2
 80080ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d103      	bne.n	8008102 <strncmp+0x1c>
 80080fa:	42a0      	cmp	r0, r4
 80080fc:	d001      	beq.n	8008102 <strncmp+0x1c>
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d1f5      	bne.n	80080ee <strncmp+0x8>
 8008102:	1ad0      	subs	r0, r2, r3
 8008104:	bd10      	pop	{r4, pc}
 8008106:	4610      	mov	r0, r2
 8008108:	e7fc      	b.n	8008104 <strncmp+0x1e>
	...

0800810c <strtok>:
 800810c:	4b16      	ldr	r3, [pc, #88]	@ (8008168 <strtok+0x5c>)
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	681f      	ldr	r7, [r3, #0]
 8008114:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008116:	4605      	mov	r5, r0
 8008118:	460e      	mov	r6, r1
 800811a:	b9ec      	cbnz	r4, 8008158 <strtok+0x4c>
 800811c:	2050      	movs	r0, #80	@ 0x50
 800811e:	f000 fc7d 	bl	8008a1c <malloc>
 8008122:	4602      	mov	r2, r0
 8008124:	6478      	str	r0, [r7, #68]	@ 0x44
 8008126:	b920      	cbnz	r0, 8008132 <strtok+0x26>
 8008128:	4b10      	ldr	r3, [pc, #64]	@ (800816c <strtok+0x60>)
 800812a:	4811      	ldr	r0, [pc, #68]	@ (8008170 <strtok+0x64>)
 800812c:	215b      	movs	r1, #91	@ 0x5b
 800812e:	f000 f8d3 	bl	80082d8 <__assert_func>
 8008132:	e9c0 4400 	strd	r4, r4, [r0]
 8008136:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800813a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800813e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008142:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008146:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800814a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800814e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008152:	6184      	str	r4, [r0, #24]
 8008154:	7704      	strb	r4, [r0, #28]
 8008156:	6244      	str	r4, [r0, #36]	@ 0x24
 8008158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	2301      	movs	r3, #1
 8008160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008164:	f000 b806 	b.w	8008174 <__strtok_r>
 8008168:	200001d4 	.word	0x200001d4
 800816c:	0800a35a 	.word	0x0800a35a
 8008170:	0800a371 	.word	0x0800a371

08008174 <__strtok_r>:
 8008174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008176:	4604      	mov	r4, r0
 8008178:	b908      	cbnz	r0, 800817e <__strtok_r+0xa>
 800817a:	6814      	ldr	r4, [r2, #0]
 800817c:	b144      	cbz	r4, 8008190 <__strtok_r+0x1c>
 800817e:	4620      	mov	r0, r4
 8008180:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008184:	460f      	mov	r7, r1
 8008186:	f817 6b01 	ldrb.w	r6, [r7], #1
 800818a:	b91e      	cbnz	r6, 8008194 <__strtok_r+0x20>
 800818c:	b965      	cbnz	r5, 80081a8 <__strtok_r+0x34>
 800818e:	6015      	str	r5, [r2, #0]
 8008190:	2000      	movs	r0, #0
 8008192:	e005      	b.n	80081a0 <__strtok_r+0x2c>
 8008194:	42b5      	cmp	r5, r6
 8008196:	d1f6      	bne.n	8008186 <__strtok_r+0x12>
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f0      	bne.n	800817e <__strtok_r+0xa>
 800819c:	6014      	str	r4, [r2, #0]
 800819e:	7003      	strb	r3, [r0, #0]
 80081a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a2:	461c      	mov	r4, r3
 80081a4:	e00c      	b.n	80081c0 <__strtok_r+0x4c>
 80081a6:	b91d      	cbnz	r5, 80081b0 <__strtok_r+0x3c>
 80081a8:	4627      	mov	r7, r4
 80081aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081ae:	460e      	mov	r6, r1
 80081b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	d1f6      	bne.n	80081a6 <__strtok_r+0x32>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0f2      	beq.n	80081a2 <__strtok_r+0x2e>
 80081bc:	2300      	movs	r3, #0
 80081be:	703b      	strb	r3, [r7, #0]
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	e7ed      	b.n	80081a0 <__strtok_r+0x2c>

080081c4 <_close_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d06      	ldr	r5, [pc, #24]	@ (80081e0 <_close_r+0x1c>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7fa fd10 	bl	8002bf4 <_close>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_close_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_close_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	200008b0 	.word	0x200008b0

080081e4 <_lseek_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4d07      	ldr	r5, [pc, #28]	@ (8008204 <_lseek_r+0x20>)
 80081e8:	4604      	mov	r4, r0
 80081ea:	4608      	mov	r0, r1
 80081ec:	4611      	mov	r1, r2
 80081ee:	2200      	movs	r2, #0
 80081f0:	602a      	str	r2, [r5, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f7fa fd25 	bl	8002c42 <_lseek>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_lseek_r+0x1e>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_lseek_r+0x1e>
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	200008b0 	.word	0x200008b0

08008208 <_read_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	@ (8008228 <_read_r+0x20>)
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7fa fcb3 	bl	8002b82 <_read>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_read_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_read_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	200008b0 	.word	0x200008b0

0800822c <_write_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	@ (800824c <_write_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7fa fcbe 	bl	8002bbc <_write>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_write_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_write_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	200008b0 	.word	0x200008b0

08008250 <__errno>:
 8008250:	4b01      	ldr	r3, [pc, #4]	@ (8008258 <__errno+0x8>)
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	200001d4 	.word	0x200001d4

0800825c <__libc_init_array>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4d0d      	ldr	r5, [pc, #52]	@ (8008294 <__libc_init_array+0x38>)
 8008260:	4c0d      	ldr	r4, [pc, #52]	@ (8008298 <__libc_init_array+0x3c>)
 8008262:	1b64      	subs	r4, r4, r5
 8008264:	10a4      	asrs	r4, r4, #2
 8008266:	2600      	movs	r6, #0
 8008268:	42a6      	cmp	r6, r4
 800826a:	d109      	bne.n	8008280 <__libc_init_array+0x24>
 800826c:	4d0b      	ldr	r5, [pc, #44]	@ (800829c <__libc_init_array+0x40>)
 800826e:	4c0c      	ldr	r4, [pc, #48]	@ (80082a0 <__libc_init_array+0x44>)
 8008270:	f002 f846 	bl	800a300 <_init>
 8008274:	1b64      	subs	r4, r4, r5
 8008276:	10a4      	asrs	r4, r4, #2
 8008278:	2600      	movs	r6, #0
 800827a:	42a6      	cmp	r6, r4
 800827c:	d105      	bne.n	800828a <__libc_init_array+0x2e>
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	f855 3b04 	ldr.w	r3, [r5], #4
 8008284:	4798      	blx	r3
 8008286:	3601      	adds	r6, #1
 8008288:	e7ee      	b.n	8008268 <__libc_init_array+0xc>
 800828a:	f855 3b04 	ldr.w	r3, [r5], #4
 800828e:	4798      	blx	r3
 8008290:	3601      	adds	r6, #1
 8008292:	e7f2      	b.n	800827a <__libc_init_array+0x1e>
 8008294:	0800a76c 	.word	0x0800a76c
 8008298:	0800a76c 	.word	0x0800a76c
 800829c:	0800a76c 	.word	0x0800a76c
 80082a0:	0800a770 	.word	0x0800a770

080082a4 <__retarget_lock_init_recursive>:
 80082a4:	4770      	bx	lr

080082a6 <__retarget_lock_acquire_recursive>:
 80082a6:	4770      	bx	lr

080082a8 <__retarget_lock_release_recursive>:
 80082a8:	4770      	bx	lr

080082aa <memcpy>:
 80082aa:	440a      	add	r2, r1
 80082ac:	4291      	cmp	r1, r2
 80082ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80082b2:	d100      	bne.n	80082b6 <memcpy+0xc>
 80082b4:	4770      	bx	lr
 80082b6:	b510      	push	{r4, lr}
 80082b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c0:	4291      	cmp	r1, r2
 80082c2:	d1f9      	bne.n	80082b8 <memcpy+0xe>
 80082c4:	bd10      	pop	{r4, pc}
	...

080082c8 <nan>:
 80082c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082d0 <nan+0x8>
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	00000000 	.word	0x00000000
 80082d4:	7ff80000 	.word	0x7ff80000

080082d8 <__assert_func>:
 80082d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082da:	4614      	mov	r4, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <__assert_func+0x2c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4605      	mov	r5, r0
 80082e4:	68d8      	ldr	r0, [r3, #12]
 80082e6:	b14c      	cbz	r4, 80082fc <__assert_func+0x24>
 80082e8:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <__assert_func+0x30>)
 80082ea:	9100      	str	r1, [sp, #0]
 80082ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082f0:	4906      	ldr	r1, [pc, #24]	@ (800830c <__assert_func+0x34>)
 80082f2:	462b      	mov	r3, r5
 80082f4:	f001 fca0 	bl	8009c38 <fiprintf>
 80082f8:	f001 fcda 	bl	8009cb0 <abort>
 80082fc:	4b04      	ldr	r3, [pc, #16]	@ (8008310 <__assert_func+0x38>)
 80082fe:	461c      	mov	r4, r3
 8008300:	e7f3      	b.n	80082ea <__assert_func+0x12>
 8008302:	bf00      	nop
 8008304:	200001d4 	.word	0x200001d4
 8008308:	0800a3d3 	.word	0x0800a3d3
 800830c:	0800a3e0 	.word	0x0800a3e0
 8008310:	0800a40e 	.word	0x0800a40e

08008314 <_free_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4605      	mov	r5, r0
 8008318:	2900      	cmp	r1, #0
 800831a:	d041      	beq.n	80083a0 <_free_r+0x8c>
 800831c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008320:	1f0c      	subs	r4, r1, #4
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfb8      	it	lt
 8008326:	18e4      	addlt	r4, r4, r3
 8008328:	f000 fc34 	bl	8008b94 <__malloc_lock>
 800832c:	4a1d      	ldr	r2, [pc, #116]	@ (80083a4 <_free_r+0x90>)
 800832e:	6813      	ldr	r3, [r2, #0]
 8008330:	b933      	cbnz	r3, 8008340 <_free_r+0x2c>
 8008332:	6063      	str	r3, [r4, #4]
 8008334:	6014      	str	r4, [r2, #0]
 8008336:	4628      	mov	r0, r5
 8008338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800833c:	f000 bc30 	b.w	8008ba0 <__malloc_unlock>
 8008340:	42a3      	cmp	r3, r4
 8008342:	d908      	bls.n	8008356 <_free_r+0x42>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	1821      	adds	r1, r4, r0
 8008348:	428b      	cmp	r3, r1
 800834a:	bf01      	itttt	eq
 800834c:	6819      	ldreq	r1, [r3, #0]
 800834e:	685b      	ldreq	r3, [r3, #4]
 8008350:	1809      	addeq	r1, r1, r0
 8008352:	6021      	streq	r1, [r4, #0]
 8008354:	e7ed      	b.n	8008332 <_free_r+0x1e>
 8008356:	461a      	mov	r2, r3
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	b10b      	cbz	r3, 8008360 <_free_r+0x4c>
 800835c:	42a3      	cmp	r3, r4
 800835e:	d9fa      	bls.n	8008356 <_free_r+0x42>
 8008360:	6811      	ldr	r1, [r2, #0]
 8008362:	1850      	adds	r0, r2, r1
 8008364:	42a0      	cmp	r0, r4
 8008366:	d10b      	bne.n	8008380 <_free_r+0x6c>
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	4401      	add	r1, r0
 800836c:	1850      	adds	r0, r2, r1
 800836e:	4283      	cmp	r3, r0
 8008370:	6011      	str	r1, [r2, #0]
 8008372:	d1e0      	bne.n	8008336 <_free_r+0x22>
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	6053      	str	r3, [r2, #4]
 800837a:	4408      	add	r0, r1
 800837c:	6010      	str	r0, [r2, #0]
 800837e:	e7da      	b.n	8008336 <_free_r+0x22>
 8008380:	d902      	bls.n	8008388 <_free_r+0x74>
 8008382:	230c      	movs	r3, #12
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	e7d6      	b.n	8008336 <_free_r+0x22>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	1821      	adds	r1, r4, r0
 800838c:	428b      	cmp	r3, r1
 800838e:	bf04      	itt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	bf04      	itt	eq
 8008398:	1809      	addeq	r1, r1, r0
 800839a:	6021      	streq	r1, [r4, #0]
 800839c:	6054      	str	r4, [r2, #4]
 800839e:	e7ca      	b.n	8008336 <_free_r+0x22>
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	200008bc 	.word	0x200008bc

080083a8 <rshift>:
 80083a8:	6903      	ldr	r3, [r0, #16]
 80083aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80083ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80083b6:	f100 0414 	add.w	r4, r0, #20
 80083ba:	dd45      	ble.n	8008448 <rshift+0xa0>
 80083bc:	f011 011f 	ands.w	r1, r1, #31
 80083c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80083c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80083c8:	d10c      	bne.n	80083e4 <rshift+0x3c>
 80083ca:	f100 0710 	add.w	r7, r0, #16
 80083ce:	4629      	mov	r1, r5
 80083d0:	42b1      	cmp	r1, r6
 80083d2:	d334      	bcc.n	800843e <rshift+0x96>
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	1eea      	subs	r2, r5, #3
 80083da:	4296      	cmp	r6, r2
 80083dc:	bf38      	it	cc
 80083de:	2300      	movcc	r3, #0
 80083e0:	4423      	add	r3, r4
 80083e2:	e015      	b.n	8008410 <rshift+0x68>
 80083e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083e8:	f1c1 0820 	rsb	r8, r1, #32
 80083ec:	40cf      	lsrs	r7, r1
 80083ee:	f105 0e04 	add.w	lr, r5, #4
 80083f2:	46a1      	mov	r9, r4
 80083f4:	4576      	cmp	r6, lr
 80083f6:	46f4      	mov	ip, lr
 80083f8:	d815      	bhi.n	8008426 <rshift+0x7e>
 80083fa:	1a9a      	subs	r2, r3, r2
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	3a04      	subs	r2, #4
 8008400:	3501      	adds	r5, #1
 8008402:	42ae      	cmp	r6, r5
 8008404:	bf38      	it	cc
 8008406:	2200      	movcc	r2, #0
 8008408:	18a3      	adds	r3, r4, r2
 800840a:	50a7      	str	r7, [r4, r2]
 800840c:	b107      	cbz	r7, 8008410 <rshift+0x68>
 800840e:	3304      	adds	r3, #4
 8008410:	1b1a      	subs	r2, r3, r4
 8008412:	42a3      	cmp	r3, r4
 8008414:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008418:	bf08      	it	eq
 800841a:	2300      	moveq	r3, #0
 800841c:	6102      	str	r2, [r0, #16]
 800841e:	bf08      	it	eq
 8008420:	6143      	streq	r3, [r0, #20]
 8008422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008426:	f8dc c000 	ldr.w	ip, [ip]
 800842a:	fa0c fc08 	lsl.w	ip, ip, r8
 800842e:	ea4c 0707 	orr.w	r7, ip, r7
 8008432:	f849 7b04 	str.w	r7, [r9], #4
 8008436:	f85e 7b04 	ldr.w	r7, [lr], #4
 800843a:	40cf      	lsrs	r7, r1
 800843c:	e7da      	b.n	80083f4 <rshift+0x4c>
 800843e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008442:	f847 cf04 	str.w	ip, [r7, #4]!
 8008446:	e7c3      	b.n	80083d0 <rshift+0x28>
 8008448:	4623      	mov	r3, r4
 800844a:	e7e1      	b.n	8008410 <rshift+0x68>

0800844c <__hexdig_fun>:
 800844c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008450:	2b09      	cmp	r3, #9
 8008452:	d802      	bhi.n	800845a <__hexdig_fun+0xe>
 8008454:	3820      	subs	r0, #32
 8008456:	b2c0      	uxtb	r0, r0
 8008458:	4770      	bx	lr
 800845a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800845e:	2b05      	cmp	r3, #5
 8008460:	d801      	bhi.n	8008466 <__hexdig_fun+0x1a>
 8008462:	3847      	subs	r0, #71	@ 0x47
 8008464:	e7f7      	b.n	8008456 <__hexdig_fun+0xa>
 8008466:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800846a:	2b05      	cmp	r3, #5
 800846c:	d801      	bhi.n	8008472 <__hexdig_fun+0x26>
 800846e:	3827      	subs	r0, #39	@ 0x27
 8008470:	e7f1      	b.n	8008456 <__hexdig_fun+0xa>
 8008472:	2000      	movs	r0, #0
 8008474:	4770      	bx	lr
	...

08008478 <__gethex>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	b085      	sub	sp, #20
 800847e:	468a      	mov	sl, r1
 8008480:	9302      	str	r3, [sp, #8]
 8008482:	680b      	ldr	r3, [r1, #0]
 8008484:	9001      	str	r0, [sp, #4]
 8008486:	4690      	mov	r8, r2
 8008488:	1c9c      	adds	r4, r3, #2
 800848a:	46a1      	mov	r9, r4
 800848c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008490:	2830      	cmp	r0, #48	@ 0x30
 8008492:	d0fa      	beq.n	800848a <__gethex+0x12>
 8008494:	eba9 0303 	sub.w	r3, r9, r3
 8008498:	f1a3 0b02 	sub.w	fp, r3, #2
 800849c:	f7ff ffd6 	bl	800844c <__hexdig_fun>
 80084a0:	4605      	mov	r5, r0
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d168      	bne.n	8008578 <__gethex+0x100>
 80084a6:	49a0      	ldr	r1, [pc, #640]	@ (8008728 <__gethex+0x2b0>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	4648      	mov	r0, r9
 80084ac:	f7ff fe1b 	bl	80080e6 <strncmp>
 80084b0:	4607      	mov	r7, r0
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d167      	bne.n	8008586 <__gethex+0x10e>
 80084b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80084ba:	4626      	mov	r6, r4
 80084bc:	f7ff ffc6 	bl	800844c <__hexdig_fun>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d062      	beq.n	800858a <__gethex+0x112>
 80084c4:	4623      	mov	r3, r4
 80084c6:	7818      	ldrb	r0, [r3, #0]
 80084c8:	2830      	cmp	r0, #48	@ 0x30
 80084ca:	4699      	mov	r9, r3
 80084cc:	f103 0301 	add.w	r3, r3, #1
 80084d0:	d0f9      	beq.n	80084c6 <__gethex+0x4e>
 80084d2:	f7ff ffbb 	bl	800844c <__hexdig_fun>
 80084d6:	fab0 f580 	clz	r5, r0
 80084da:	096d      	lsrs	r5, r5, #5
 80084dc:	f04f 0b01 	mov.w	fp, #1
 80084e0:	464a      	mov	r2, r9
 80084e2:	4616      	mov	r6, r2
 80084e4:	3201      	adds	r2, #1
 80084e6:	7830      	ldrb	r0, [r6, #0]
 80084e8:	f7ff ffb0 	bl	800844c <__hexdig_fun>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d1f8      	bne.n	80084e2 <__gethex+0x6a>
 80084f0:	498d      	ldr	r1, [pc, #564]	@ (8008728 <__gethex+0x2b0>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7ff fdf6 	bl	80080e6 <strncmp>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d13f      	bne.n	800857e <__gethex+0x106>
 80084fe:	b944      	cbnz	r4, 8008512 <__gethex+0x9a>
 8008500:	1c74      	adds	r4, r6, #1
 8008502:	4622      	mov	r2, r4
 8008504:	4616      	mov	r6, r2
 8008506:	3201      	adds	r2, #1
 8008508:	7830      	ldrb	r0, [r6, #0]
 800850a:	f7ff ff9f 	bl	800844c <__hexdig_fun>
 800850e:	2800      	cmp	r0, #0
 8008510:	d1f8      	bne.n	8008504 <__gethex+0x8c>
 8008512:	1ba4      	subs	r4, r4, r6
 8008514:	00a7      	lsls	r7, r4, #2
 8008516:	7833      	ldrb	r3, [r6, #0]
 8008518:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800851c:	2b50      	cmp	r3, #80	@ 0x50
 800851e:	d13e      	bne.n	800859e <__gethex+0x126>
 8008520:	7873      	ldrb	r3, [r6, #1]
 8008522:	2b2b      	cmp	r3, #43	@ 0x2b
 8008524:	d033      	beq.n	800858e <__gethex+0x116>
 8008526:	2b2d      	cmp	r3, #45	@ 0x2d
 8008528:	d034      	beq.n	8008594 <__gethex+0x11c>
 800852a:	1c71      	adds	r1, r6, #1
 800852c:	2400      	movs	r4, #0
 800852e:	7808      	ldrb	r0, [r1, #0]
 8008530:	f7ff ff8c 	bl	800844c <__hexdig_fun>
 8008534:	1e43      	subs	r3, r0, #1
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b18      	cmp	r3, #24
 800853a:	d830      	bhi.n	800859e <__gethex+0x126>
 800853c:	f1a0 0210 	sub.w	r2, r0, #16
 8008540:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008544:	f7ff ff82 	bl	800844c <__hexdig_fun>
 8008548:	f100 3cff 	add.w	ip, r0, #4294967295
 800854c:	fa5f fc8c 	uxtb.w	ip, ip
 8008550:	f1bc 0f18 	cmp.w	ip, #24
 8008554:	f04f 030a 	mov.w	r3, #10
 8008558:	d91e      	bls.n	8008598 <__gethex+0x120>
 800855a:	b104      	cbz	r4, 800855e <__gethex+0xe6>
 800855c:	4252      	negs	r2, r2
 800855e:	4417      	add	r7, r2
 8008560:	f8ca 1000 	str.w	r1, [sl]
 8008564:	b1ed      	cbz	r5, 80085a2 <__gethex+0x12a>
 8008566:	f1bb 0f00 	cmp.w	fp, #0
 800856a:	bf0c      	ite	eq
 800856c:	2506      	moveq	r5, #6
 800856e:	2500      	movne	r5, #0
 8008570:	4628      	mov	r0, r5
 8008572:	b005      	add	sp, #20
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	2500      	movs	r5, #0
 800857a:	462c      	mov	r4, r5
 800857c:	e7b0      	b.n	80084e0 <__gethex+0x68>
 800857e:	2c00      	cmp	r4, #0
 8008580:	d1c7      	bne.n	8008512 <__gethex+0x9a>
 8008582:	4627      	mov	r7, r4
 8008584:	e7c7      	b.n	8008516 <__gethex+0x9e>
 8008586:	464e      	mov	r6, r9
 8008588:	462f      	mov	r7, r5
 800858a:	2501      	movs	r5, #1
 800858c:	e7c3      	b.n	8008516 <__gethex+0x9e>
 800858e:	2400      	movs	r4, #0
 8008590:	1cb1      	adds	r1, r6, #2
 8008592:	e7cc      	b.n	800852e <__gethex+0xb6>
 8008594:	2401      	movs	r4, #1
 8008596:	e7fb      	b.n	8008590 <__gethex+0x118>
 8008598:	fb03 0002 	mla	r0, r3, r2, r0
 800859c:	e7ce      	b.n	800853c <__gethex+0xc4>
 800859e:	4631      	mov	r1, r6
 80085a0:	e7de      	b.n	8008560 <__gethex+0xe8>
 80085a2:	eba6 0309 	sub.w	r3, r6, r9
 80085a6:	3b01      	subs	r3, #1
 80085a8:	4629      	mov	r1, r5
 80085aa:	2b07      	cmp	r3, #7
 80085ac:	dc0a      	bgt.n	80085c4 <__gethex+0x14c>
 80085ae:	9801      	ldr	r0, [sp, #4]
 80085b0:	f000 fafc 	bl	8008bac <_Balloc>
 80085b4:	4604      	mov	r4, r0
 80085b6:	b940      	cbnz	r0, 80085ca <__gethex+0x152>
 80085b8:	4b5c      	ldr	r3, [pc, #368]	@ (800872c <__gethex+0x2b4>)
 80085ba:	4602      	mov	r2, r0
 80085bc:	21e4      	movs	r1, #228	@ 0xe4
 80085be:	485c      	ldr	r0, [pc, #368]	@ (8008730 <__gethex+0x2b8>)
 80085c0:	f7ff fe8a 	bl	80082d8 <__assert_func>
 80085c4:	3101      	adds	r1, #1
 80085c6:	105b      	asrs	r3, r3, #1
 80085c8:	e7ef      	b.n	80085aa <__gethex+0x132>
 80085ca:	f100 0a14 	add.w	sl, r0, #20
 80085ce:	2300      	movs	r3, #0
 80085d0:	4655      	mov	r5, sl
 80085d2:	469b      	mov	fp, r3
 80085d4:	45b1      	cmp	r9, r6
 80085d6:	d337      	bcc.n	8008648 <__gethex+0x1d0>
 80085d8:	f845 bb04 	str.w	fp, [r5], #4
 80085dc:	eba5 050a 	sub.w	r5, r5, sl
 80085e0:	10ad      	asrs	r5, r5, #2
 80085e2:	6125      	str	r5, [r4, #16]
 80085e4:	4658      	mov	r0, fp
 80085e6:	f000 fbd3 	bl	8008d90 <__hi0bits>
 80085ea:	016d      	lsls	r5, r5, #5
 80085ec:	f8d8 6000 	ldr.w	r6, [r8]
 80085f0:	1a2d      	subs	r5, r5, r0
 80085f2:	42b5      	cmp	r5, r6
 80085f4:	dd54      	ble.n	80086a0 <__gethex+0x228>
 80085f6:	1bad      	subs	r5, r5, r6
 80085f8:	4629      	mov	r1, r5
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 ff5f 	bl	80094be <__any_on>
 8008600:	4681      	mov	r9, r0
 8008602:	b178      	cbz	r0, 8008624 <__gethex+0x1ac>
 8008604:	1e6b      	subs	r3, r5, #1
 8008606:	1159      	asrs	r1, r3, #5
 8008608:	f003 021f 	and.w	r2, r3, #31
 800860c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008610:	f04f 0901 	mov.w	r9, #1
 8008614:	fa09 f202 	lsl.w	r2, r9, r2
 8008618:	420a      	tst	r2, r1
 800861a:	d003      	beq.n	8008624 <__gethex+0x1ac>
 800861c:	454b      	cmp	r3, r9
 800861e:	dc36      	bgt.n	800868e <__gethex+0x216>
 8008620:	f04f 0902 	mov.w	r9, #2
 8008624:	4629      	mov	r1, r5
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff febe 	bl	80083a8 <rshift>
 800862c:	442f      	add	r7, r5
 800862e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008632:	42bb      	cmp	r3, r7
 8008634:	da42      	bge.n	80086bc <__gethex+0x244>
 8008636:	9801      	ldr	r0, [sp, #4]
 8008638:	4621      	mov	r1, r4
 800863a:	f000 faf7 	bl	8008c2c <_Bfree>
 800863e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008640:	2300      	movs	r3, #0
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	25a3      	movs	r5, #163	@ 0xa3
 8008646:	e793      	b.n	8008570 <__gethex+0xf8>
 8008648:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800864c:	2a2e      	cmp	r2, #46	@ 0x2e
 800864e:	d012      	beq.n	8008676 <__gethex+0x1fe>
 8008650:	2b20      	cmp	r3, #32
 8008652:	d104      	bne.n	800865e <__gethex+0x1e6>
 8008654:	f845 bb04 	str.w	fp, [r5], #4
 8008658:	f04f 0b00 	mov.w	fp, #0
 800865c:	465b      	mov	r3, fp
 800865e:	7830      	ldrb	r0, [r6, #0]
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	f7ff fef3 	bl	800844c <__hexdig_fun>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	f000 000f 	and.w	r0, r0, #15
 800866c:	4098      	lsls	r0, r3
 800866e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008672:	3304      	adds	r3, #4
 8008674:	e7ae      	b.n	80085d4 <__gethex+0x15c>
 8008676:	45b1      	cmp	r9, r6
 8008678:	d8ea      	bhi.n	8008650 <__gethex+0x1d8>
 800867a:	492b      	ldr	r1, [pc, #172]	@ (8008728 <__gethex+0x2b0>)
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff fd30 	bl	80080e6 <strncmp>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	2800      	cmp	r0, #0
 800868a:	d1e1      	bne.n	8008650 <__gethex+0x1d8>
 800868c:	e7a2      	b.n	80085d4 <__gethex+0x15c>
 800868e:	1ea9      	subs	r1, r5, #2
 8008690:	4620      	mov	r0, r4
 8008692:	f000 ff14 	bl	80094be <__any_on>
 8008696:	2800      	cmp	r0, #0
 8008698:	d0c2      	beq.n	8008620 <__gethex+0x1a8>
 800869a:	f04f 0903 	mov.w	r9, #3
 800869e:	e7c1      	b.n	8008624 <__gethex+0x1ac>
 80086a0:	da09      	bge.n	80086b6 <__gethex+0x23e>
 80086a2:	1b75      	subs	r5, r6, r5
 80086a4:	4621      	mov	r1, r4
 80086a6:	9801      	ldr	r0, [sp, #4]
 80086a8:	462a      	mov	r2, r5
 80086aa:	f000 fccf 	bl	800904c <__lshift>
 80086ae:	1b7f      	subs	r7, r7, r5
 80086b0:	4604      	mov	r4, r0
 80086b2:	f100 0a14 	add.w	sl, r0, #20
 80086b6:	f04f 0900 	mov.w	r9, #0
 80086ba:	e7b8      	b.n	800862e <__gethex+0x1b6>
 80086bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086c0:	42bd      	cmp	r5, r7
 80086c2:	dd6f      	ble.n	80087a4 <__gethex+0x32c>
 80086c4:	1bed      	subs	r5, r5, r7
 80086c6:	42ae      	cmp	r6, r5
 80086c8:	dc34      	bgt.n	8008734 <__gethex+0x2bc>
 80086ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d022      	beq.n	8008718 <__gethex+0x2a0>
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d024      	beq.n	8008720 <__gethex+0x2a8>
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d115      	bne.n	8008706 <__gethex+0x28e>
 80086da:	42ae      	cmp	r6, r5
 80086dc:	d113      	bne.n	8008706 <__gethex+0x28e>
 80086de:	2e01      	cmp	r6, #1
 80086e0:	d10b      	bne.n	80086fa <__gethex+0x282>
 80086e2:	9a02      	ldr	r2, [sp, #8]
 80086e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	2301      	movs	r3, #1
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	f8ca 3000 	str.w	r3, [sl]
 80086f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086f4:	2562      	movs	r5, #98	@ 0x62
 80086f6:	601c      	str	r4, [r3, #0]
 80086f8:	e73a      	b.n	8008570 <__gethex+0xf8>
 80086fa:	1e71      	subs	r1, r6, #1
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fede 	bl	80094be <__any_on>
 8008702:	2800      	cmp	r0, #0
 8008704:	d1ed      	bne.n	80086e2 <__gethex+0x26a>
 8008706:	9801      	ldr	r0, [sp, #4]
 8008708:	4621      	mov	r1, r4
 800870a:	f000 fa8f 	bl	8008c2c <_Bfree>
 800870e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008710:	2300      	movs	r3, #0
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	2550      	movs	r5, #80	@ 0x50
 8008716:	e72b      	b.n	8008570 <__gethex+0xf8>
 8008718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f3      	bne.n	8008706 <__gethex+0x28e>
 800871e:	e7e0      	b.n	80086e2 <__gethex+0x26a>
 8008720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1dd      	bne.n	80086e2 <__gethex+0x26a>
 8008726:	e7ee      	b.n	8008706 <__gethex+0x28e>
 8008728:	0800a34c 	.word	0x0800a34c
 800872c:	0800a40f 	.word	0x0800a40f
 8008730:	0800a420 	.word	0x0800a420
 8008734:	1e6f      	subs	r7, r5, #1
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	d130      	bne.n	800879e <__gethex+0x326>
 800873c:	b127      	cbz	r7, 8008748 <__gethex+0x2d0>
 800873e:	4639      	mov	r1, r7
 8008740:	4620      	mov	r0, r4
 8008742:	f000 febc 	bl	80094be <__any_on>
 8008746:	4681      	mov	r9, r0
 8008748:	117a      	asrs	r2, r7, #5
 800874a:	2301      	movs	r3, #1
 800874c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008750:	f007 071f 	and.w	r7, r7, #31
 8008754:	40bb      	lsls	r3, r7
 8008756:	4213      	tst	r3, r2
 8008758:	4629      	mov	r1, r5
 800875a:	4620      	mov	r0, r4
 800875c:	bf18      	it	ne
 800875e:	f049 0902 	orrne.w	r9, r9, #2
 8008762:	f7ff fe21 	bl	80083a8 <rshift>
 8008766:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800876a:	1b76      	subs	r6, r6, r5
 800876c:	2502      	movs	r5, #2
 800876e:	f1b9 0f00 	cmp.w	r9, #0
 8008772:	d047      	beq.n	8008804 <__gethex+0x38c>
 8008774:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d015      	beq.n	80087a8 <__gethex+0x330>
 800877c:	2b03      	cmp	r3, #3
 800877e:	d017      	beq.n	80087b0 <__gethex+0x338>
 8008780:	2b01      	cmp	r3, #1
 8008782:	d109      	bne.n	8008798 <__gethex+0x320>
 8008784:	f019 0f02 	tst.w	r9, #2
 8008788:	d006      	beq.n	8008798 <__gethex+0x320>
 800878a:	f8da 3000 	ldr.w	r3, [sl]
 800878e:	ea49 0903 	orr.w	r9, r9, r3
 8008792:	f019 0f01 	tst.w	r9, #1
 8008796:	d10e      	bne.n	80087b6 <__gethex+0x33e>
 8008798:	f045 0510 	orr.w	r5, r5, #16
 800879c:	e032      	b.n	8008804 <__gethex+0x38c>
 800879e:	f04f 0901 	mov.w	r9, #1
 80087a2:	e7d1      	b.n	8008748 <__gethex+0x2d0>
 80087a4:	2501      	movs	r5, #1
 80087a6:	e7e2      	b.n	800876e <__gethex+0x2f6>
 80087a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087aa:	f1c3 0301 	rsb	r3, r3, #1
 80087ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <__gethex+0x320>
 80087b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80087ba:	f104 0314 	add.w	r3, r4, #20
 80087be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80087c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80087c6:	f04f 0c00 	mov.w	ip, #0
 80087ca:	4618      	mov	r0, r3
 80087cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087d4:	d01b      	beq.n	800880e <__gethex+0x396>
 80087d6:	3201      	adds	r2, #1
 80087d8:	6002      	str	r2, [r0, #0]
 80087da:	2d02      	cmp	r5, #2
 80087dc:	f104 0314 	add.w	r3, r4, #20
 80087e0:	d13c      	bne.n	800885c <__gethex+0x3e4>
 80087e2:	f8d8 2000 	ldr.w	r2, [r8]
 80087e6:	3a01      	subs	r2, #1
 80087e8:	42b2      	cmp	r2, r6
 80087ea:	d109      	bne.n	8008800 <__gethex+0x388>
 80087ec:	1171      	asrs	r1, r6, #5
 80087ee:	2201      	movs	r2, #1
 80087f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087f4:	f006 061f 	and.w	r6, r6, #31
 80087f8:	fa02 f606 	lsl.w	r6, r2, r6
 80087fc:	421e      	tst	r6, r3
 80087fe:	d13a      	bne.n	8008876 <__gethex+0x3fe>
 8008800:	f045 0520 	orr.w	r5, r5, #32
 8008804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008806:	601c      	str	r4, [r3, #0]
 8008808:	9b02      	ldr	r3, [sp, #8]
 800880a:	601f      	str	r7, [r3, #0]
 800880c:	e6b0      	b.n	8008570 <__gethex+0xf8>
 800880e:	4299      	cmp	r1, r3
 8008810:	f843 cc04 	str.w	ip, [r3, #-4]
 8008814:	d8d9      	bhi.n	80087ca <__gethex+0x352>
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	459b      	cmp	fp, r3
 800881a:	db17      	blt.n	800884c <__gethex+0x3d4>
 800881c:	6861      	ldr	r1, [r4, #4]
 800881e:	9801      	ldr	r0, [sp, #4]
 8008820:	3101      	adds	r1, #1
 8008822:	f000 f9c3 	bl	8008bac <_Balloc>
 8008826:	4681      	mov	r9, r0
 8008828:	b918      	cbnz	r0, 8008832 <__gethex+0x3ba>
 800882a:	4b1a      	ldr	r3, [pc, #104]	@ (8008894 <__gethex+0x41c>)
 800882c:	4602      	mov	r2, r0
 800882e:	2184      	movs	r1, #132	@ 0x84
 8008830:	e6c5      	b.n	80085be <__gethex+0x146>
 8008832:	6922      	ldr	r2, [r4, #16]
 8008834:	3202      	adds	r2, #2
 8008836:	f104 010c 	add.w	r1, r4, #12
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	300c      	adds	r0, #12
 800883e:	f7ff fd34 	bl	80082aa <memcpy>
 8008842:	4621      	mov	r1, r4
 8008844:	9801      	ldr	r0, [sp, #4]
 8008846:	f000 f9f1 	bl	8008c2c <_Bfree>
 800884a:	464c      	mov	r4, r9
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008854:	6122      	str	r2, [r4, #16]
 8008856:	2201      	movs	r2, #1
 8008858:	615a      	str	r2, [r3, #20]
 800885a:	e7be      	b.n	80087da <__gethex+0x362>
 800885c:	6922      	ldr	r2, [r4, #16]
 800885e:	455a      	cmp	r2, fp
 8008860:	dd0b      	ble.n	800887a <__gethex+0x402>
 8008862:	2101      	movs	r1, #1
 8008864:	4620      	mov	r0, r4
 8008866:	f7ff fd9f 	bl	80083a8 <rshift>
 800886a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800886e:	3701      	adds	r7, #1
 8008870:	42bb      	cmp	r3, r7
 8008872:	f6ff aee0 	blt.w	8008636 <__gethex+0x1be>
 8008876:	2501      	movs	r5, #1
 8008878:	e7c2      	b.n	8008800 <__gethex+0x388>
 800887a:	f016 061f 	ands.w	r6, r6, #31
 800887e:	d0fa      	beq.n	8008876 <__gethex+0x3fe>
 8008880:	4453      	add	r3, sl
 8008882:	f1c6 0620 	rsb	r6, r6, #32
 8008886:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800888a:	f000 fa81 	bl	8008d90 <__hi0bits>
 800888e:	42b0      	cmp	r0, r6
 8008890:	dbe7      	blt.n	8008862 <__gethex+0x3ea>
 8008892:	e7f0      	b.n	8008876 <__gethex+0x3fe>
 8008894:	0800a40f 	.word	0x0800a40f

08008898 <L_shift>:
 8008898:	f1c2 0208 	rsb	r2, r2, #8
 800889c:	0092      	lsls	r2, r2, #2
 800889e:	b570      	push	{r4, r5, r6, lr}
 80088a0:	f1c2 0620 	rsb	r6, r2, #32
 80088a4:	6843      	ldr	r3, [r0, #4]
 80088a6:	6804      	ldr	r4, [r0, #0]
 80088a8:	fa03 f506 	lsl.w	r5, r3, r6
 80088ac:	432c      	orrs	r4, r5
 80088ae:	40d3      	lsrs	r3, r2
 80088b0:	6004      	str	r4, [r0, #0]
 80088b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80088b6:	4288      	cmp	r0, r1
 80088b8:	d3f4      	bcc.n	80088a4 <L_shift+0xc>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}

080088bc <__match>:
 80088bc:	b530      	push	{r4, r5, lr}
 80088be:	6803      	ldr	r3, [r0, #0]
 80088c0:	3301      	adds	r3, #1
 80088c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c6:	b914      	cbnz	r4, 80088ce <__match+0x12>
 80088c8:	6003      	str	r3, [r0, #0]
 80088ca:	2001      	movs	r0, #1
 80088cc:	bd30      	pop	{r4, r5, pc}
 80088ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80088d6:	2d19      	cmp	r5, #25
 80088d8:	bf98      	it	ls
 80088da:	3220      	addls	r2, #32
 80088dc:	42a2      	cmp	r2, r4
 80088de:	d0f0      	beq.n	80088c2 <__match+0x6>
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7f3      	b.n	80088cc <__match+0x10>

080088e4 <__hexnan>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	680b      	ldr	r3, [r1, #0]
 80088ea:	6801      	ldr	r1, [r0, #0]
 80088ec:	115e      	asrs	r6, r3, #5
 80088ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088f2:	f013 031f 	ands.w	r3, r3, #31
 80088f6:	b087      	sub	sp, #28
 80088f8:	bf18      	it	ne
 80088fa:	3604      	addne	r6, #4
 80088fc:	2500      	movs	r5, #0
 80088fe:	1f37      	subs	r7, r6, #4
 8008900:	4682      	mov	sl, r0
 8008902:	4690      	mov	r8, r2
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	f846 5c04 	str.w	r5, [r6, #-4]
 800890a:	46b9      	mov	r9, r7
 800890c:	463c      	mov	r4, r7
 800890e:	9502      	str	r5, [sp, #8]
 8008910:	46ab      	mov	fp, r5
 8008912:	784a      	ldrb	r2, [r1, #1]
 8008914:	1c4b      	adds	r3, r1, #1
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	b342      	cbz	r2, 800896c <__hexnan+0x88>
 800891a:	4610      	mov	r0, r2
 800891c:	9105      	str	r1, [sp, #20]
 800891e:	9204      	str	r2, [sp, #16]
 8008920:	f7ff fd94 	bl	800844c <__hexdig_fun>
 8008924:	2800      	cmp	r0, #0
 8008926:	d151      	bne.n	80089cc <__hexnan+0xe8>
 8008928:	9a04      	ldr	r2, [sp, #16]
 800892a:	9905      	ldr	r1, [sp, #20]
 800892c:	2a20      	cmp	r2, #32
 800892e:	d818      	bhi.n	8008962 <__hexnan+0x7e>
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	459b      	cmp	fp, r3
 8008934:	dd13      	ble.n	800895e <__hexnan+0x7a>
 8008936:	454c      	cmp	r4, r9
 8008938:	d206      	bcs.n	8008948 <__hexnan+0x64>
 800893a:	2d07      	cmp	r5, #7
 800893c:	dc04      	bgt.n	8008948 <__hexnan+0x64>
 800893e:	462a      	mov	r2, r5
 8008940:	4649      	mov	r1, r9
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff ffa8 	bl	8008898 <L_shift>
 8008948:	4544      	cmp	r4, r8
 800894a:	d952      	bls.n	80089f2 <__hexnan+0x10e>
 800894c:	2300      	movs	r3, #0
 800894e:	f1a4 0904 	sub.w	r9, r4, #4
 8008952:	f844 3c04 	str.w	r3, [r4, #-4]
 8008956:	f8cd b008 	str.w	fp, [sp, #8]
 800895a:	464c      	mov	r4, r9
 800895c:	461d      	mov	r5, r3
 800895e:	9903      	ldr	r1, [sp, #12]
 8008960:	e7d7      	b.n	8008912 <__hexnan+0x2e>
 8008962:	2a29      	cmp	r2, #41	@ 0x29
 8008964:	d157      	bne.n	8008a16 <__hexnan+0x132>
 8008966:	3102      	adds	r1, #2
 8008968:	f8ca 1000 	str.w	r1, [sl]
 800896c:	f1bb 0f00 	cmp.w	fp, #0
 8008970:	d051      	beq.n	8008a16 <__hexnan+0x132>
 8008972:	454c      	cmp	r4, r9
 8008974:	d206      	bcs.n	8008984 <__hexnan+0xa0>
 8008976:	2d07      	cmp	r5, #7
 8008978:	dc04      	bgt.n	8008984 <__hexnan+0xa0>
 800897a:	462a      	mov	r2, r5
 800897c:	4649      	mov	r1, r9
 800897e:	4620      	mov	r0, r4
 8008980:	f7ff ff8a 	bl	8008898 <L_shift>
 8008984:	4544      	cmp	r4, r8
 8008986:	d936      	bls.n	80089f6 <__hexnan+0x112>
 8008988:	f1a8 0204 	sub.w	r2, r8, #4
 800898c:	4623      	mov	r3, r4
 800898e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008992:	f842 1f04 	str.w	r1, [r2, #4]!
 8008996:	429f      	cmp	r7, r3
 8008998:	d2f9      	bcs.n	800898e <__hexnan+0xaa>
 800899a:	1b3b      	subs	r3, r7, r4
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	3304      	adds	r3, #4
 80089a2:	3401      	adds	r4, #1
 80089a4:	3e03      	subs	r6, #3
 80089a6:	42b4      	cmp	r4, r6
 80089a8:	bf88      	it	hi
 80089aa:	2304      	movhi	r3, #4
 80089ac:	4443      	add	r3, r8
 80089ae:	2200      	movs	r2, #0
 80089b0:	f843 2b04 	str.w	r2, [r3], #4
 80089b4:	429f      	cmp	r7, r3
 80089b6:	d2fb      	bcs.n	80089b0 <__hexnan+0xcc>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	b91b      	cbnz	r3, 80089c4 <__hexnan+0xe0>
 80089bc:	4547      	cmp	r7, r8
 80089be:	d128      	bne.n	8008a12 <__hexnan+0x12e>
 80089c0:	2301      	movs	r3, #1
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	2005      	movs	r0, #5
 80089c6:	b007      	add	sp, #28
 80089c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	3501      	adds	r5, #1
 80089ce:	2d08      	cmp	r5, #8
 80089d0:	f10b 0b01 	add.w	fp, fp, #1
 80089d4:	dd06      	ble.n	80089e4 <__hexnan+0x100>
 80089d6:	4544      	cmp	r4, r8
 80089d8:	d9c1      	bls.n	800895e <__hexnan+0x7a>
 80089da:	2300      	movs	r3, #0
 80089dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80089e0:	2501      	movs	r5, #1
 80089e2:	3c04      	subs	r4, #4
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	f000 000f 	and.w	r0, r0, #15
 80089ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	e7b5      	b.n	800895e <__hexnan+0x7a>
 80089f2:	2508      	movs	r5, #8
 80089f4:	e7b3      	b.n	800895e <__hexnan+0x7a>
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0dd      	beq.n	80089b8 <__hexnan+0xd4>
 80089fc:	f1c3 0320 	rsb	r3, r3, #32
 8008a00:	f04f 32ff 	mov.w	r2, #4294967295
 8008a04:	40da      	lsrs	r2, r3
 8008a06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a10:	e7d2      	b.n	80089b8 <__hexnan+0xd4>
 8008a12:	3f04      	subs	r7, #4
 8008a14:	e7d0      	b.n	80089b8 <__hexnan+0xd4>
 8008a16:	2004      	movs	r0, #4
 8008a18:	e7d5      	b.n	80089c6 <__hexnan+0xe2>
	...

08008a1c <malloc>:
 8008a1c:	4b02      	ldr	r3, [pc, #8]	@ (8008a28 <malloc+0xc>)
 8008a1e:	4601      	mov	r1, r0
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	f000 b825 	b.w	8008a70 <_malloc_r>
 8008a26:	bf00      	nop
 8008a28:	200001d4 	.word	0x200001d4

08008a2c <sbrk_aligned>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a6c <sbrk_aligned+0x40>)
 8008a30:	460c      	mov	r4, r1
 8008a32:	6831      	ldr	r1, [r6, #0]
 8008a34:	4605      	mov	r5, r0
 8008a36:	b911      	cbnz	r1, 8008a3e <sbrk_aligned+0x12>
 8008a38:	f001 f92a 	bl	8009c90 <_sbrk_r>
 8008a3c:	6030      	str	r0, [r6, #0]
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f001 f925 	bl	8009c90 <_sbrk_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d103      	bne.n	8008a52 <sbrk_aligned+0x26>
 8008a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a4e:	4620      	mov	r0, r4
 8008a50:	bd70      	pop	{r4, r5, r6, pc}
 8008a52:	1cc4      	adds	r4, r0, #3
 8008a54:	f024 0403 	bic.w	r4, r4, #3
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d0f8      	beq.n	8008a4e <sbrk_aligned+0x22>
 8008a5c:	1a21      	subs	r1, r4, r0
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f001 f916 	bl	8009c90 <_sbrk_r>
 8008a64:	3001      	adds	r0, #1
 8008a66:	d1f2      	bne.n	8008a4e <sbrk_aligned+0x22>
 8008a68:	e7ef      	b.n	8008a4a <sbrk_aligned+0x1e>
 8008a6a:	bf00      	nop
 8008a6c:	200008b8 	.word	0x200008b8

08008a70 <_malloc_r>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	1ccd      	adds	r5, r1, #3
 8008a76:	f025 0503 	bic.w	r5, r5, #3
 8008a7a:	3508      	adds	r5, #8
 8008a7c:	2d0c      	cmp	r5, #12
 8008a7e:	bf38      	it	cc
 8008a80:	250c      	movcc	r5, #12
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	4606      	mov	r6, r0
 8008a86:	db01      	blt.n	8008a8c <_malloc_r+0x1c>
 8008a88:	42a9      	cmp	r1, r5
 8008a8a:	d904      	bls.n	8008a96 <_malloc_r+0x26>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	6033      	str	r3, [r6, #0]
 8008a90:	2000      	movs	r0, #0
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b6c <_malloc_r+0xfc>
 8008a9a:	f000 f87b 	bl	8008b94 <__malloc_lock>
 8008a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008aa2:	461c      	mov	r4, r3
 8008aa4:	bb44      	cbnz	r4, 8008af8 <_malloc_r+0x88>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff ffbf 	bl	8008a2c <sbrk_aligned>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	d158      	bne.n	8008b66 <_malloc_r+0xf6>
 8008ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ab8:	4627      	mov	r7, r4
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	d143      	bne.n	8008b46 <_malloc_r+0xd6>
 8008abe:	2c00      	cmp	r4, #0
 8008ac0:	d04b      	beq.n	8008b5a <_malloc_r+0xea>
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	eb04 0903 	add.w	r9, r4, r3
 8008acc:	f001 f8e0 	bl	8009c90 <_sbrk_r>
 8008ad0:	4581      	cmp	r9, r0
 8008ad2:	d142      	bne.n	8008b5a <_malloc_r+0xea>
 8008ad4:	6821      	ldr	r1, [r4, #0]
 8008ad6:	1a6d      	subs	r5, r5, r1
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff ffa6 	bl	8008a2c <sbrk_aligned>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d03a      	beq.n	8008b5a <_malloc_r+0xea>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	442b      	add	r3, r5
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	f8d8 3000 	ldr.w	r3, [r8]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	bb62      	cbnz	r2, 8008b4c <_malloc_r+0xdc>
 8008af2:	f8c8 7000 	str.w	r7, [r8]
 8008af6:	e00f      	b.n	8008b18 <_malloc_r+0xa8>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	1b52      	subs	r2, r2, r5
 8008afc:	d420      	bmi.n	8008b40 <_malloc_r+0xd0>
 8008afe:	2a0b      	cmp	r2, #11
 8008b00:	d917      	bls.n	8008b32 <_malloc_r+0xc2>
 8008b02:	1961      	adds	r1, r4, r5
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	6025      	str	r5, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	6059      	strne	r1, [r3, #4]
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	bf08      	it	eq
 8008b10:	f8c8 1000 	streq.w	r1, [r8]
 8008b14:	5162      	str	r2, [r4, r5]
 8008b16:	604b      	str	r3, [r1, #4]
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f000 f841 	bl	8008ba0 <__malloc_unlock>
 8008b1e:	f104 000b 	add.w	r0, r4, #11
 8008b22:	1d23      	adds	r3, r4, #4
 8008b24:	f020 0007 	bic.w	r0, r0, #7
 8008b28:	1ac2      	subs	r2, r0, r3
 8008b2a:	bf1c      	itt	ne
 8008b2c:	1a1b      	subne	r3, r3, r0
 8008b2e:	50a3      	strne	r3, [r4, r2]
 8008b30:	e7af      	b.n	8008a92 <_malloc_r+0x22>
 8008b32:	6862      	ldr	r2, [r4, #4]
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	bf0c      	ite	eq
 8008b38:	f8c8 2000 	streq.w	r2, [r8]
 8008b3c:	605a      	strne	r2, [r3, #4]
 8008b3e:	e7eb      	b.n	8008b18 <_malloc_r+0xa8>
 8008b40:	4623      	mov	r3, r4
 8008b42:	6864      	ldr	r4, [r4, #4]
 8008b44:	e7ae      	b.n	8008aa4 <_malloc_r+0x34>
 8008b46:	463c      	mov	r4, r7
 8008b48:	687f      	ldr	r7, [r7, #4]
 8008b4a:	e7b6      	b.n	8008aba <_malloc_r+0x4a>
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d1fb      	bne.n	8008b4c <_malloc_r+0xdc>
 8008b54:	2300      	movs	r3, #0
 8008b56:	6053      	str	r3, [r2, #4]
 8008b58:	e7de      	b.n	8008b18 <_malloc_r+0xa8>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f81e 	bl	8008ba0 <__malloc_unlock>
 8008b64:	e794      	b.n	8008a90 <_malloc_r+0x20>
 8008b66:	6005      	str	r5, [r0, #0]
 8008b68:	e7d6      	b.n	8008b18 <_malloc_r+0xa8>
 8008b6a:	bf00      	nop
 8008b6c:	200008bc 	.word	0x200008bc

08008b70 <__ascii_mbtowc>:
 8008b70:	b082      	sub	sp, #8
 8008b72:	b901      	cbnz	r1, 8008b76 <__ascii_mbtowc+0x6>
 8008b74:	a901      	add	r1, sp, #4
 8008b76:	b142      	cbz	r2, 8008b8a <__ascii_mbtowc+0x1a>
 8008b78:	b14b      	cbz	r3, 8008b8e <__ascii_mbtowc+0x1e>
 8008b7a:	7813      	ldrb	r3, [r2, #0]
 8008b7c:	600b      	str	r3, [r1, #0]
 8008b7e:	7812      	ldrb	r2, [r2, #0]
 8008b80:	1e10      	subs	r0, r2, #0
 8008b82:	bf18      	it	ne
 8008b84:	2001      	movne	r0, #1
 8008b86:	b002      	add	sp, #8
 8008b88:	4770      	bx	lr
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	e7fb      	b.n	8008b86 <__ascii_mbtowc+0x16>
 8008b8e:	f06f 0001 	mvn.w	r0, #1
 8008b92:	e7f8      	b.n	8008b86 <__ascii_mbtowc+0x16>

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	@ (8008b9c <__malloc_lock+0x8>)
 8008b96:	f7ff bb86 	b.w	80082a6 <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	200008b4 	.word	0x200008b4

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f7ff bb81 	b.w	80082a8 <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	200008b4 	.word	0x200008b4

08008bac <_Balloc>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	69c6      	ldr	r6, [r0, #28]
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	b976      	cbnz	r6, 8008bd4 <_Balloc+0x28>
 8008bb6:	2010      	movs	r0, #16
 8008bb8:	f7ff ff30 	bl	8008a1c <malloc>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	61e0      	str	r0, [r4, #28]
 8008bc0:	b920      	cbnz	r0, 8008bcc <_Balloc+0x20>
 8008bc2:	4b18      	ldr	r3, [pc, #96]	@ (8008c24 <_Balloc+0x78>)
 8008bc4:	4818      	ldr	r0, [pc, #96]	@ (8008c28 <_Balloc+0x7c>)
 8008bc6:	216b      	movs	r1, #107	@ 0x6b
 8008bc8:	f7ff fb86 	bl	80082d8 <__assert_func>
 8008bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bd0:	6006      	str	r6, [r0, #0]
 8008bd2:	60c6      	str	r6, [r0, #12]
 8008bd4:	69e6      	ldr	r6, [r4, #28]
 8008bd6:	68f3      	ldr	r3, [r6, #12]
 8008bd8:	b183      	cbz	r3, 8008bfc <_Balloc+0x50>
 8008bda:	69e3      	ldr	r3, [r4, #28]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008be2:	b9b8      	cbnz	r0, 8008c14 <_Balloc+0x68>
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bea:	1d72      	adds	r2, r6, #5
 8008bec:	0092      	lsls	r2, r2, #2
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f001 f865 	bl	8009cbe <_calloc_r>
 8008bf4:	b160      	cbz	r0, 8008c10 <_Balloc+0x64>
 8008bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bfa:	e00e      	b.n	8008c1a <_Balloc+0x6e>
 8008bfc:	2221      	movs	r2, #33	@ 0x21
 8008bfe:	2104      	movs	r1, #4
 8008c00:	4620      	mov	r0, r4
 8008c02:	f001 f85c 	bl	8009cbe <_calloc_r>
 8008c06:	69e3      	ldr	r3, [r4, #28]
 8008c08:	60f0      	str	r0, [r6, #12]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e4      	bne.n	8008bda <_Balloc+0x2e>
 8008c10:	2000      	movs	r0, #0
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	6802      	ldr	r2, [r0, #0]
 8008c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c20:	e7f7      	b.n	8008c12 <_Balloc+0x66>
 8008c22:	bf00      	nop
 8008c24:	0800a35a 	.word	0x0800a35a
 8008c28:	0800a480 	.word	0x0800a480

08008c2c <_Bfree>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	69c6      	ldr	r6, [r0, #28]
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b976      	cbnz	r6, 8008c54 <_Bfree+0x28>
 8008c36:	2010      	movs	r0, #16
 8008c38:	f7ff fef0 	bl	8008a1c <malloc>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	61e8      	str	r0, [r5, #28]
 8008c40:	b920      	cbnz	r0, 8008c4c <_Bfree+0x20>
 8008c42:	4b09      	ldr	r3, [pc, #36]	@ (8008c68 <_Bfree+0x3c>)
 8008c44:	4809      	ldr	r0, [pc, #36]	@ (8008c6c <_Bfree+0x40>)
 8008c46:	218f      	movs	r1, #143	@ 0x8f
 8008c48:	f7ff fb46 	bl	80082d8 <__assert_func>
 8008c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c50:	6006      	str	r6, [r0, #0]
 8008c52:	60c6      	str	r6, [r0, #12]
 8008c54:	b13c      	cbz	r4, 8008c66 <_Bfree+0x3a>
 8008c56:	69eb      	ldr	r3, [r5, #28]
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c60:	6021      	str	r1, [r4, #0]
 8008c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	0800a35a 	.word	0x0800a35a
 8008c6c:	0800a480 	.word	0x0800a480

08008c70 <__multadd>:
 8008c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c74:	690d      	ldr	r5, [r1, #16]
 8008c76:	4607      	mov	r7, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	461e      	mov	r6, r3
 8008c7c:	f101 0c14 	add.w	ip, r1, #20
 8008c80:	2000      	movs	r0, #0
 8008c82:	f8dc 3000 	ldr.w	r3, [ip]
 8008c86:	b299      	uxth	r1, r3
 8008c88:	fb02 6101 	mla	r1, r2, r1, r6
 8008c8c:	0c1e      	lsrs	r6, r3, #16
 8008c8e:	0c0b      	lsrs	r3, r1, #16
 8008c90:	fb02 3306 	mla	r3, r2, r6, r3
 8008c94:	b289      	uxth	r1, r1
 8008c96:	3001      	adds	r0, #1
 8008c98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c9c:	4285      	cmp	r5, r0
 8008c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ca6:	dcec      	bgt.n	8008c82 <__multadd+0x12>
 8008ca8:	b30e      	cbz	r6, 8008cee <__multadd+0x7e>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dc19      	bgt.n	8008ce4 <__multadd+0x74>
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	f7ff ff79 	bl	8008bac <_Balloc>
 8008cba:	4680      	mov	r8, r0
 8008cbc:	b928      	cbnz	r0, 8008cca <__multadd+0x5a>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <__multadd+0x84>)
 8008cc2:	480d      	ldr	r0, [pc, #52]	@ (8008cf8 <__multadd+0x88>)
 8008cc4:	21ba      	movs	r1, #186	@ 0xba
 8008cc6:	f7ff fb07 	bl	80082d8 <__assert_func>
 8008cca:	6922      	ldr	r2, [r4, #16]
 8008ccc:	3202      	adds	r2, #2
 8008cce:	f104 010c 	add.w	r1, r4, #12
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	300c      	adds	r0, #12
 8008cd6:	f7ff fae8 	bl	80082aa <memcpy>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ffa5 	bl	8008c2c <_Bfree>
 8008ce2:	4644      	mov	r4, r8
 8008ce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ce8:	3501      	adds	r5, #1
 8008cea:	615e      	str	r6, [r3, #20]
 8008cec:	6125      	str	r5, [r4, #16]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf4:	0800a40f 	.word	0x0800a40f
 8008cf8:	0800a480 	.word	0x0800a480

08008cfc <__s2b>:
 8008cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d00:	460c      	mov	r4, r1
 8008d02:	4615      	mov	r5, r2
 8008d04:	461f      	mov	r7, r3
 8008d06:	2209      	movs	r2, #9
 8008d08:	3308      	adds	r3, #8
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d10:	2100      	movs	r1, #0
 8008d12:	2201      	movs	r2, #1
 8008d14:	429a      	cmp	r2, r3
 8008d16:	db09      	blt.n	8008d2c <__s2b+0x30>
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff ff47 	bl	8008bac <_Balloc>
 8008d1e:	b940      	cbnz	r0, 8008d32 <__s2b+0x36>
 8008d20:	4602      	mov	r2, r0
 8008d22:	4b19      	ldr	r3, [pc, #100]	@ (8008d88 <__s2b+0x8c>)
 8008d24:	4819      	ldr	r0, [pc, #100]	@ (8008d8c <__s2b+0x90>)
 8008d26:	21d3      	movs	r1, #211	@ 0xd3
 8008d28:	f7ff fad6 	bl	80082d8 <__assert_func>
 8008d2c:	0052      	lsls	r2, r2, #1
 8008d2e:	3101      	adds	r1, #1
 8008d30:	e7f0      	b.n	8008d14 <__s2b+0x18>
 8008d32:	9b08      	ldr	r3, [sp, #32]
 8008d34:	6143      	str	r3, [r0, #20]
 8008d36:	2d09      	cmp	r5, #9
 8008d38:	f04f 0301 	mov.w	r3, #1
 8008d3c:	6103      	str	r3, [r0, #16]
 8008d3e:	dd16      	ble.n	8008d6e <__s2b+0x72>
 8008d40:	f104 0909 	add.w	r9, r4, #9
 8008d44:	46c8      	mov	r8, r9
 8008d46:	442c      	add	r4, r5
 8008d48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	3b30      	subs	r3, #48	@ 0x30
 8008d50:	220a      	movs	r2, #10
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff ff8c 	bl	8008c70 <__multadd>
 8008d58:	45a0      	cmp	r8, r4
 8008d5a:	d1f5      	bne.n	8008d48 <__s2b+0x4c>
 8008d5c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d60:	444c      	add	r4, r9
 8008d62:	1b2d      	subs	r5, r5, r4
 8008d64:	1963      	adds	r3, r4, r5
 8008d66:	42bb      	cmp	r3, r7
 8008d68:	db04      	blt.n	8008d74 <__s2b+0x78>
 8008d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6e:	340a      	adds	r4, #10
 8008d70:	2509      	movs	r5, #9
 8008d72:	e7f6      	b.n	8008d62 <__s2b+0x66>
 8008d74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d78:	4601      	mov	r1, r0
 8008d7a:	3b30      	subs	r3, #48	@ 0x30
 8008d7c:	220a      	movs	r2, #10
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7ff ff76 	bl	8008c70 <__multadd>
 8008d84:	e7ee      	b.n	8008d64 <__s2b+0x68>
 8008d86:	bf00      	nop
 8008d88:	0800a40f 	.word	0x0800a40f
 8008d8c:	0800a480 	.word	0x0800a480

08008d90 <__hi0bits>:
 8008d90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d94:	4603      	mov	r3, r0
 8008d96:	bf36      	itet	cc
 8008d98:	0403      	lslcc	r3, r0, #16
 8008d9a:	2000      	movcs	r0, #0
 8008d9c:	2010      	movcc	r0, #16
 8008d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008da2:	bf3c      	itt	cc
 8008da4:	021b      	lslcc	r3, r3, #8
 8008da6:	3008      	addcc	r0, #8
 8008da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dac:	bf3c      	itt	cc
 8008dae:	011b      	lslcc	r3, r3, #4
 8008db0:	3004      	addcc	r0, #4
 8008db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008db6:	bf3c      	itt	cc
 8008db8:	009b      	lslcc	r3, r3, #2
 8008dba:	3002      	addcc	r0, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	db05      	blt.n	8008dcc <__hi0bits+0x3c>
 8008dc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008dc4:	f100 0001 	add.w	r0, r0, #1
 8008dc8:	bf08      	it	eq
 8008dca:	2020      	moveq	r0, #32
 8008dcc:	4770      	bx	lr

08008dce <__lo0bits>:
 8008dce:	6803      	ldr	r3, [r0, #0]
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	f013 0007 	ands.w	r0, r3, #7
 8008dd6:	d00b      	beq.n	8008df0 <__lo0bits+0x22>
 8008dd8:	07d9      	lsls	r1, r3, #31
 8008dda:	d421      	bmi.n	8008e20 <__lo0bits+0x52>
 8008ddc:	0798      	lsls	r0, r3, #30
 8008dde:	bf49      	itett	mi
 8008de0:	085b      	lsrmi	r3, r3, #1
 8008de2:	089b      	lsrpl	r3, r3, #2
 8008de4:	2001      	movmi	r0, #1
 8008de6:	6013      	strmi	r3, [r2, #0]
 8008de8:	bf5c      	itt	pl
 8008dea:	6013      	strpl	r3, [r2, #0]
 8008dec:	2002      	movpl	r0, #2
 8008dee:	4770      	bx	lr
 8008df0:	b299      	uxth	r1, r3
 8008df2:	b909      	cbnz	r1, 8008df8 <__lo0bits+0x2a>
 8008df4:	0c1b      	lsrs	r3, r3, #16
 8008df6:	2010      	movs	r0, #16
 8008df8:	b2d9      	uxtb	r1, r3
 8008dfa:	b909      	cbnz	r1, 8008e00 <__lo0bits+0x32>
 8008dfc:	3008      	adds	r0, #8
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	0719      	lsls	r1, r3, #28
 8008e02:	bf04      	itt	eq
 8008e04:	091b      	lsreq	r3, r3, #4
 8008e06:	3004      	addeq	r0, #4
 8008e08:	0799      	lsls	r1, r3, #30
 8008e0a:	bf04      	itt	eq
 8008e0c:	089b      	lsreq	r3, r3, #2
 8008e0e:	3002      	addeq	r0, #2
 8008e10:	07d9      	lsls	r1, r3, #31
 8008e12:	d403      	bmi.n	8008e1c <__lo0bits+0x4e>
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	f100 0001 	add.w	r0, r0, #1
 8008e1a:	d003      	beq.n	8008e24 <__lo0bits+0x56>
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	4770      	bx	lr
 8008e20:	2000      	movs	r0, #0
 8008e22:	4770      	bx	lr
 8008e24:	2020      	movs	r0, #32
 8008e26:	4770      	bx	lr

08008e28 <__i2b>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	f7ff febd 	bl	8008bac <_Balloc>
 8008e32:	4602      	mov	r2, r0
 8008e34:	b928      	cbnz	r0, 8008e42 <__i2b+0x1a>
 8008e36:	4b05      	ldr	r3, [pc, #20]	@ (8008e4c <__i2b+0x24>)
 8008e38:	4805      	ldr	r0, [pc, #20]	@ (8008e50 <__i2b+0x28>)
 8008e3a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e3e:	f7ff fa4b 	bl	80082d8 <__assert_func>
 8008e42:	2301      	movs	r3, #1
 8008e44:	6144      	str	r4, [r0, #20]
 8008e46:	6103      	str	r3, [r0, #16]
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	bf00      	nop
 8008e4c:	0800a40f 	.word	0x0800a40f
 8008e50:	0800a480 	.word	0x0800a480

08008e54 <__multiply>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4617      	mov	r7, r2
 8008e5a:	690a      	ldr	r2, [r1, #16]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	bfa8      	it	ge
 8008e62:	463b      	movge	r3, r7
 8008e64:	4689      	mov	r9, r1
 8008e66:	bfa4      	itt	ge
 8008e68:	460f      	movge	r7, r1
 8008e6a:	4699      	movge	r9, r3
 8008e6c:	693d      	ldr	r5, [r7, #16]
 8008e6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6879      	ldr	r1, [r7, #4]
 8008e76:	eb05 060a 	add.w	r6, r5, sl
 8008e7a:	42b3      	cmp	r3, r6
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	bfb8      	it	lt
 8008e80:	3101      	addlt	r1, #1
 8008e82:	f7ff fe93 	bl	8008bac <_Balloc>
 8008e86:	b930      	cbnz	r0, 8008e96 <__multiply+0x42>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	4b41      	ldr	r3, [pc, #260]	@ (8008f90 <__multiply+0x13c>)
 8008e8c:	4841      	ldr	r0, [pc, #260]	@ (8008f94 <__multiply+0x140>)
 8008e8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e92:	f7ff fa21 	bl	80082d8 <__assert_func>
 8008e96:	f100 0414 	add.w	r4, r0, #20
 8008e9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e9e:	4623      	mov	r3, r4
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4573      	cmp	r3, lr
 8008ea4:	d320      	bcc.n	8008ee8 <__multiply+0x94>
 8008ea6:	f107 0814 	add.w	r8, r7, #20
 8008eaa:	f109 0114 	add.w	r1, r9, #20
 8008eae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008eb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	1beb      	subs	r3, r5, r7
 8008eba:	3b15      	subs	r3, #21
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	3715      	adds	r7, #21
 8008ec4:	42bd      	cmp	r5, r7
 8008ec6:	bf38      	it	cc
 8008ec8:	2304      	movcc	r3, #4
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	9103      	str	r1, [sp, #12]
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	d80c      	bhi.n	8008eee <__multiply+0x9a>
 8008ed4:	2e00      	cmp	r6, #0
 8008ed6:	dd03      	ble.n	8008ee0 <__multiply+0x8c>
 8008ed8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d055      	beq.n	8008f8c <__multiply+0x138>
 8008ee0:	6106      	str	r6, [r0, #16]
 8008ee2:	b005      	add	sp, #20
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee8:	f843 2b04 	str.w	r2, [r3], #4
 8008eec:	e7d9      	b.n	8008ea2 <__multiply+0x4e>
 8008eee:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ef2:	f1ba 0f00 	cmp.w	sl, #0
 8008ef6:	d01f      	beq.n	8008f38 <__multiply+0xe4>
 8008ef8:	46c4      	mov	ip, r8
 8008efa:	46a1      	mov	r9, r4
 8008efc:	2700      	movs	r7, #0
 8008efe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f02:	f8d9 3000 	ldr.w	r3, [r9]
 8008f06:	fa1f fb82 	uxth.w	fp, r2
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f10:	443b      	add	r3, r7
 8008f12:	f8d9 7000 	ldr.w	r7, [r9]
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	0c3f      	lsrs	r7, r7, #16
 8008f1a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f28:	4565      	cmp	r5, ip
 8008f2a:	f849 3b04 	str.w	r3, [r9], #4
 8008f2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f32:	d8e4      	bhi.n	8008efe <__multiply+0xaa>
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	50e7      	str	r7, [r4, r3]
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f3e:	3104      	adds	r1, #4
 8008f40:	f1b9 0f00 	cmp.w	r9, #0
 8008f44:	d020      	beq.n	8008f88 <__multiply+0x134>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	4647      	mov	r7, r8
 8008f4a:	46a4      	mov	ip, r4
 8008f4c:	f04f 0a00 	mov.w	sl, #0
 8008f50:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f58:	fb09 220b 	mla	r2, r9, fp, r2
 8008f5c:	4452      	add	r2, sl
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f64:	f84c 3b04 	str.w	r3, [ip], #4
 8008f68:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f70:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f74:	fb09 330a 	mla	r3, r9, sl, r3
 8008f78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f7c:	42bd      	cmp	r5, r7
 8008f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f82:	d8e5      	bhi.n	8008f50 <__multiply+0xfc>
 8008f84:	9a01      	ldr	r2, [sp, #4]
 8008f86:	50a3      	str	r3, [r4, r2]
 8008f88:	3404      	adds	r4, #4
 8008f8a:	e79f      	b.n	8008ecc <__multiply+0x78>
 8008f8c:	3e01      	subs	r6, #1
 8008f8e:	e7a1      	b.n	8008ed4 <__multiply+0x80>
 8008f90:	0800a40f 	.word	0x0800a40f
 8008f94:	0800a480 	.word	0x0800a480

08008f98 <__pow5mult>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	4615      	mov	r5, r2
 8008f9e:	f012 0203 	ands.w	r2, r2, #3
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	d007      	beq.n	8008fb8 <__pow5mult+0x20>
 8008fa8:	4c25      	ldr	r4, [pc, #148]	@ (8009040 <__pow5mult+0xa8>)
 8008faa:	3a01      	subs	r2, #1
 8008fac:	2300      	movs	r3, #0
 8008fae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fb2:	f7ff fe5d 	bl	8008c70 <__multadd>
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	10ad      	asrs	r5, r5, #2
 8008fba:	d03d      	beq.n	8009038 <__pow5mult+0xa0>
 8008fbc:	69fc      	ldr	r4, [r7, #28]
 8008fbe:	b97c      	cbnz	r4, 8008fe0 <__pow5mult+0x48>
 8008fc0:	2010      	movs	r0, #16
 8008fc2:	f7ff fd2b 	bl	8008a1c <malloc>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	61f8      	str	r0, [r7, #28]
 8008fca:	b928      	cbnz	r0, 8008fd8 <__pow5mult+0x40>
 8008fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8009044 <__pow5mult+0xac>)
 8008fce:	481e      	ldr	r0, [pc, #120]	@ (8009048 <__pow5mult+0xb0>)
 8008fd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fd4:	f7ff f980 	bl	80082d8 <__assert_func>
 8008fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fdc:	6004      	str	r4, [r0, #0]
 8008fde:	60c4      	str	r4, [r0, #12]
 8008fe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fe8:	b94c      	cbnz	r4, 8008ffe <__pow5mult+0x66>
 8008fea:	f240 2171 	movw	r1, #625	@ 0x271
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff ff1a 	bl	8008e28 <__i2b>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	f04f 0900 	mov.w	r9, #0
 8009002:	07eb      	lsls	r3, r5, #31
 8009004:	d50a      	bpl.n	800901c <__pow5mult+0x84>
 8009006:	4631      	mov	r1, r6
 8009008:	4622      	mov	r2, r4
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff ff22 	bl	8008e54 <__multiply>
 8009010:	4631      	mov	r1, r6
 8009012:	4680      	mov	r8, r0
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff fe09 	bl	8008c2c <_Bfree>
 800901a:	4646      	mov	r6, r8
 800901c:	106d      	asrs	r5, r5, #1
 800901e:	d00b      	beq.n	8009038 <__pow5mult+0xa0>
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	b938      	cbnz	r0, 8009034 <__pow5mult+0x9c>
 8009024:	4622      	mov	r2, r4
 8009026:	4621      	mov	r1, r4
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ff13 	bl	8008e54 <__multiply>
 800902e:	6020      	str	r0, [r4, #0]
 8009030:	f8c0 9000 	str.w	r9, [r0]
 8009034:	4604      	mov	r4, r0
 8009036:	e7e4      	b.n	8009002 <__pow5mult+0x6a>
 8009038:	4630      	mov	r0, r6
 800903a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903e:	bf00      	nop
 8009040:	0800a560 	.word	0x0800a560
 8009044:	0800a35a 	.word	0x0800a35a
 8009048:	0800a480 	.word	0x0800a480

0800904c <__lshift>:
 800904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009050:	460c      	mov	r4, r1
 8009052:	6849      	ldr	r1, [r1, #4]
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	4607      	mov	r7, r0
 800905e:	4691      	mov	r9, r2
 8009060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009064:	f108 0601 	add.w	r6, r8, #1
 8009068:	42b3      	cmp	r3, r6
 800906a:	db0b      	blt.n	8009084 <__lshift+0x38>
 800906c:	4638      	mov	r0, r7
 800906e:	f7ff fd9d 	bl	8008bac <_Balloc>
 8009072:	4605      	mov	r5, r0
 8009074:	b948      	cbnz	r0, 800908a <__lshift+0x3e>
 8009076:	4602      	mov	r2, r0
 8009078:	4b28      	ldr	r3, [pc, #160]	@ (800911c <__lshift+0xd0>)
 800907a:	4829      	ldr	r0, [pc, #164]	@ (8009120 <__lshift+0xd4>)
 800907c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009080:	f7ff f92a 	bl	80082d8 <__assert_func>
 8009084:	3101      	adds	r1, #1
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	e7ee      	b.n	8009068 <__lshift+0x1c>
 800908a:	2300      	movs	r3, #0
 800908c:	f100 0114 	add.w	r1, r0, #20
 8009090:	f100 0210 	add.w	r2, r0, #16
 8009094:	4618      	mov	r0, r3
 8009096:	4553      	cmp	r3, sl
 8009098:	db33      	blt.n	8009102 <__lshift+0xb6>
 800909a:	6920      	ldr	r0, [r4, #16]
 800909c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090a0:	f104 0314 	add.w	r3, r4, #20
 80090a4:	f019 091f 	ands.w	r9, r9, #31
 80090a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090b0:	d02b      	beq.n	800910a <__lshift+0xbe>
 80090b2:	f1c9 0e20 	rsb	lr, r9, #32
 80090b6:	468a      	mov	sl, r1
 80090b8:	2200      	movs	r2, #0
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	fa00 f009 	lsl.w	r0, r0, r9
 80090c0:	4310      	orrs	r0, r2
 80090c2:	f84a 0b04 	str.w	r0, [sl], #4
 80090c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ca:	459c      	cmp	ip, r3
 80090cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80090d0:	d8f3      	bhi.n	80090ba <__lshift+0x6e>
 80090d2:	ebac 0304 	sub.w	r3, ip, r4
 80090d6:	3b15      	subs	r3, #21
 80090d8:	f023 0303 	bic.w	r3, r3, #3
 80090dc:	3304      	adds	r3, #4
 80090de:	f104 0015 	add.w	r0, r4, #21
 80090e2:	4560      	cmp	r0, ip
 80090e4:	bf88      	it	hi
 80090e6:	2304      	movhi	r3, #4
 80090e8:	50ca      	str	r2, [r1, r3]
 80090ea:	b10a      	cbz	r2, 80090f0 <__lshift+0xa4>
 80090ec:	f108 0602 	add.w	r6, r8, #2
 80090f0:	3e01      	subs	r6, #1
 80090f2:	4638      	mov	r0, r7
 80090f4:	612e      	str	r6, [r5, #16]
 80090f6:	4621      	mov	r1, r4
 80090f8:	f7ff fd98 	bl	8008c2c <_Bfree>
 80090fc:	4628      	mov	r0, r5
 80090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009102:	f842 0f04 	str.w	r0, [r2, #4]!
 8009106:	3301      	adds	r3, #1
 8009108:	e7c5      	b.n	8009096 <__lshift+0x4a>
 800910a:	3904      	subs	r1, #4
 800910c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009110:	f841 2f04 	str.w	r2, [r1, #4]!
 8009114:	459c      	cmp	ip, r3
 8009116:	d8f9      	bhi.n	800910c <__lshift+0xc0>
 8009118:	e7ea      	b.n	80090f0 <__lshift+0xa4>
 800911a:	bf00      	nop
 800911c:	0800a40f 	.word	0x0800a40f
 8009120:	0800a480 	.word	0x0800a480

08009124 <__mcmp>:
 8009124:	690a      	ldr	r2, [r1, #16]
 8009126:	4603      	mov	r3, r0
 8009128:	6900      	ldr	r0, [r0, #16]
 800912a:	1a80      	subs	r0, r0, r2
 800912c:	b530      	push	{r4, r5, lr}
 800912e:	d10e      	bne.n	800914e <__mcmp+0x2a>
 8009130:	3314      	adds	r3, #20
 8009132:	3114      	adds	r1, #20
 8009134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800913c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009144:	4295      	cmp	r5, r2
 8009146:	d003      	beq.n	8009150 <__mcmp+0x2c>
 8009148:	d205      	bcs.n	8009156 <__mcmp+0x32>
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	bd30      	pop	{r4, r5, pc}
 8009150:	42a3      	cmp	r3, r4
 8009152:	d3f3      	bcc.n	800913c <__mcmp+0x18>
 8009154:	e7fb      	b.n	800914e <__mcmp+0x2a>
 8009156:	2001      	movs	r0, #1
 8009158:	e7f9      	b.n	800914e <__mcmp+0x2a>
	...

0800915c <__mdiff>:
 800915c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	4689      	mov	r9, r1
 8009162:	4606      	mov	r6, r0
 8009164:	4611      	mov	r1, r2
 8009166:	4648      	mov	r0, r9
 8009168:	4614      	mov	r4, r2
 800916a:	f7ff ffdb 	bl	8009124 <__mcmp>
 800916e:	1e05      	subs	r5, r0, #0
 8009170:	d112      	bne.n	8009198 <__mdiff+0x3c>
 8009172:	4629      	mov	r1, r5
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff fd19 	bl	8008bac <_Balloc>
 800917a:	4602      	mov	r2, r0
 800917c:	b928      	cbnz	r0, 800918a <__mdiff+0x2e>
 800917e:	4b3f      	ldr	r3, [pc, #252]	@ (800927c <__mdiff+0x120>)
 8009180:	f240 2137 	movw	r1, #567	@ 0x237
 8009184:	483e      	ldr	r0, [pc, #248]	@ (8009280 <__mdiff+0x124>)
 8009186:	f7ff f8a7 	bl	80082d8 <__assert_func>
 800918a:	2301      	movs	r3, #1
 800918c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009190:	4610      	mov	r0, r2
 8009192:	b003      	add	sp, #12
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	bfbc      	itt	lt
 800919a:	464b      	movlt	r3, r9
 800919c:	46a1      	movlt	r9, r4
 800919e:	4630      	mov	r0, r6
 80091a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091a4:	bfba      	itte	lt
 80091a6:	461c      	movlt	r4, r3
 80091a8:	2501      	movlt	r5, #1
 80091aa:	2500      	movge	r5, #0
 80091ac:	f7ff fcfe 	bl	8008bac <_Balloc>
 80091b0:	4602      	mov	r2, r0
 80091b2:	b918      	cbnz	r0, 80091bc <__mdiff+0x60>
 80091b4:	4b31      	ldr	r3, [pc, #196]	@ (800927c <__mdiff+0x120>)
 80091b6:	f240 2145 	movw	r1, #581	@ 0x245
 80091ba:	e7e3      	b.n	8009184 <__mdiff+0x28>
 80091bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091c0:	6926      	ldr	r6, [r4, #16]
 80091c2:	60c5      	str	r5, [r0, #12]
 80091c4:	f109 0310 	add.w	r3, r9, #16
 80091c8:	f109 0514 	add.w	r5, r9, #20
 80091cc:	f104 0e14 	add.w	lr, r4, #20
 80091d0:	f100 0b14 	add.w	fp, r0, #20
 80091d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	46d9      	mov	r9, fp
 80091e0:	f04f 0c00 	mov.w	ip, #0
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	fa1f f38a 	uxth.w	r3, sl
 80091f4:	4619      	mov	r1, r3
 80091f6:	b283      	uxth	r3, r0
 80091f8:	1acb      	subs	r3, r1, r3
 80091fa:	0c00      	lsrs	r0, r0, #16
 80091fc:	4463      	add	r3, ip
 80091fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800920c:	4576      	cmp	r6, lr
 800920e:	f849 3b04 	str.w	r3, [r9], #4
 8009212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009216:	d8e5      	bhi.n	80091e4 <__mdiff+0x88>
 8009218:	1b33      	subs	r3, r6, r4
 800921a:	3b15      	subs	r3, #21
 800921c:	f023 0303 	bic.w	r3, r3, #3
 8009220:	3415      	adds	r4, #21
 8009222:	3304      	adds	r3, #4
 8009224:	42a6      	cmp	r6, r4
 8009226:	bf38      	it	cc
 8009228:	2304      	movcc	r3, #4
 800922a:	441d      	add	r5, r3
 800922c:	445b      	add	r3, fp
 800922e:	461e      	mov	r6, r3
 8009230:	462c      	mov	r4, r5
 8009232:	4544      	cmp	r4, r8
 8009234:	d30e      	bcc.n	8009254 <__mdiff+0xf8>
 8009236:	f108 0103 	add.w	r1, r8, #3
 800923a:	1b49      	subs	r1, r1, r5
 800923c:	f021 0103 	bic.w	r1, r1, #3
 8009240:	3d03      	subs	r5, #3
 8009242:	45a8      	cmp	r8, r5
 8009244:	bf38      	it	cc
 8009246:	2100      	movcc	r1, #0
 8009248:	440b      	add	r3, r1
 800924a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800924e:	b191      	cbz	r1, 8009276 <__mdiff+0x11a>
 8009250:	6117      	str	r7, [r2, #16]
 8009252:	e79d      	b.n	8009190 <__mdiff+0x34>
 8009254:	f854 1b04 	ldr.w	r1, [r4], #4
 8009258:	46e6      	mov	lr, ip
 800925a:	0c08      	lsrs	r0, r1, #16
 800925c:	fa1c fc81 	uxtah	ip, ip, r1
 8009260:	4471      	add	r1, lr
 8009262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009266:	b289      	uxth	r1, r1
 8009268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800926c:	f846 1b04 	str.w	r1, [r6], #4
 8009270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009274:	e7dd      	b.n	8009232 <__mdiff+0xd6>
 8009276:	3f01      	subs	r7, #1
 8009278:	e7e7      	b.n	800924a <__mdiff+0xee>
 800927a:	bf00      	nop
 800927c:	0800a40f 	.word	0x0800a40f
 8009280:	0800a480 	.word	0x0800a480

08009284 <__ulp>:
 8009284:	b082      	sub	sp, #8
 8009286:	ed8d 0b00 	vstr	d0, [sp]
 800928a:	9a01      	ldr	r2, [sp, #4]
 800928c:	4b0f      	ldr	r3, [pc, #60]	@ (80092cc <__ulp+0x48>)
 800928e:	4013      	ands	r3, r2
 8009290:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009294:	2b00      	cmp	r3, #0
 8009296:	dc08      	bgt.n	80092aa <__ulp+0x26>
 8009298:	425b      	negs	r3, r3
 800929a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800929e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092a2:	da04      	bge.n	80092ae <__ulp+0x2a>
 80092a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092a8:	4113      	asrs	r3, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	e008      	b.n	80092c0 <__ulp+0x3c>
 80092ae:	f1a2 0314 	sub.w	r3, r2, #20
 80092b2:	2b1e      	cmp	r3, #30
 80092b4:	bfda      	itte	le
 80092b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092ba:	40da      	lsrle	r2, r3
 80092bc:	2201      	movgt	r2, #1
 80092be:	2300      	movs	r3, #0
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	ec41 0b10 	vmov	d0, r0, r1
 80092c8:	b002      	add	sp, #8
 80092ca:	4770      	bx	lr
 80092cc:	7ff00000 	.word	0x7ff00000

080092d0 <__b2d>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	6906      	ldr	r6, [r0, #16]
 80092d6:	f100 0814 	add.w	r8, r0, #20
 80092da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092de:	1f37      	subs	r7, r6, #4
 80092e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7ff fd53 	bl	8008d90 <__hi0bits>
 80092ea:	f1c0 0320 	rsb	r3, r0, #32
 80092ee:	280a      	cmp	r0, #10
 80092f0:	600b      	str	r3, [r1, #0]
 80092f2:	491b      	ldr	r1, [pc, #108]	@ (8009360 <__b2d+0x90>)
 80092f4:	dc15      	bgt.n	8009322 <__b2d+0x52>
 80092f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80092fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80092fe:	45b8      	cmp	r8, r7
 8009300:	ea43 0501 	orr.w	r5, r3, r1
 8009304:	bf34      	ite	cc
 8009306:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800930a:	2300      	movcs	r3, #0
 800930c:	3015      	adds	r0, #21
 800930e:	fa02 f000 	lsl.w	r0, r2, r0
 8009312:	fa23 f30c 	lsr.w	r3, r3, ip
 8009316:	4303      	orrs	r3, r0
 8009318:	461c      	mov	r4, r3
 800931a:	ec45 4b10 	vmov	d0, r4, r5
 800931e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009322:	45b8      	cmp	r8, r7
 8009324:	bf3a      	itte	cc
 8009326:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800932a:	f1a6 0708 	subcc.w	r7, r6, #8
 800932e:	2300      	movcs	r3, #0
 8009330:	380b      	subs	r0, #11
 8009332:	d012      	beq.n	800935a <__b2d+0x8a>
 8009334:	f1c0 0120 	rsb	r1, r0, #32
 8009338:	fa23 f401 	lsr.w	r4, r3, r1
 800933c:	4082      	lsls	r2, r0
 800933e:	4322      	orrs	r2, r4
 8009340:	4547      	cmp	r7, r8
 8009342:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009346:	bf8c      	ite	hi
 8009348:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800934c:	2200      	movls	r2, #0
 800934e:	4083      	lsls	r3, r0
 8009350:	40ca      	lsrs	r2, r1
 8009352:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009356:	4313      	orrs	r3, r2
 8009358:	e7de      	b.n	8009318 <__b2d+0x48>
 800935a:	ea42 0501 	orr.w	r5, r2, r1
 800935e:	e7db      	b.n	8009318 <__b2d+0x48>
 8009360:	3ff00000 	.word	0x3ff00000

08009364 <__d2b>:
 8009364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009368:	460f      	mov	r7, r1
 800936a:	2101      	movs	r1, #1
 800936c:	ec59 8b10 	vmov	r8, r9, d0
 8009370:	4616      	mov	r6, r2
 8009372:	f7ff fc1b 	bl	8008bac <_Balloc>
 8009376:	4604      	mov	r4, r0
 8009378:	b930      	cbnz	r0, 8009388 <__d2b+0x24>
 800937a:	4602      	mov	r2, r0
 800937c:	4b23      	ldr	r3, [pc, #140]	@ (800940c <__d2b+0xa8>)
 800937e:	4824      	ldr	r0, [pc, #144]	@ (8009410 <__d2b+0xac>)
 8009380:	f240 310f 	movw	r1, #783	@ 0x30f
 8009384:	f7fe ffa8 	bl	80082d8 <__assert_func>
 8009388:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800938c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009390:	b10d      	cbz	r5, 8009396 <__d2b+0x32>
 8009392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	f1b8 0300 	subs.w	r3, r8, #0
 800939c:	d023      	beq.n	80093e6 <__d2b+0x82>
 800939e:	4668      	mov	r0, sp
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	f7ff fd14 	bl	8008dce <__lo0bits>
 80093a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093aa:	b1d0      	cbz	r0, 80093e2 <__d2b+0x7e>
 80093ac:	f1c0 0320 	rsb	r3, r0, #32
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	430b      	orrs	r3, r1
 80093b6:	40c2      	lsrs	r2, r0
 80093b8:	6163      	str	r3, [r4, #20]
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	61a3      	str	r3, [r4, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bf0c      	ite	eq
 80093c4:	2201      	moveq	r2, #1
 80093c6:	2202      	movne	r2, #2
 80093c8:	6122      	str	r2, [r4, #16]
 80093ca:	b1a5      	cbz	r5, 80093f6 <__d2b+0x92>
 80093cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093d0:	4405      	add	r5, r0
 80093d2:	603d      	str	r5, [r7, #0]
 80093d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093d8:	6030      	str	r0, [r6, #0]
 80093da:	4620      	mov	r0, r4
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e2:	6161      	str	r1, [r4, #20]
 80093e4:	e7ea      	b.n	80093bc <__d2b+0x58>
 80093e6:	a801      	add	r0, sp, #4
 80093e8:	f7ff fcf1 	bl	8008dce <__lo0bits>
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	3020      	adds	r0, #32
 80093f2:	2201      	movs	r2, #1
 80093f4:	e7e8      	b.n	80093c8 <__d2b+0x64>
 80093f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093fe:	6038      	str	r0, [r7, #0]
 8009400:	6918      	ldr	r0, [r3, #16]
 8009402:	f7ff fcc5 	bl	8008d90 <__hi0bits>
 8009406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800940a:	e7e5      	b.n	80093d8 <__d2b+0x74>
 800940c:	0800a40f 	.word	0x0800a40f
 8009410:	0800a480 	.word	0x0800a480

08009414 <__ratio>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	b085      	sub	sp, #20
 800941a:	e9cd 1000 	strd	r1, r0, [sp]
 800941e:	a902      	add	r1, sp, #8
 8009420:	f7ff ff56 	bl	80092d0 <__b2d>
 8009424:	9800      	ldr	r0, [sp, #0]
 8009426:	a903      	add	r1, sp, #12
 8009428:	ec55 4b10 	vmov	r4, r5, d0
 800942c:	f7ff ff50 	bl	80092d0 <__b2d>
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	6919      	ldr	r1, [r3, #16]
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	1ac9      	subs	r1, r1, r3
 800943a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800943e:	1a9b      	subs	r3, r3, r2
 8009440:	ec5b ab10 	vmov	sl, fp, d0
 8009444:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfce      	itee	gt
 800944c:	462a      	movgt	r2, r5
 800944e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009452:	465a      	movle	r2, fp
 8009454:	462f      	mov	r7, r5
 8009456:	46d9      	mov	r9, fp
 8009458:	bfcc      	ite	gt
 800945a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800945e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009462:	464b      	mov	r3, r9
 8009464:	4652      	mov	r2, sl
 8009466:	4620      	mov	r0, r4
 8009468:	4639      	mov	r1, r7
 800946a:	f7f7 f9f7 	bl	800085c <__aeabi_ddiv>
 800946e:	ec41 0b10 	vmov	d0, r0, r1
 8009472:	b005      	add	sp, #20
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009478 <__copybits>:
 8009478:	3901      	subs	r1, #1
 800947a:	b570      	push	{r4, r5, r6, lr}
 800947c:	1149      	asrs	r1, r1, #5
 800947e:	6914      	ldr	r4, [r2, #16]
 8009480:	3101      	adds	r1, #1
 8009482:	f102 0314 	add.w	r3, r2, #20
 8009486:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800948a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800948e:	1f05      	subs	r5, r0, #4
 8009490:	42a3      	cmp	r3, r4
 8009492:	d30c      	bcc.n	80094ae <__copybits+0x36>
 8009494:	1aa3      	subs	r3, r4, r2
 8009496:	3b11      	subs	r3, #17
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	3211      	adds	r2, #17
 800949e:	42a2      	cmp	r2, r4
 80094a0:	bf88      	it	hi
 80094a2:	2300      	movhi	r3, #0
 80094a4:	4418      	add	r0, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	4288      	cmp	r0, r1
 80094aa:	d305      	bcc.n	80094b8 <__copybits+0x40>
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80094b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80094b6:	e7eb      	b.n	8009490 <__copybits+0x18>
 80094b8:	f840 3b04 	str.w	r3, [r0], #4
 80094bc:	e7f4      	b.n	80094a8 <__copybits+0x30>

080094be <__any_on>:
 80094be:	f100 0214 	add.w	r2, r0, #20
 80094c2:	6900      	ldr	r0, [r0, #16]
 80094c4:	114b      	asrs	r3, r1, #5
 80094c6:	4298      	cmp	r0, r3
 80094c8:	b510      	push	{r4, lr}
 80094ca:	db11      	blt.n	80094f0 <__any_on+0x32>
 80094cc:	dd0a      	ble.n	80094e4 <__any_on+0x26>
 80094ce:	f011 011f 	ands.w	r1, r1, #31
 80094d2:	d007      	beq.n	80094e4 <__any_on+0x26>
 80094d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094d8:	fa24 f001 	lsr.w	r0, r4, r1
 80094dc:	fa00 f101 	lsl.w	r1, r0, r1
 80094e0:	428c      	cmp	r4, r1
 80094e2:	d10b      	bne.n	80094fc <__any_on+0x3e>
 80094e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d803      	bhi.n	80094f4 <__any_on+0x36>
 80094ec:	2000      	movs	r0, #0
 80094ee:	bd10      	pop	{r4, pc}
 80094f0:	4603      	mov	r3, r0
 80094f2:	e7f7      	b.n	80094e4 <__any_on+0x26>
 80094f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d0f5      	beq.n	80094e8 <__any_on+0x2a>
 80094fc:	2001      	movs	r0, #1
 80094fe:	e7f6      	b.n	80094ee <__any_on+0x30>

08009500 <__ascii_wctomb>:
 8009500:	4603      	mov	r3, r0
 8009502:	4608      	mov	r0, r1
 8009504:	b141      	cbz	r1, 8009518 <__ascii_wctomb+0x18>
 8009506:	2aff      	cmp	r2, #255	@ 0xff
 8009508:	d904      	bls.n	8009514 <__ascii_wctomb+0x14>
 800950a:	228a      	movs	r2, #138	@ 0x8a
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	4770      	bx	lr
 8009514:	700a      	strb	r2, [r1, #0]
 8009516:	2001      	movs	r0, #1
 8009518:	4770      	bx	lr

0800951a <__ssputs_r>:
 800951a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951e:	688e      	ldr	r6, [r1, #8]
 8009520:	461f      	mov	r7, r3
 8009522:	42be      	cmp	r6, r7
 8009524:	680b      	ldr	r3, [r1, #0]
 8009526:	4682      	mov	sl, r0
 8009528:	460c      	mov	r4, r1
 800952a:	4690      	mov	r8, r2
 800952c:	d82d      	bhi.n	800958a <__ssputs_r+0x70>
 800952e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009532:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009536:	d026      	beq.n	8009586 <__ssputs_r+0x6c>
 8009538:	6965      	ldr	r5, [r4, #20]
 800953a:	6909      	ldr	r1, [r1, #16]
 800953c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009540:	eba3 0901 	sub.w	r9, r3, r1
 8009544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009548:	1c7b      	adds	r3, r7, #1
 800954a:	444b      	add	r3, r9
 800954c:	106d      	asrs	r5, r5, #1
 800954e:	429d      	cmp	r5, r3
 8009550:	bf38      	it	cc
 8009552:	461d      	movcc	r5, r3
 8009554:	0553      	lsls	r3, r2, #21
 8009556:	d527      	bpl.n	80095a8 <__ssputs_r+0x8e>
 8009558:	4629      	mov	r1, r5
 800955a:	f7ff fa89 	bl	8008a70 <_malloc_r>
 800955e:	4606      	mov	r6, r0
 8009560:	b360      	cbz	r0, 80095bc <__ssputs_r+0xa2>
 8009562:	6921      	ldr	r1, [r4, #16]
 8009564:	464a      	mov	r2, r9
 8009566:	f7fe fea0 	bl	80082aa <memcpy>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	6126      	str	r6, [r4, #16]
 8009578:	6165      	str	r5, [r4, #20]
 800957a:	444e      	add	r6, r9
 800957c:	eba5 0509 	sub.w	r5, r5, r9
 8009580:	6026      	str	r6, [r4, #0]
 8009582:	60a5      	str	r5, [r4, #8]
 8009584:	463e      	mov	r6, r7
 8009586:	42be      	cmp	r6, r7
 8009588:	d900      	bls.n	800958c <__ssputs_r+0x72>
 800958a:	463e      	mov	r6, r7
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	4632      	mov	r2, r6
 8009590:	4641      	mov	r1, r8
 8009592:	f000 fb63 	bl	8009c5c <memmove>
 8009596:	68a3      	ldr	r3, [r4, #8]
 8009598:	1b9b      	subs	r3, r3, r6
 800959a:	60a3      	str	r3, [r4, #8]
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	4433      	add	r3, r6
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	2000      	movs	r0, #0
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	462a      	mov	r2, r5
 80095aa:	f000 fb9c 	bl	8009ce6 <_realloc_r>
 80095ae:	4606      	mov	r6, r0
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d1e0      	bne.n	8009576 <__ssputs_r+0x5c>
 80095b4:	6921      	ldr	r1, [r4, #16]
 80095b6:	4650      	mov	r0, sl
 80095b8:	f7fe feac 	bl	8008314 <_free_r>
 80095bc:	230c      	movs	r3, #12
 80095be:	f8ca 3000 	str.w	r3, [sl]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	e7e9      	b.n	80095a4 <__ssputs_r+0x8a>

080095d0 <_svfiprintf_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	4698      	mov	r8, r3
 80095d6:	898b      	ldrh	r3, [r1, #12]
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	b09d      	sub	sp, #116	@ 0x74
 80095dc:	4607      	mov	r7, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	d510      	bpl.n	8009606 <_svfiprintf_r+0x36>
 80095e4:	690b      	ldr	r3, [r1, #16]
 80095e6:	b973      	cbnz	r3, 8009606 <_svfiprintf_r+0x36>
 80095e8:	2140      	movs	r1, #64	@ 0x40
 80095ea:	f7ff fa41 	bl	8008a70 <_malloc_r>
 80095ee:	6028      	str	r0, [r5, #0]
 80095f0:	6128      	str	r0, [r5, #16]
 80095f2:	b930      	cbnz	r0, 8009602 <_svfiprintf_r+0x32>
 80095f4:	230c      	movs	r3, #12
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	b01d      	add	sp, #116	@ 0x74
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	2340      	movs	r3, #64	@ 0x40
 8009604:	616b      	str	r3, [r5, #20]
 8009606:	2300      	movs	r3, #0
 8009608:	9309      	str	r3, [sp, #36]	@ 0x24
 800960a:	2320      	movs	r3, #32
 800960c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009610:	f8cd 800c 	str.w	r8, [sp, #12]
 8009614:	2330      	movs	r3, #48	@ 0x30
 8009616:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097b4 <_svfiprintf_r+0x1e4>
 800961a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800961e:	f04f 0901 	mov.w	r9, #1
 8009622:	4623      	mov	r3, r4
 8009624:	469a      	mov	sl, r3
 8009626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800962a:	b10a      	cbz	r2, 8009630 <_svfiprintf_r+0x60>
 800962c:	2a25      	cmp	r2, #37	@ 0x25
 800962e:	d1f9      	bne.n	8009624 <_svfiprintf_r+0x54>
 8009630:	ebba 0b04 	subs.w	fp, sl, r4
 8009634:	d00b      	beq.n	800964e <_svfiprintf_r+0x7e>
 8009636:	465b      	mov	r3, fp
 8009638:	4622      	mov	r2, r4
 800963a:	4629      	mov	r1, r5
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff ff6c 	bl	800951a <__ssputs_r>
 8009642:	3001      	adds	r0, #1
 8009644:	f000 80a7 	beq.w	8009796 <_svfiprintf_r+0x1c6>
 8009648:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800964a:	445a      	add	r2, fp
 800964c:	9209      	str	r2, [sp, #36]	@ 0x24
 800964e:	f89a 3000 	ldrb.w	r3, [sl]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 809f 	beq.w	8009796 <_svfiprintf_r+0x1c6>
 8009658:	2300      	movs	r3, #0
 800965a:	f04f 32ff 	mov.w	r2, #4294967295
 800965e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009662:	f10a 0a01 	add.w	sl, sl, #1
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800966e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009670:	4654      	mov	r4, sl
 8009672:	2205      	movs	r2, #5
 8009674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009678:	484e      	ldr	r0, [pc, #312]	@ (80097b4 <_svfiprintf_r+0x1e4>)
 800967a:	f7f6 fdb9 	bl	80001f0 <memchr>
 800967e:	9a04      	ldr	r2, [sp, #16]
 8009680:	b9d8      	cbnz	r0, 80096ba <_svfiprintf_r+0xea>
 8009682:	06d0      	lsls	r0, r2, #27
 8009684:	bf44      	itt	mi
 8009686:	2320      	movmi	r3, #32
 8009688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800968c:	0711      	lsls	r1, r2, #28
 800968e:	bf44      	itt	mi
 8009690:	232b      	movmi	r3, #43	@ 0x2b
 8009692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009696:	f89a 3000 	ldrb.w	r3, [sl]
 800969a:	2b2a      	cmp	r3, #42	@ 0x2a
 800969c:	d015      	beq.n	80096ca <_svfiprintf_r+0xfa>
 800969e:	9a07      	ldr	r2, [sp, #28]
 80096a0:	4654      	mov	r4, sl
 80096a2:	2000      	movs	r0, #0
 80096a4:	f04f 0c0a 	mov.w	ip, #10
 80096a8:	4621      	mov	r1, r4
 80096aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ae:	3b30      	subs	r3, #48	@ 0x30
 80096b0:	2b09      	cmp	r3, #9
 80096b2:	d94b      	bls.n	800974c <_svfiprintf_r+0x17c>
 80096b4:	b1b0      	cbz	r0, 80096e4 <_svfiprintf_r+0x114>
 80096b6:	9207      	str	r2, [sp, #28]
 80096b8:	e014      	b.n	80096e4 <_svfiprintf_r+0x114>
 80096ba:	eba0 0308 	sub.w	r3, r0, r8
 80096be:	fa09 f303 	lsl.w	r3, r9, r3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	46a2      	mov	sl, r4
 80096c8:	e7d2      	b.n	8009670 <_svfiprintf_r+0xa0>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	1d19      	adds	r1, r3, #4
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bfbb      	ittet	lt
 80096d6:	425b      	neglt	r3, r3
 80096d8:	f042 0202 	orrlt.w	r2, r2, #2
 80096dc:	9307      	strge	r3, [sp, #28]
 80096de:	9307      	strlt	r3, [sp, #28]
 80096e0:	bfb8      	it	lt
 80096e2:	9204      	strlt	r2, [sp, #16]
 80096e4:	7823      	ldrb	r3, [r4, #0]
 80096e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80096e8:	d10a      	bne.n	8009700 <_svfiprintf_r+0x130>
 80096ea:	7863      	ldrb	r3, [r4, #1]
 80096ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80096ee:	d132      	bne.n	8009756 <_svfiprintf_r+0x186>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	1d1a      	adds	r2, r3, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	9203      	str	r2, [sp, #12]
 80096f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096fc:	3402      	adds	r4, #2
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097c4 <_svfiprintf_r+0x1f4>
 8009704:	7821      	ldrb	r1, [r4, #0]
 8009706:	2203      	movs	r2, #3
 8009708:	4650      	mov	r0, sl
 800970a:	f7f6 fd71 	bl	80001f0 <memchr>
 800970e:	b138      	cbz	r0, 8009720 <_svfiprintf_r+0x150>
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	eba0 000a 	sub.w	r0, r0, sl
 8009716:	2240      	movs	r2, #64	@ 0x40
 8009718:	4082      	lsls	r2, r0
 800971a:	4313      	orrs	r3, r2
 800971c:	3401      	adds	r4, #1
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	4824      	ldr	r0, [pc, #144]	@ (80097b8 <_svfiprintf_r+0x1e8>)
 8009726:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800972a:	2206      	movs	r2, #6
 800972c:	f7f6 fd60 	bl	80001f0 <memchr>
 8009730:	2800      	cmp	r0, #0
 8009732:	d036      	beq.n	80097a2 <_svfiprintf_r+0x1d2>
 8009734:	4b21      	ldr	r3, [pc, #132]	@ (80097bc <_svfiprintf_r+0x1ec>)
 8009736:	bb1b      	cbnz	r3, 8009780 <_svfiprintf_r+0x1b0>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	3307      	adds	r3, #7
 800973c:	f023 0307 	bic.w	r3, r3, #7
 8009740:	3308      	adds	r3, #8
 8009742:	9303      	str	r3, [sp, #12]
 8009744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009746:	4433      	add	r3, r6
 8009748:	9309      	str	r3, [sp, #36]	@ 0x24
 800974a:	e76a      	b.n	8009622 <_svfiprintf_r+0x52>
 800974c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009750:	460c      	mov	r4, r1
 8009752:	2001      	movs	r0, #1
 8009754:	e7a8      	b.n	80096a8 <_svfiprintf_r+0xd8>
 8009756:	2300      	movs	r3, #0
 8009758:	3401      	adds	r4, #1
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	4619      	mov	r1, r3
 800975e:	f04f 0c0a 	mov.w	ip, #10
 8009762:	4620      	mov	r0, r4
 8009764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009768:	3a30      	subs	r2, #48	@ 0x30
 800976a:	2a09      	cmp	r2, #9
 800976c:	d903      	bls.n	8009776 <_svfiprintf_r+0x1a6>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0c6      	beq.n	8009700 <_svfiprintf_r+0x130>
 8009772:	9105      	str	r1, [sp, #20]
 8009774:	e7c4      	b.n	8009700 <_svfiprintf_r+0x130>
 8009776:	fb0c 2101 	mla	r1, ip, r1, r2
 800977a:	4604      	mov	r4, r0
 800977c:	2301      	movs	r3, #1
 800977e:	e7f0      	b.n	8009762 <_svfiprintf_r+0x192>
 8009780:	ab03      	add	r3, sp, #12
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	462a      	mov	r2, r5
 8009786:	4b0e      	ldr	r3, [pc, #56]	@ (80097c0 <_svfiprintf_r+0x1f0>)
 8009788:	a904      	add	r1, sp, #16
 800978a:	4638      	mov	r0, r7
 800978c:	f3af 8000 	nop.w
 8009790:	1c42      	adds	r2, r0, #1
 8009792:	4606      	mov	r6, r0
 8009794:	d1d6      	bne.n	8009744 <_svfiprintf_r+0x174>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	065b      	lsls	r3, r3, #25
 800979a:	f53f af2d 	bmi.w	80095f8 <_svfiprintf_r+0x28>
 800979e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097a0:	e72c      	b.n	80095fc <_svfiprintf_r+0x2c>
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	462a      	mov	r2, r5
 80097a8:	4b05      	ldr	r3, [pc, #20]	@ (80097c0 <_svfiprintf_r+0x1f0>)
 80097aa:	a904      	add	r1, sp, #16
 80097ac:	4638      	mov	r0, r7
 80097ae:	f000 f879 	bl	80098a4 <_printf_i>
 80097b2:	e7ed      	b.n	8009790 <_svfiprintf_r+0x1c0>
 80097b4:	0800a4d9 	.word	0x0800a4d9
 80097b8:	0800a4e3 	.word	0x0800a4e3
 80097bc:	00000000 	.word	0x00000000
 80097c0:	0800951b 	.word	0x0800951b
 80097c4:	0800a4df 	.word	0x0800a4df

080097c8 <_printf_common>:
 80097c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	4616      	mov	r6, r2
 80097ce:	4698      	mov	r8, r3
 80097d0:	688a      	ldr	r2, [r1, #8]
 80097d2:	690b      	ldr	r3, [r1, #16]
 80097d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097d8:	4293      	cmp	r3, r2
 80097da:	bfb8      	it	lt
 80097dc:	4613      	movlt	r3, r2
 80097de:	6033      	str	r3, [r6, #0]
 80097e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097e4:	4607      	mov	r7, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	b10a      	cbz	r2, 80097ee <_printf_common+0x26>
 80097ea:	3301      	adds	r3, #1
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	0699      	lsls	r1, r3, #26
 80097f2:	bf42      	ittt	mi
 80097f4:	6833      	ldrmi	r3, [r6, #0]
 80097f6:	3302      	addmi	r3, #2
 80097f8:	6033      	strmi	r3, [r6, #0]
 80097fa:	6825      	ldr	r5, [r4, #0]
 80097fc:	f015 0506 	ands.w	r5, r5, #6
 8009800:	d106      	bne.n	8009810 <_printf_common+0x48>
 8009802:	f104 0a19 	add.w	sl, r4, #25
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	6832      	ldr	r2, [r6, #0]
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	42ab      	cmp	r3, r5
 800980e:	dc26      	bgt.n	800985e <_printf_common+0x96>
 8009810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	3b00      	subs	r3, #0
 8009818:	bf18      	it	ne
 800981a:	2301      	movne	r3, #1
 800981c:	0692      	lsls	r2, r2, #26
 800981e:	d42b      	bmi.n	8009878 <_printf_common+0xb0>
 8009820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009824:	4641      	mov	r1, r8
 8009826:	4638      	mov	r0, r7
 8009828:	47c8      	blx	r9
 800982a:	3001      	adds	r0, #1
 800982c:	d01e      	beq.n	800986c <_printf_common+0xa4>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	6922      	ldr	r2, [r4, #16]
 8009832:	f003 0306 	and.w	r3, r3, #6
 8009836:	2b04      	cmp	r3, #4
 8009838:	bf02      	ittt	eq
 800983a:	68e5      	ldreq	r5, [r4, #12]
 800983c:	6833      	ldreq	r3, [r6, #0]
 800983e:	1aed      	subeq	r5, r5, r3
 8009840:	68a3      	ldr	r3, [r4, #8]
 8009842:	bf0c      	ite	eq
 8009844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009848:	2500      	movne	r5, #0
 800984a:	4293      	cmp	r3, r2
 800984c:	bfc4      	itt	gt
 800984e:	1a9b      	subgt	r3, r3, r2
 8009850:	18ed      	addgt	r5, r5, r3
 8009852:	2600      	movs	r6, #0
 8009854:	341a      	adds	r4, #26
 8009856:	42b5      	cmp	r5, r6
 8009858:	d11a      	bne.n	8009890 <_printf_common+0xc8>
 800985a:	2000      	movs	r0, #0
 800985c:	e008      	b.n	8009870 <_printf_common+0xa8>
 800985e:	2301      	movs	r3, #1
 8009860:	4652      	mov	r2, sl
 8009862:	4641      	mov	r1, r8
 8009864:	4638      	mov	r0, r7
 8009866:	47c8      	blx	r9
 8009868:	3001      	adds	r0, #1
 800986a:	d103      	bne.n	8009874 <_printf_common+0xac>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009874:	3501      	adds	r5, #1
 8009876:	e7c6      	b.n	8009806 <_printf_common+0x3e>
 8009878:	18e1      	adds	r1, r4, r3
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	2030      	movs	r0, #48	@ 0x30
 800987e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009882:	4422      	add	r2, r4
 8009884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800988c:	3302      	adds	r3, #2
 800988e:	e7c7      	b.n	8009820 <_printf_common+0x58>
 8009890:	2301      	movs	r3, #1
 8009892:	4622      	mov	r2, r4
 8009894:	4641      	mov	r1, r8
 8009896:	4638      	mov	r0, r7
 8009898:	47c8      	blx	r9
 800989a:	3001      	adds	r0, #1
 800989c:	d0e6      	beq.n	800986c <_printf_common+0xa4>
 800989e:	3601      	adds	r6, #1
 80098a0:	e7d9      	b.n	8009856 <_printf_common+0x8e>
	...

080098a4 <_printf_i>:
 80098a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	7e0f      	ldrb	r7, [r1, #24]
 80098aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098ac:	2f78      	cmp	r7, #120	@ 0x78
 80098ae:	4691      	mov	r9, r2
 80098b0:	4680      	mov	r8, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	469a      	mov	sl, r3
 80098b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098ba:	d807      	bhi.n	80098cc <_printf_i+0x28>
 80098bc:	2f62      	cmp	r7, #98	@ 0x62
 80098be:	d80a      	bhi.n	80098d6 <_printf_i+0x32>
 80098c0:	2f00      	cmp	r7, #0
 80098c2:	f000 80d1 	beq.w	8009a68 <_printf_i+0x1c4>
 80098c6:	2f58      	cmp	r7, #88	@ 0x58
 80098c8:	f000 80b8 	beq.w	8009a3c <_printf_i+0x198>
 80098cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098d4:	e03a      	b.n	800994c <_printf_i+0xa8>
 80098d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098da:	2b15      	cmp	r3, #21
 80098dc:	d8f6      	bhi.n	80098cc <_printf_i+0x28>
 80098de:	a101      	add	r1, pc, #4	@ (adr r1, 80098e4 <_printf_i+0x40>)
 80098e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098e4:	0800993d 	.word	0x0800993d
 80098e8:	08009951 	.word	0x08009951
 80098ec:	080098cd 	.word	0x080098cd
 80098f0:	080098cd 	.word	0x080098cd
 80098f4:	080098cd 	.word	0x080098cd
 80098f8:	080098cd 	.word	0x080098cd
 80098fc:	08009951 	.word	0x08009951
 8009900:	080098cd 	.word	0x080098cd
 8009904:	080098cd 	.word	0x080098cd
 8009908:	080098cd 	.word	0x080098cd
 800990c:	080098cd 	.word	0x080098cd
 8009910:	08009a4f 	.word	0x08009a4f
 8009914:	0800997b 	.word	0x0800997b
 8009918:	08009a09 	.word	0x08009a09
 800991c:	080098cd 	.word	0x080098cd
 8009920:	080098cd 	.word	0x080098cd
 8009924:	08009a71 	.word	0x08009a71
 8009928:	080098cd 	.word	0x080098cd
 800992c:	0800997b 	.word	0x0800997b
 8009930:	080098cd 	.word	0x080098cd
 8009934:	080098cd 	.word	0x080098cd
 8009938:	08009a11 	.word	0x08009a11
 800993c:	6833      	ldr	r3, [r6, #0]
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6032      	str	r2, [r6, #0]
 8009944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800994c:	2301      	movs	r3, #1
 800994e:	e09c      	b.n	8009a8a <_printf_i+0x1e6>
 8009950:	6833      	ldr	r3, [r6, #0]
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	1d19      	adds	r1, r3, #4
 8009956:	6031      	str	r1, [r6, #0]
 8009958:	0606      	lsls	r6, r0, #24
 800995a:	d501      	bpl.n	8009960 <_printf_i+0xbc>
 800995c:	681d      	ldr	r5, [r3, #0]
 800995e:	e003      	b.n	8009968 <_printf_i+0xc4>
 8009960:	0645      	lsls	r5, r0, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0xb8>
 8009964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009968:	2d00      	cmp	r5, #0
 800996a:	da03      	bge.n	8009974 <_printf_i+0xd0>
 800996c:	232d      	movs	r3, #45	@ 0x2d
 800996e:	426d      	negs	r5, r5
 8009970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009974:	4858      	ldr	r0, [pc, #352]	@ (8009ad8 <_printf_i+0x234>)
 8009976:	230a      	movs	r3, #10
 8009978:	e011      	b.n	800999e <_printf_i+0xfa>
 800997a:	6821      	ldr	r1, [r4, #0]
 800997c:	6833      	ldr	r3, [r6, #0]
 800997e:	0608      	lsls	r0, r1, #24
 8009980:	f853 5b04 	ldr.w	r5, [r3], #4
 8009984:	d402      	bmi.n	800998c <_printf_i+0xe8>
 8009986:	0649      	lsls	r1, r1, #25
 8009988:	bf48      	it	mi
 800998a:	b2ad      	uxthmi	r5, r5
 800998c:	2f6f      	cmp	r7, #111	@ 0x6f
 800998e:	4852      	ldr	r0, [pc, #328]	@ (8009ad8 <_printf_i+0x234>)
 8009990:	6033      	str	r3, [r6, #0]
 8009992:	bf14      	ite	ne
 8009994:	230a      	movne	r3, #10
 8009996:	2308      	moveq	r3, #8
 8009998:	2100      	movs	r1, #0
 800999a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800999e:	6866      	ldr	r6, [r4, #4]
 80099a0:	60a6      	str	r6, [r4, #8]
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	db05      	blt.n	80099b2 <_printf_i+0x10e>
 80099a6:	6821      	ldr	r1, [r4, #0]
 80099a8:	432e      	orrs	r6, r5
 80099aa:	f021 0104 	bic.w	r1, r1, #4
 80099ae:	6021      	str	r1, [r4, #0]
 80099b0:	d04b      	beq.n	8009a4a <_printf_i+0x1a6>
 80099b2:	4616      	mov	r6, r2
 80099b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80099b8:	fb03 5711 	mls	r7, r3, r1, r5
 80099bc:	5dc7      	ldrb	r7, [r0, r7]
 80099be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099c2:	462f      	mov	r7, r5
 80099c4:	42bb      	cmp	r3, r7
 80099c6:	460d      	mov	r5, r1
 80099c8:	d9f4      	bls.n	80099b4 <_printf_i+0x110>
 80099ca:	2b08      	cmp	r3, #8
 80099cc:	d10b      	bne.n	80099e6 <_printf_i+0x142>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	07df      	lsls	r7, r3, #31
 80099d2:	d508      	bpl.n	80099e6 <_printf_i+0x142>
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	6861      	ldr	r1, [r4, #4]
 80099d8:	4299      	cmp	r1, r3
 80099da:	bfde      	ittt	le
 80099dc:	2330      	movle	r3, #48	@ 0x30
 80099de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099e6:	1b92      	subs	r2, r2, r6
 80099e8:	6122      	str	r2, [r4, #16]
 80099ea:	f8cd a000 	str.w	sl, [sp]
 80099ee:	464b      	mov	r3, r9
 80099f0:	aa03      	add	r2, sp, #12
 80099f2:	4621      	mov	r1, r4
 80099f4:	4640      	mov	r0, r8
 80099f6:	f7ff fee7 	bl	80097c8 <_printf_common>
 80099fa:	3001      	adds	r0, #1
 80099fc:	d14a      	bne.n	8009a94 <_printf_i+0x1f0>
 80099fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009a02:	b004      	add	sp, #16
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	f043 0320 	orr.w	r3, r3, #32
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	4832      	ldr	r0, [pc, #200]	@ (8009adc <_printf_i+0x238>)
 8009a12:	2778      	movs	r7, #120	@ 0x78
 8009a14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	6831      	ldr	r1, [r6, #0]
 8009a1c:	061f      	lsls	r7, r3, #24
 8009a1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a22:	d402      	bmi.n	8009a2a <_printf_i+0x186>
 8009a24:	065f      	lsls	r7, r3, #25
 8009a26:	bf48      	it	mi
 8009a28:	b2ad      	uxthmi	r5, r5
 8009a2a:	6031      	str	r1, [r6, #0]
 8009a2c:	07d9      	lsls	r1, r3, #31
 8009a2e:	bf44      	itt	mi
 8009a30:	f043 0320 	orrmi.w	r3, r3, #32
 8009a34:	6023      	strmi	r3, [r4, #0]
 8009a36:	b11d      	cbz	r5, 8009a40 <_printf_i+0x19c>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	e7ad      	b.n	8009998 <_printf_i+0xf4>
 8009a3c:	4826      	ldr	r0, [pc, #152]	@ (8009ad8 <_printf_i+0x234>)
 8009a3e:	e7e9      	b.n	8009a14 <_printf_i+0x170>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	f023 0320 	bic.w	r3, r3, #32
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	e7f6      	b.n	8009a38 <_printf_i+0x194>
 8009a4a:	4616      	mov	r6, r2
 8009a4c:	e7bd      	b.n	80099ca <_printf_i+0x126>
 8009a4e:	6833      	ldr	r3, [r6, #0]
 8009a50:	6825      	ldr	r5, [r4, #0]
 8009a52:	6961      	ldr	r1, [r4, #20]
 8009a54:	1d18      	adds	r0, r3, #4
 8009a56:	6030      	str	r0, [r6, #0]
 8009a58:	062e      	lsls	r6, r5, #24
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	d501      	bpl.n	8009a62 <_printf_i+0x1be>
 8009a5e:	6019      	str	r1, [r3, #0]
 8009a60:	e002      	b.n	8009a68 <_printf_i+0x1c4>
 8009a62:	0668      	lsls	r0, r5, #25
 8009a64:	d5fb      	bpl.n	8009a5e <_printf_i+0x1ba>
 8009a66:	8019      	strh	r1, [r3, #0]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	e7bc      	b.n	80099ea <_printf_i+0x146>
 8009a70:	6833      	ldr	r3, [r6, #0]
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	6032      	str	r2, [r6, #0]
 8009a76:	681e      	ldr	r6, [r3, #0]
 8009a78:	6862      	ldr	r2, [r4, #4]
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7f6 fbb7 	bl	80001f0 <memchr>
 8009a82:	b108      	cbz	r0, 8009a88 <_printf_i+0x1e4>
 8009a84:	1b80      	subs	r0, r0, r6
 8009a86:	6060      	str	r0, [r4, #4]
 8009a88:	6863      	ldr	r3, [r4, #4]
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a92:	e7aa      	b.n	80099ea <_printf_i+0x146>
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	4632      	mov	r2, r6
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	47d0      	blx	sl
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d0ad      	beq.n	80099fe <_printf_i+0x15a>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	079b      	lsls	r3, r3, #30
 8009aa6:	d413      	bmi.n	8009ad0 <_printf_i+0x22c>
 8009aa8:	68e0      	ldr	r0, [r4, #12]
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	4298      	cmp	r0, r3
 8009aae:	bfb8      	it	lt
 8009ab0:	4618      	movlt	r0, r3
 8009ab2:	e7a6      	b.n	8009a02 <_printf_i+0x15e>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4640      	mov	r0, r8
 8009abc:	47d0      	blx	sl
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d09d      	beq.n	80099fe <_printf_i+0x15a>
 8009ac2:	3501      	adds	r5, #1
 8009ac4:	68e3      	ldr	r3, [r4, #12]
 8009ac6:	9903      	ldr	r1, [sp, #12]
 8009ac8:	1a5b      	subs	r3, r3, r1
 8009aca:	42ab      	cmp	r3, r5
 8009acc:	dcf2      	bgt.n	8009ab4 <_printf_i+0x210>
 8009ace:	e7eb      	b.n	8009aa8 <_printf_i+0x204>
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	f104 0619 	add.w	r6, r4, #25
 8009ad6:	e7f5      	b.n	8009ac4 <_printf_i+0x220>
 8009ad8:	0800a4ea 	.word	0x0800a4ea
 8009adc:	0800a4fb 	.word	0x0800a4fb

08009ae0 <__sflush_r>:
 8009ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae8:	0716      	lsls	r6, r2, #28
 8009aea:	4605      	mov	r5, r0
 8009aec:	460c      	mov	r4, r1
 8009aee:	d454      	bmi.n	8009b9a <__sflush_r+0xba>
 8009af0:	684b      	ldr	r3, [r1, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	dc02      	bgt.n	8009afc <__sflush_r+0x1c>
 8009af6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dd48      	ble.n	8009b8e <__sflush_r+0xae>
 8009afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009afe:	2e00      	cmp	r6, #0
 8009b00:	d045      	beq.n	8009b8e <__sflush_r+0xae>
 8009b02:	2300      	movs	r3, #0
 8009b04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b08:	682f      	ldr	r7, [r5, #0]
 8009b0a:	6a21      	ldr	r1, [r4, #32]
 8009b0c:	602b      	str	r3, [r5, #0]
 8009b0e:	d030      	beq.n	8009b72 <__sflush_r+0x92>
 8009b10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	0759      	lsls	r1, r3, #29
 8009b16:	d505      	bpl.n	8009b24 <__sflush_r+0x44>
 8009b18:	6863      	ldr	r3, [r4, #4]
 8009b1a:	1ad2      	subs	r2, r2, r3
 8009b1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b1e:	b10b      	cbz	r3, 8009b24 <__sflush_r+0x44>
 8009b20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b22:	1ad2      	subs	r2, r2, r3
 8009b24:	2300      	movs	r3, #0
 8009b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b28:	6a21      	ldr	r1, [r4, #32]
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b0      	blx	r6
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	d106      	bne.n	8009b42 <__sflush_r+0x62>
 8009b34:	6829      	ldr	r1, [r5, #0]
 8009b36:	291d      	cmp	r1, #29
 8009b38:	d82b      	bhi.n	8009b92 <__sflush_r+0xb2>
 8009b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8009be4 <__sflush_r+0x104>)
 8009b3c:	40ca      	lsrs	r2, r1
 8009b3e:	07d6      	lsls	r6, r2, #31
 8009b40:	d527      	bpl.n	8009b92 <__sflush_r+0xb2>
 8009b42:	2200      	movs	r2, #0
 8009b44:	6062      	str	r2, [r4, #4]
 8009b46:	04d9      	lsls	r1, r3, #19
 8009b48:	6922      	ldr	r2, [r4, #16]
 8009b4a:	6022      	str	r2, [r4, #0]
 8009b4c:	d504      	bpl.n	8009b58 <__sflush_r+0x78>
 8009b4e:	1c42      	adds	r2, r0, #1
 8009b50:	d101      	bne.n	8009b56 <__sflush_r+0x76>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	b903      	cbnz	r3, 8009b58 <__sflush_r+0x78>
 8009b56:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b5a:	602f      	str	r7, [r5, #0]
 8009b5c:	b1b9      	cbz	r1, 8009b8e <__sflush_r+0xae>
 8009b5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d002      	beq.n	8009b6c <__sflush_r+0x8c>
 8009b66:	4628      	mov	r0, r5
 8009b68:	f7fe fbd4 	bl	8008314 <_free_r>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b70:	e00d      	b.n	8009b8e <__sflush_r+0xae>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b0      	blx	r6
 8009b78:	4602      	mov	r2, r0
 8009b7a:	1c50      	adds	r0, r2, #1
 8009b7c:	d1c9      	bne.n	8009b12 <__sflush_r+0x32>
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d0c6      	beq.n	8009b12 <__sflush_r+0x32>
 8009b84:	2b1d      	cmp	r3, #29
 8009b86:	d001      	beq.n	8009b8c <__sflush_r+0xac>
 8009b88:	2b16      	cmp	r3, #22
 8009b8a:	d11e      	bne.n	8009bca <__sflush_r+0xea>
 8009b8c:	602f      	str	r7, [r5, #0]
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e022      	b.n	8009bd8 <__sflush_r+0xf8>
 8009b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b96:	b21b      	sxth	r3, r3
 8009b98:	e01b      	b.n	8009bd2 <__sflush_r+0xf2>
 8009b9a:	690f      	ldr	r7, [r1, #16]
 8009b9c:	2f00      	cmp	r7, #0
 8009b9e:	d0f6      	beq.n	8009b8e <__sflush_r+0xae>
 8009ba0:	0793      	lsls	r3, r2, #30
 8009ba2:	680e      	ldr	r6, [r1, #0]
 8009ba4:	bf08      	it	eq
 8009ba6:	694b      	ldreq	r3, [r1, #20]
 8009ba8:	600f      	str	r7, [r1, #0]
 8009baa:	bf18      	it	ne
 8009bac:	2300      	movne	r3, #0
 8009bae:	eba6 0807 	sub.w	r8, r6, r7
 8009bb2:	608b      	str	r3, [r1, #8]
 8009bb4:	f1b8 0f00 	cmp.w	r8, #0
 8009bb8:	dde9      	ble.n	8009b8e <__sflush_r+0xae>
 8009bba:	6a21      	ldr	r1, [r4, #32]
 8009bbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bbe:	4643      	mov	r3, r8
 8009bc0:	463a      	mov	r2, r7
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b0      	blx	r6
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	dc08      	bgt.n	8009bdc <__sflush_r+0xfc>
 8009bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bdc:	4407      	add	r7, r0
 8009bde:	eba8 0800 	sub.w	r8, r8, r0
 8009be2:	e7e7      	b.n	8009bb4 <__sflush_r+0xd4>
 8009be4:	20400001 	.word	0x20400001

08009be8 <_fflush_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	690b      	ldr	r3, [r1, #16]
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	b913      	cbnz	r3, 8009bf8 <_fflush_r+0x10>
 8009bf2:	2500      	movs	r5, #0
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	b118      	cbz	r0, 8009c02 <_fflush_r+0x1a>
 8009bfa:	6a03      	ldr	r3, [r0, #32]
 8009bfc:	b90b      	cbnz	r3, 8009c02 <_fflush_r+0x1a>
 8009bfe:	f7fe f9bb 	bl	8007f78 <__sinit>
 8009c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0f3      	beq.n	8009bf2 <_fflush_r+0xa>
 8009c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c0c:	07d0      	lsls	r0, r2, #31
 8009c0e:	d404      	bmi.n	8009c1a <_fflush_r+0x32>
 8009c10:	0599      	lsls	r1, r3, #22
 8009c12:	d402      	bmi.n	8009c1a <_fflush_r+0x32>
 8009c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c16:	f7fe fb46 	bl	80082a6 <__retarget_lock_acquire_recursive>
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	f7ff ff5f 	bl	8009ae0 <__sflush_r>
 8009c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c24:	07da      	lsls	r2, r3, #31
 8009c26:	4605      	mov	r5, r0
 8009c28:	d4e4      	bmi.n	8009bf4 <_fflush_r+0xc>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	059b      	lsls	r3, r3, #22
 8009c2e:	d4e1      	bmi.n	8009bf4 <_fflush_r+0xc>
 8009c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c32:	f7fe fb39 	bl	80082a8 <__retarget_lock_release_recursive>
 8009c36:	e7dd      	b.n	8009bf4 <_fflush_r+0xc>

08009c38 <fiprintf>:
 8009c38:	b40e      	push	{r1, r2, r3}
 8009c3a:	b503      	push	{r0, r1, lr}
 8009c3c:	4601      	mov	r1, r0
 8009c3e:	ab03      	add	r3, sp, #12
 8009c40:	4805      	ldr	r0, [pc, #20]	@ (8009c58 <fiprintf+0x20>)
 8009c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c46:	6800      	ldr	r0, [r0, #0]
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	f000 f8a3 	bl	8009d94 <_vfiprintf_r>
 8009c4e:	b002      	add	sp, #8
 8009c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c54:	b003      	add	sp, #12
 8009c56:	4770      	bx	lr
 8009c58:	200001d4 	.word	0x200001d4

08009c5c <memmove>:
 8009c5c:	4288      	cmp	r0, r1
 8009c5e:	b510      	push	{r4, lr}
 8009c60:	eb01 0402 	add.w	r4, r1, r2
 8009c64:	d902      	bls.n	8009c6c <memmove+0x10>
 8009c66:	4284      	cmp	r4, r0
 8009c68:	4623      	mov	r3, r4
 8009c6a:	d807      	bhi.n	8009c7c <memmove+0x20>
 8009c6c:	1e43      	subs	r3, r0, #1
 8009c6e:	42a1      	cmp	r1, r4
 8009c70:	d008      	beq.n	8009c84 <memmove+0x28>
 8009c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c7a:	e7f8      	b.n	8009c6e <memmove+0x12>
 8009c7c:	4402      	add	r2, r0
 8009c7e:	4601      	mov	r1, r0
 8009c80:	428a      	cmp	r2, r1
 8009c82:	d100      	bne.n	8009c86 <memmove+0x2a>
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c8e:	e7f7      	b.n	8009c80 <memmove+0x24>

08009c90 <_sbrk_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d06      	ldr	r5, [pc, #24]	@ (8009cac <_sbrk_r+0x1c>)
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	f7f8 ffde 	bl	8002c5c <_sbrk>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_sbrk_r+0x1a>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_sbrk_r+0x1a>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	200008b0 	.word	0x200008b0

08009cb0 <abort>:
 8009cb0:	b508      	push	{r3, lr}
 8009cb2:	2006      	movs	r0, #6
 8009cb4:	f000 fa42 	bl	800a13c <raise>
 8009cb8:	2001      	movs	r0, #1
 8009cba:	f7f8 ff57 	bl	8002b6c <_exit>

08009cbe <_calloc_r>:
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	fba1 5402 	umull	r5, r4, r1, r2
 8009cc4:	b934      	cbnz	r4, 8009cd4 <_calloc_r+0x16>
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7fe fed2 	bl	8008a70 <_malloc_r>
 8009ccc:	4606      	mov	r6, r0
 8009cce:	b928      	cbnz	r0, 8009cdc <_calloc_r+0x1e>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	220c      	movs	r2, #12
 8009cd6:	6002      	str	r2, [r0, #0]
 8009cd8:	2600      	movs	r6, #0
 8009cda:	e7f9      	b.n	8009cd0 <_calloc_r+0x12>
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4621      	mov	r1, r4
 8009ce0:	f7fe f9f9 	bl	80080d6 <memset>
 8009ce4:	e7f4      	b.n	8009cd0 <_calloc_r+0x12>

08009ce6 <_realloc_r>:
 8009ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	4607      	mov	r7, r0
 8009cec:	4614      	mov	r4, r2
 8009cee:	460d      	mov	r5, r1
 8009cf0:	b921      	cbnz	r1, 8009cfc <_realloc_r+0x16>
 8009cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	f7fe beba 	b.w	8008a70 <_malloc_r>
 8009cfc:	b92a      	cbnz	r2, 8009d0a <_realloc_r+0x24>
 8009cfe:	f7fe fb09 	bl	8008314 <_free_r>
 8009d02:	4625      	mov	r5, r4
 8009d04:	4628      	mov	r0, r5
 8009d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0a:	f000 fa33 	bl	800a174 <_malloc_usable_size_r>
 8009d0e:	4284      	cmp	r4, r0
 8009d10:	4606      	mov	r6, r0
 8009d12:	d802      	bhi.n	8009d1a <_realloc_r+0x34>
 8009d14:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d18:	d8f4      	bhi.n	8009d04 <_realloc_r+0x1e>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	f7fe fea7 	bl	8008a70 <_malloc_r>
 8009d22:	4680      	mov	r8, r0
 8009d24:	b908      	cbnz	r0, 8009d2a <_realloc_r+0x44>
 8009d26:	4645      	mov	r5, r8
 8009d28:	e7ec      	b.n	8009d04 <_realloc_r+0x1e>
 8009d2a:	42b4      	cmp	r4, r6
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	bf28      	it	cs
 8009d32:	4632      	movcs	r2, r6
 8009d34:	f7fe fab9 	bl	80082aa <memcpy>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	f7fe faea 	bl	8008314 <_free_r>
 8009d40:	e7f1      	b.n	8009d26 <_realloc_r+0x40>

08009d42 <__sfputc_r>:
 8009d42:	6893      	ldr	r3, [r2, #8]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	b410      	push	{r4}
 8009d4a:	6093      	str	r3, [r2, #8]
 8009d4c:	da08      	bge.n	8009d60 <__sfputc_r+0x1e>
 8009d4e:	6994      	ldr	r4, [r2, #24]
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	db01      	blt.n	8009d58 <__sfputc_r+0x16>
 8009d54:	290a      	cmp	r1, #10
 8009d56:	d103      	bne.n	8009d60 <__sfputc_r+0x1e>
 8009d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d5c:	f000 b932 	b.w	8009fc4 <__swbuf_r>
 8009d60:	6813      	ldr	r3, [r2, #0]
 8009d62:	1c58      	adds	r0, r3, #1
 8009d64:	6010      	str	r0, [r2, #0]
 8009d66:	7019      	strb	r1, [r3, #0]
 8009d68:	4608      	mov	r0, r1
 8009d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <__sfputs_r>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	4614      	mov	r4, r2
 8009d78:	18d5      	adds	r5, r2, r3
 8009d7a:	42ac      	cmp	r4, r5
 8009d7c:	d101      	bne.n	8009d82 <__sfputs_r+0x12>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e007      	b.n	8009d92 <__sfputs_r+0x22>
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	463a      	mov	r2, r7
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff ffda 	bl	8009d42 <__sfputc_r>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d1f3      	bne.n	8009d7a <__sfputs_r+0xa>
 8009d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d94 <_vfiprintf_r>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	460d      	mov	r5, r1
 8009d9a:	b09d      	sub	sp, #116	@ 0x74
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	4698      	mov	r8, r3
 8009da0:	4606      	mov	r6, r0
 8009da2:	b118      	cbz	r0, 8009dac <_vfiprintf_r+0x18>
 8009da4:	6a03      	ldr	r3, [r0, #32]
 8009da6:	b90b      	cbnz	r3, 8009dac <_vfiprintf_r+0x18>
 8009da8:	f7fe f8e6 	bl	8007f78 <__sinit>
 8009dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dae:	07d9      	lsls	r1, r3, #31
 8009db0:	d405      	bmi.n	8009dbe <_vfiprintf_r+0x2a>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	059a      	lsls	r2, r3, #22
 8009db6:	d402      	bmi.n	8009dbe <_vfiprintf_r+0x2a>
 8009db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dba:	f7fe fa74 	bl	80082a6 <__retarget_lock_acquire_recursive>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	071b      	lsls	r3, r3, #28
 8009dc2:	d501      	bpl.n	8009dc8 <_vfiprintf_r+0x34>
 8009dc4:	692b      	ldr	r3, [r5, #16]
 8009dc6:	b99b      	cbnz	r3, 8009df0 <_vfiprintf_r+0x5c>
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f938 	bl	800a040 <__swsetup_r>
 8009dd0:	b170      	cbz	r0, 8009df0 <_vfiprintf_r+0x5c>
 8009dd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dd4:	07dc      	lsls	r4, r3, #31
 8009dd6:	d504      	bpl.n	8009de2 <_vfiprintf_r+0x4e>
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	b01d      	add	sp, #116	@ 0x74
 8009dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	0598      	lsls	r0, r3, #22
 8009de6:	d4f7      	bmi.n	8009dd8 <_vfiprintf_r+0x44>
 8009de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dea:	f7fe fa5d 	bl	80082a8 <__retarget_lock_release_recursive>
 8009dee:	e7f3      	b.n	8009dd8 <_vfiprintf_r+0x44>
 8009df0:	2300      	movs	r3, #0
 8009df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df4:	2320      	movs	r3, #32
 8009df6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfe:	2330      	movs	r3, #48	@ 0x30
 8009e00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fb0 <_vfiprintf_r+0x21c>
 8009e04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e08:	f04f 0901 	mov.w	r9, #1
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	469a      	mov	sl, r3
 8009e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e14:	b10a      	cbz	r2, 8009e1a <_vfiprintf_r+0x86>
 8009e16:	2a25      	cmp	r2, #37	@ 0x25
 8009e18:	d1f9      	bne.n	8009e0e <_vfiprintf_r+0x7a>
 8009e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e1e:	d00b      	beq.n	8009e38 <_vfiprintf_r+0xa4>
 8009e20:	465b      	mov	r3, fp
 8009e22:	4622      	mov	r2, r4
 8009e24:	4629      	mov	r1, r5
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ffa2 	bl	8009d70 <__sfputs_r>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f000 80a7 	beq.w	8009f80 <_vfiprintf_r+0x1ec>
 8009e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e34:	445a      	add	r2, fp
 8009e36:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e38:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 809f 	beq.w	8009f80 <_vfiprintf_r+0x1ec>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e4c:	f10a 0a01 	add.w	sl, sl, #1
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	9307      	str	r3, [sp, #28]
 8009e54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e58:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e5a:	4654      	mov	r4, sl
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e62:	4853      	ldr	r0, [pc, #332]	@ (8009fb0 <_vfiprintf_r+0x21c>)
 8009e64:	f7f6 f9c4 	bl	80001f0 <memchr>
 8009e68:	9a04      	ldr	r2, [sp, #16]
 8009e6a:	b9d8      	cbnz	r0, 8009ea4 <_vfiprintf_r+0x110>
 8009e6c:	06d1      	lsls	r1, r2, #27
 8009e6e:	bf44      	itt	mi
 8009e70:	2320      	movmi	r3, #32
 8009e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e76:	0713      	lsls	r3, r2, #28
 8009e78:	bf44      	itt	mi
 8009e7a:	232b      	movmi	r3, #43	@ 0x2b
 8009e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e80:	f89a 3000 	ldrb.w	r3, [sl]
 8009e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e86:	d015      	beq.n	8009eb4 <_vfiprintf_r+0x120>
 8009e88:	9a07      	ldr	r2, [sp, #28]
 8009e8a:	4654      	mov	r4, sl
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f04f 0c0a 	mov.w	ip, #10
 8009e92:	4621      	mov	r1, r4
 8009e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e98:	3b30      	subs	r3, #48	@ 0x30
 8009e9a:	2b09      	cmp	r3, #9
 8009e9c:	d94b      	bls.n	8009f36 <_vfiprintf_r+0x1a2>
 8009e9e:	b1b0      	cbz	r0, 8009ece <_vfiprintf_r+0x13a>
 8009ea0:	9207      	str	r2, [sp, #28]
 8009ea2:	e014      	b.n	8009ece <_vfiprintf_r+0x13a>
 8009ea4:	eba0 0308 	sub.w	r3, r0, r8
 8009ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8009eac:	4313      	orrs	r3, r2
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	46a2      	mov	sl, r4
 8009eb2:	e7d2      	b.n	8009e5a <_vfiprintf_r+0xc6>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	1d19      	adds	r1, r3, #4
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	9103      	str	r1, [sp, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfbb      	ittet	lt
 8009ec0:	425b      	neglt	r3, r3
 8009ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec6:	9307      	strge	r3, [sp, #28]
 8009ec8:	9307      	strlt	r3, [sp, #28]
 8009eca:	bfb8      	it	lt
 8009ecc:	9204      	strlt	r2, [sp, #16]
 8009ece:	7823      	ldrb	r3, [r4, #0]
 8009ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ed2:	d10a      	bne.n	8009eea <_vfiprintf_r+0x156>
 8009ed4:	7863      	ldrb	r3, [r4, #1]
 8009ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed8:	d132      	bne.n	8009f40 <_vfiprintf_r+0x1ac>
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	1d1a      	adds	r2, r3, #4
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	9203      	str	r2, [sp, #12]
 8009ee2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ee6:	3402      	adds	r4, #2
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fc0 <_vfiprintf_r+0x22c>
 8009eee:	7821      	ldrb	r1, [r4, #0]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	f7f6 f97c 	bl	80001f0 <memchr>
 8009ef8:	b138      	cbz	r0, 8009f0a <_vfiprintf_r+0x176>
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	eba0 000a 	sub.w	r0, r0, sl
 8009f00:	2240      	movs	r2, #64	@ 0x40
 8009f02:	4082      	lsls	r2, r0
 8009f04:	4313      	orrs	r3, r2
 8009f06:	3401      	adds	r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4829      	ldr	r0, [pc, #164]	@ (8009fb4 <_vfiprintf_r+0x220>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f14:	2206      	movs	r2, #6
 8009f16:	f7f6 f96b 	bl	80001f0 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d03f      	beq.n	8009f9e <_vfiprintf_r+0x20a>
 8009f1e:	4b26      	ldr	r3, [pc, #152]	@ (8009fb8 <_vfiprintf_r+0x224>)
 8009f20:	bb1b      	cbnz	r3, 8009f6a <_vfiprintf_r+0x1d6>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f30:	443b      	add	r3, r7
 8009f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f34:	e76a      	b.n	8009e0c <_vfiprintf_r+0x78>
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7a8      	b.n	8009e92 <_vfiprintf_r+0xfe>
 8009f40:	2300      	movs	r3, #0
 8009f42:	3401      	adds	r4, #1
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f52:	3a30      	subs	r2, #48	@ 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d903      	bls.n	8009f60 <_vfiprintf_r+0x1cc>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c6      	beq.n	8009eea <_vfiprintf_r+0x156>
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	e7c4      	b.n	8009eea <_vfiprintf_r+0x156>
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	4604      	mov	r4, r0
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7f0      	b.n	8009f4c <_vfiprintf_r+0x1b8>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b12      	ldr	r3, [pc, #72]	@ (8009fbc <_vfiprintf_r+0x228>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4630      	mov	r0, r6
 8009f76:	f3af 8000 	nop.w
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	1c78      	adds	r0, r7, #1
 8009f7e:	d1d6      	bne.n	8009f2e <_vfiprintf_r+0x19a>
 8009f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f82:	07d9      	lsls	r1, r3, #31
 8009f84:	d405      	bmi.n	8009f92 <_vfiprintf_r+0x1fe>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	059a      	lsls	r2, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_vfiprintf_r+0x1fe>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f8e:	f7fe f98b 	bl	80082a8 <__retarget_lock_release_recursive>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	065b      	lsls	r3, r3, #25
 8009f96:	f53f af1f 	bmi.w	8009dd8 <_vfiprintf_r+0x44>
 8009f9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f9c:	e71e      	b.n	8009ddc <_vfiprintf_r+0x48>
 8009f9e:	ab03      	add	r3, sp, #12
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	4b05      	ldr	r3, [pc, #20]	@ (8009fbc <_vfiprintf_r+0x228>)
 8009fa6:	a904      	add	r1, sp, #16
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff fc7b 	bl	80098a4 <_printf_i>
 8009fae:	e7e4      	b.n	8009f7a <_vfiprintf_r+0x1e6>
 8009fb0:	0800a4d9 	.word	0x0800a4d9
 8009fb4:	0800a4e3 	.word	0x0800a4e3
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	08009d71 	.word	0x08009d71
 8009fc0:	0800a4df 	.word	0x0800a4df

08009fc4 <__swbuf_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	4605      	mov	r5, r0
 8009fcc:	b118      	cbz	r0, 8009fd6 <__swbuf_r+0x12>
 8009fce:	6a03      	ldr	r3, [r0, #32]
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <__swbuf_r+0x12>
 8009fd2:	f7fd ffd1 	bl	8007f78 <__sinit>
 8009fd6:	69a3      	ldr	r3, [r4, #24]
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	071a      	lsls	r2, r3, #28
 8009fde:	d501      	bpl.n	8009fe4 <__swbuf_r+0x20>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	b943      	cbnz	r3, 8009ff6 <__swbuf_r+0x32>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f82a 	bl	800a040 <__swsetup_r>
 8009fec:	b118      	cbz	r0, 8009ff6 <__swbuf_r+0x32>
 8009fee:	f04f 37ff 	mov.w	r7, #4294967295
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	6922      	ldr	r2, [r4, #16]
 8009ffa:	1a98      	subs	r0, r3, r2
 8009ffc:	6963      	ldr	r3, [r4, #20]
 8009ffe:	b2f6      	uxtb	r6, r6
 800a000:	4283      	cmp	r3, r0
 800a002:	4637      	mov	r7, r6
 800a004:	dc05      	bgt.n	800a012 <__swbuf_r+0x4e>
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f7ff fded 	bl	8009be8 <_fflush_r>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d1ed      	bne.n	8009fee <__swbuf_r+0x2a>
 800a012:	68a3      	ldr	r3, [r4, #8]
 800a014:	3b01      	subs	r3, #1
 800a016:	60a3      	str	r3, [r4, #8]
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	6022      	str	r2, [r4, #0]
 800a01e:	701e      	strb	r6, [r3, #0]
 800a020:	6962      	ldr	r2, [r4, #20]
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	429a      	cmp	r2, r3
 800a026:	d004      	beq.n	800a032 <__swbuf_r+0x6e>
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	07db      	lsls	r3, r3, #31
 800a02c:	d5e1      	bpl.n	8009ff2 <__swbuf_r+0x2e>
 800a02e:	2e0a      	cmp	r6, #10
 800a030:	d1df      	bne.n	8009ff2 <__swbuf_r+0x2e>
 800a032:	4621      	mov	r1, r4
 800a034:	4628      	mov	r0, r5
 800a036:	f7ff fdd7 	bl	8009be8 <_fflush_r>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d0d9      	beq.n	8009ff2 <__swbuf_r+0x2e>
 800a03e:	e7d6      	b.n	8009fee <__swbuf_r+0x2a>

0800a040 <__swsetup_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4b29      	ldr	r3, [pc, #164]	@ (800a0e8 <__swsetup_r+0xa8>)
 800a044:	4605      	mov	r5, r0
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	460c      	mov	r4, r1
 800a04a:	b118      	cbz	r0, 800a054 <__swsetup_r+0x14>
 800a04c:	6a03      	ldr	r3, [r0, #32]
 800a04e:	b90b      	cbnz	r3, 800a054 <__swsetup_r+0x14>
 800a050:	f7fd ff92 	bl	8007f78 <__sinit>
 800a054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a058:	0719      	lsls	r1, r3, #28
 800a05a:	d422      	bmi.n	800a0a2 <__swsetup_r+0x62>
 800a05c:	06da      	lsls	r2, r3, #27
 800a05e:	d407      	bmi.n	800a070 <__swsetup_r+0x30>
 800a060:	2209      	movs	r2, #9
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	f04f 30ff 	mov.w	r0, #4294967295
 800a06e:	e033      	b.n	800a0d8 <__swsetup_r+0x98>
 800a070:	0758      	lsls	r0, r3, #29
 800a072:	d512      	bpl.n	800a09a <__swsetup_r+0x5a>
 800a074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a076:	b141      	cbz	r1, 800a08a <__swsetup_r+0x4a>
 800a078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d002      	beq.n	800a086 <__swsetup_r+0x46>
 800a080:	4628      	mov	r0, r5
 800a082:	f7fe f947 	bl	8008314 <_free_r>
 800a086:	2300      	movs	r3, #0
 800a088:	6363      	str	r3, [r4, #52]	@ 0x34
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	2300      	movs	r3, #0
 800a094:	6063      	str	r3, [r4, #4]
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f043 0308 	orr.w	r3, r3, #8
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	b94b      	cbnz	r3, 800a0ba <__swsetup_r+0x7a>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0b0:	d003      	beq.n	800a0ba <__swsetup_r+0x7a>
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 f88b 	bl	800a1d0 <__smakebuf_r>
 800a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0be:	f013 0201 	ands.w	r2, r3, #1
 800a0c2:	d00a      	beq.n	800a0da <__swsetup_r+0x9a>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	60a2      	str	r2, [r4, #8]
 800a0c8:	6962      	ldr	r2, [r4, #20]
 800a0ca:	4252      	negs	r2, r2
 800a0cc:	61a2      	str	r2, [r4, #24]
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	b942      	cbnz	r2, 800a0e4 <__swsetup_r+0xa4>
 800a0d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0d6:	d1c5      	bne.n	800a064 <__swsetup_r+0x24>
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	0799      	lsls	r1, r3, #30
 800a0dc:	bf58      	it	pl
 800a0de:	6962      	ldrpl	r2, [r4, #20]
 800a0e0:	60a2      	str	r2, [r4, #8]
 800a0e2:	e7f4      	b.n	800a0ce <__swsetup_r+0x8e>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e7f7      	b.n	800a0d8 <__swsetup_r+0x98>
 800a0e8:	200001d4 	.word	0x200001d4

0800a0ec <_raise_r>:
 800a0ec:	291f      	cmp	r1, #31
 800a0ee:	b538      	push	{r3, r4, r5, lr}
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	d904      	bls.n	800a100 <_raise_r+0x14>
 800a0f6:	2316      	movs	r3, #22
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a102:	b112      	cbz	r2, 800a10a <_raise_r+0x1e>
 800a104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a108:	b94b      	cbnz	r3, 800a11e <_raise_r+0x32>
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 f830 	bl	800a170 <_getpid_r>
 800a110:	4622      	mov	r2, r4
 800a112:	4601      	mov	r1, r0
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11a:	f000 b817 	b.w	800a14c <_kill_r>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d00a      	beq.n	800a138 <_raise_r+0x4c>
 800a122:	1c59      	adds	r1, r3, #1
 800a124:	d103      	bne.n	800a12e <_raise_r+0x42>
 800a126:	2316      	movs	r3, #22
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	2001      	movs	r0, #1
 800a12c:	e7e7      	b.n	800a0fe <_raise_r+0x12>
 800a12e:	2100      	movs	r1, #0
 800a130:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a134:	4620      	mov	r0, r4
 800a136:	4798      	blx	r3
 800a138:	2000      	movs	r0, #0
 800a13a:	e7e0      	b.n	800a0fe <_raise_r+0x12>

0800a13c <raise>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	@ (800a148 <raise+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f7ff bfd3 	b.w	800a0ec <_raise_r>
 800a146:	bf00      	nop
 800a148:	200001d4 	.word	0x200001d4

0800a14c <_kill_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	@ (800a16c <_kill_r+0x20>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	f7f8 fcf7 	bl	8002b4c <_kill>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d102      	bne.n	800a168 <_kill_r+0x1c>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	b103      	cbz	r3, 800a168 <_kill_r+0x1c>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	200008b0 	.word	0x200008b0

0800a170 <_getpid_r>:
 800a170:	f7f8 bce4 	b.w	8002b3c <_getpid>

0800a174 <_malloc_usable_size_r>:
 800a174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a178:	1f18      	subs	r0, r3, #4
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	bfbc      	itt	lt
 800a17e:	580b      	ldrlt	r3, [r1, r0]
 800a180:	18c0      	addlt	r0, r0, r3
 800a182:	4770      	bx	lr

0800a184 <__swhatbuf_r>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	460c      	mov	r4, r1
 800a188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18c:	2900      	cmp	r1, #0
 800a18e:	b096      	sub	sp, #88	@ 0x58
 800a190:	4615      	mov	r5, r2
 800a192:	461e      	mov	r6, r3
 800a194:	da0d      	bge.n	800a1b2 <__swhatbuf_r+0x2e>
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a19c:	f04f 0100 	mov.w	r1, #0
 800a1a0:	bf14      	ite	ne
 800a1a2:	2340      	movne	r3, #64	@ 0x40
 800a1a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	6031      	str	r1, [r6, #0]
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	b016      	add	sp, #88	@ 0x58
 800a1b0:	bd70      	pop	{r4, r5, r6, pc}
 800a1b2:	466a      	mov	r2, sp
 800a1b4:	f000 f848 	bl	800a248 <_fstat_r>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	dbec      	blt.n	800a196 <__swhatbuf_r+0x12>
 800a1bc:	9901      	ldr	r1, [sp, #4]
 800a1be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1c6:	4259      	negs	r1, r3
 800a1c8:	4159      	adcs	r1, r3
 800a1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1ce:	e7eb      	b.n	800a1a8 <__swhatbuf_r+0x24>

0800a1d0 <__smakebuf_r>:
 800a1d0:	898b      	ldrh	r3, [r1, #12]
 800a1d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d4:	079d      	lsls	r5, r3, #30
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460c      	mov	r4, r1
 800a1da:	d507      	bpl.n	800a1ec <__smakebuf_r+0x1c>
 800a1dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	6123      	str	r3, [r4, #16]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	6163      	str	r3, [r4, #20]
 800a1e8:	b003      	add	sp, #12
 800a1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ec:	ab01      	add	r3, sp, #4
 800a1ee:	466a      	mov	r2, sp
 800a1f0:	f7ff ffc8 	bl	800a184 <__swhatbuf_r>
 800a1f4:	9f00      	ldr	r7, [sp, #0]
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7fe fc38 	bl	8008a70 <_malloc_r>
 800a200:	b948      	cbnz	r0, 800a216 <__smakebuf_r+0x46>
 800a202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a206:	059a      	lsls	r2, r3, #22
 800a208:	d4ee      	bmi.n	800a1e8 <__smakebuf_r+0x18>
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	f043 0302 	orr.w	r3, r3, #2
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	e7e2      	b.n	800a1dc <__smakebuf_r+0xc>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	6020      	str	r0, [r4, #0]
 800a21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	9b01      	ldr	r3, [sp, #4]
 800a222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a226:	b15b      	cbz	r3, 800a240 <__smakebuf_r+0x70>
 800a228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f81d 	bl	800a26c <_isatty_r>
 800a232:	b128      	cbz	r0, 800a240 <__smakebuf_r+0x70>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f023 0303 	bic.w	r3, r3, #3
 800a23a:	f043 0301 	orr.w	r3, r3, #1
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	431d      	orrs	r5, r3
 800a244:	81a5      	strh	r5, [r4, #12]
 800a246:	e7cf      	b.n	800a1e8 <__smakebuf_r+0x18>

0800a248 <_fstat_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d07      	ldr	r5, [pc, #28]	@ (800a268 <_fstat_r+0x20>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	4611      	mov	r1, r2
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	f7f8 fcd9 	bl	8002c0c <_fstat>
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	d102      	bne.n	800a264 <_fstat_r+0x1c>
 800a25e:	682b      	ldr	r3, [r5, #0]
 800a260:	b103      	cbz	r3, 800a264 <_fstat_r+0x1c>
 800a262:	6023      	str	r3, [r4, #0]
 800a264:	bd38      	pop	{r3, r4, r5, pc}
 800a266:	bf00      	nop
 800a268:	200008b0 	.word	0x200008b0

0800a26c <_isatty_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d06      	ldr	r5, [pc, #24]	@ (800a288 <_isatty_r+0x1c>)
 800a270:	2300      	movs	r3, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	602b      	str	r3, [r5, #0]
 800a278:	f7f8 fcd8 	bl	8002c2c <_isatty>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_isatty_r+0x1a>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_isatty_r+0x1a>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	200008b0 	.word	0x200008b0

0800a28c <fmaxf>:
 800a28c:	b508      	push	{r3, lr}
 800a28e:	ed2d 8b02 	vpush	{d8}
 800a292:	eeb0 8a40 	vmov.f32	s16, s0
 800a296:	eef0 8a60 	vmov.f32	s17, s1
 800a29a:	f000 f815 	bl	800a2c8 <__fpclassifyf>
 800a29e:	b930      	cbnz	r0, 800a2ae <fmaxf+0x22>
 800a2a0:	eeb0 8a68 	vmov.f32	s16, s17
 800a2a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a2a8:	ecbd 8b02 	vpop	{d8}
 800a2ac:	bd08      	pop	{r3, pc}
 800a2ae:	eeb0 0a68 	vmov.f32	s0, s17
 800a2b2:	f000 f809 	bl	800a2c8 <__fpclassifyf>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d0f4      	beq.n	800a2a4 <fmaxf+0x18>
 800a2ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c2:	dded      	ble.n	800a2a0 <fmaxf+0x14>
 800a2c4:	e7ee      	b.n	800a2a4 <fmaxf+0x18>
	...

0800a2c8 <__fpclassifyf>:
 800a2c8:	ee10 3a10 	vmov	r3, s0
 800a2cc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a2d0:	d00d      	beq.n	800a2ee <__fpclassifyf+0x26>
 800a2d2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a2d6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a2da:	d30a      	bcc.n	800a2f2 <__fpclassifyf+0x2a>
 800a2dc:	4b07      	ldr	r3, [pc, #28]	@ (800a2fc <__fpclassifyf+0x34>)
 800a2de:	1e42      	subs	r2, r0, #1
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d908      	bls.n	800a2f6 <__fpclassifyf+0x2e>
 800a2e4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a2e8:	4258      	negs	r0, r3
 800a2ea:	4158      	adcs	r0, r3
 800a2ec:	4770      	bx	lr
 800a2ee:	2002      	movs	r0, #2
 800a2f0:	4770      	bx	lr
 800a2f2:	2004      	movs	r0, #4
 800a2f4:	4770      	bx	lr
 800a2f6:	2003      	movs	r0, #3
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	007ffffe 	.word	0x007ffffe

0800a300 <_init>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	bf00      	nop
 800a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a306:	bc08      	pop	{r3}
 800a308:	469e      	mov	lr, r3
 800a30a:	4770      	bx	lr

0800a30c <_fini>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr
