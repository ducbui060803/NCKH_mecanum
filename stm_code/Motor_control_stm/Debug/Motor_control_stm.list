
Motor_control_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b818  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800b9b8  0800b9b8  0000c9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be80  0800be80  0000d224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be80  0800be80  0000ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be88  0800be88  0000d224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be88  0800be88  0000ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be8c  0800be8c  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800be90  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000224  0800c0b4  0000d224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800c0b4  0000d844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bd6  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002225  00000000  00000000  0001de2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00020050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfa  00000000  00000000  000210a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cc9  00000000  00000000  00021da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cd3  00000000  00000000  00039a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cc0  00000000  00000000  0004c73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e03fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c28  00000000  00000000  000e0444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9a0 	.word	0x0800b9a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800b9a0 	.word	0x0800b9a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11)          // kiểm tra đúng timer
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d109      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x26>
    {
        // Đặt code cần chạy mỗi chu kỳ ở đây
    	encoder_flag = TRUE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
    	imu_flag = TRUE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
    	update_encoder_speed();
 800104e:	f000 f8db 	bl	8001208 <update_encoder_speed>
    	read_IMU();
 8001052:	f000 f9f9 	bl	8001448 <read_IMU>
    }
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40014800 	.word	0x40014800
 8001064:	200005dc 	.word	0x200005dc
 8001068:	200005dd 	.word	0x200005dd

0800106c <HAL_UART_RxCpltCallback>:
        uart_tx_ready = 1;
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)
    {

    }
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <user_init>:

void user_init()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af04      	add	r7, sp, #16
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //M2
 8001086:	2108      	movs	r1, #8
 8001088:	484e      	ldr	r0, [pc, #312]	@ (80011c4 <user_init+0x144>)
 800108a:	f004 fc03 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4); //M4 conflict encoder
 800108e:	210c      	movs	r1, #12
 8001090:	484c      	ldr	r0, [pc, #304]	@ (80011c4 <user_init+0x144>)
 8001092:	f004 fbff 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2); //M1
 8001096:	2104      	movs	r1, #4
 8001098:	484b      	ldr	r0, [pc, #300]	@ (80011c8 <user_init+0x148>)
 800109a:	f004 fbfb 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); //M3 conflict encoder
 800109e:	2100      	movs	r1, #0
 80010a0:	484a      	ldr	r0, [pc, #296]	@ (80011cc <user_init+0x14c>)
 80010a2:	f004 fbf7 	bl	8005894 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); //M1
 80010a6:	213c      	movs	r1, #60	@ 0x3c
 80010a8:	4849      	ldr	r0, [pc, #292]	@ (80011d0 <user_init+0x150>)
 80010aa:	f004 fd49 	bl	8005b40 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //M3 conflict
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	4848      	ldr	r0, [pc, #288]	@ (80011d4 <user_init+0x154>)
 80010b2:	f004 fd45 	bl	8005b40 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //M4 conflict
 80010b6:	213c      	movs	r1, #60	@ 0x3c
 80010b8:	4847      	ldr	r0, [pc, #284]	@ (80011d8 <user_init+0x158>)
 80010ba:	f004 fd41 	bl	8005b40 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //M2
 80010be:	213c      	movs	r1, #60	@ 0x3c
 80010c0:	4846      	ldr	r0, [pc, #280]	@ (80011dc <user_init+0x15c>)
 80010c2:	f004 fd3d 	bl	8005b40 <HAL_TIM_Encoder_Start>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 80010c6:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <user_init+0x144>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 80010ce:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <user_init+0x144>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 80010d6:	4b3c      	ldr	r3, [pc, #240]	@ (80011c8 <user_init+0x148>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 80010de:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <user_init+0x14c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_UART_Receive_DMA(&huart6, rx_buffer, RX_BUFFER_SIZE);
 80010e6:	2219      	movs	r2, #25
 80010e8:	493d      	ldr	r1, [pc, #244]	@ (80011e0 <user_init+0x160>)
 80010ea:	483e      	ldr	r0, [pc, #248]	@ (80011e4 <user_init+0x164>)
 80010ec:	f005 fc87 	bl	80069fe <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim11);
 80010f0:	483d      	ldr	r0, [pc, #244]	@ (80011e8 <user_init+0x168>)
 80010f2:	f004 fb13 	bl	800571c <HAL_TIM_Base_Start_IT>
	// Set chiều quay THUẬN CHIỀU KIM ĐỒNG HỒ:
	// M1: IN1_1 = 1, IN2_1 = 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // IN1_1
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010fc:	483b      	ldr	r0, [pc, #236]	@ (80011ec <user_init+0x16c>)
 80010fe:	f002 fde7 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // IN2_1
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001108:	4839      	ldr	r0, [pc, #228]	@ (80011f0 <user_init+0x170>)
 800110a:	f002 fde1 	bl	8003cd0 <HAL_GPIO_WritePin>

	// M2: IN1_2 = 1, IN2_2 = 0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);    // IN1_2
 800110e:	2200      	movs	r2, #0
 8001110:	2104      	movs	r1, #4
 8001112:	4838      	ldr	r0, [pc, #224]	@ (80011f4 <user_init+0x174>)
 8001114:	f002 fddc 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);  // IN2_2
 8001118:	2201      	movs	r2, #1
 800111a:	2140      	movs	r1, #64	@ 0x40
 800111c:	4835      	ldr	r0, [pc, #212]	@ (80011f4 <user_init+0x174>)
 800111e:	f002 fdd7 	bl	8003cd0 <HAL_GPIO_WritePin>

	// M3: IN1_3 = 1, IN2_3 = 0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);    // IN1_3
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001128:	4833      	ldr	r0, [pc, #204]	@ (80011f8 <user_init+0x178>)
 800112a:	f002 fdd1 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);  // IN2_3
 800112e:	2201      	movs	r2, #1
 8001130:	2108      	movs	r1, #8
 8001132:	4832      	ldr	r0, [pc, #200]	@ (80011fc <user_init+0x17c>)
 8001134:	f002 fdcc 	bl	8003cd0 <HAL_GPIO_WritePin>

	// M4: IN1_4 = 1, IN2_4 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);    // IN1_4
 8001138:	2201      	movs	r2, #1
 800113a:	2101      	movs	r1, #1
 800113c:	482c      	ldr	r0, [pc, #176]	@ (80011f0 <user_init+0x170>)
 800113e:	f002 fdc7 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);  // IN2_4
 8001142:	2200      	movs	r2, #0
 8001144:	2104      	movs	r1, #4
 8001146:	482a      	ldr	r0, [pc, #168]	@ (80011f0 <user_init+0x170>)
 8001148:	f002 fdc2 	bl	8003cd0 <HAL_GPIO_WritePin>

	 // Reset BNO055
	uint8_t reset_cmd = 0x20;
 800114c:	2320      	movs	r3, #32
 800114e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3, BNO055_ADDRESS, 0x3F, 1, &reset_cmd, 1, HAL_MAX_DELAY);
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	223f      	movs	r2, #63	@ 0x3f
 8001162:	2150      	movs	r1, #80	@ 0x50
 8001164:	4826      	ldr	r0, [pc, #152]	@ (8001200 <user_init+0x180>)
 8001166:	f002 ff11 	bl	8003f8c <HAL_I2C_Mem_Write>
	HAL_Delay(2000);  // Rất quan trọng!
 800116a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800116e:	f001 ff85 	bl	800307c <HAL_Delay>

	// Set to config mode
	uint8_t config_mode = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, BNO055_ADDRESS, 0x3D, 1, &config_mode, 1, HAL_MAX_DELAY);
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	223d      	movs	r2, #61	@ 0x3d
 8001188:	2150      	movs	r1, #80	@ 0x50
 800118a:	481d      	ldr	r0, [pc, #116]	@ (8001200 <user_init+0x180>)
 800118c:	f002 fefe 	bl	8003f8c <HAL_I2C_Mem_Write>
	HAL_Delay(250);
 8001190:	20fa      	movs	r0, #250	@ 0xfa
 8001192:	f001 ff73 	bl	800307c <HAL_Delay>

	// Set to NDOF mode
	uint8_t ndof_mode = 0x0C;
 8001196:	230c      	movs	r3, #12
 8001198:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, BNO055_ADDRESS, 0x3D, 1, &ndof_mode, 1, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d7b      	adds	r3, r7, #5
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	223d      	movs	r2, #61	@ 0x3d
 80011ac:	2150      	movs	r1, #80	@ 0x50
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <user_init+0x180>)
 80011b0:	f002 feec 	bl	8003f8c <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80011b4:	20c8      	movs	r0, #200	@ 0xc8
 80011b6:	f001 ff61 	bl	800307c <HAL_Delay>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200003b4 	.word	0x200003b4
 80011c8:	200003fc 	.word	0x200003fc
 80011cc:	20000444 	.word	0x20000444
 80011d0:	20000294 	.word	0x20000294
 80011d4:	200002dc 	.word	0x200002dc
 80011d8:	20000324 	.word	0x20000324
 80011dc:	2000036c 	.word	0x2000036c
 80011e0:	20000644 	.word	0x20000644
 80011e4:	200004d4 	.word	0x200004d4
 80011e8:	2000048c 	.word	0x2000048c
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40021000 	.word	0x40021000
 8001200:	20000240 	.word	0x20000240
 8001204:	00000000 	.word	0x00000000

08001208 <update_encoder_speed>:

void update_encoder_speed(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	e076      	b.n	8001302 <update_encoder_speed+0xfa>
	{
		switch (i)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d82e      	bhi.n	8001278 <update_encoder_speed+0x70>
 800121a:	a201      	add	r2, pc, #4	@ (adr r2, 8001220 <update_encoder_speed+0x18>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001231 	.word	0x08001231
 8001224:	08001243 	.word	0x08001243
 8001228:	08001255 	.word	0x08001255
 800122c:	08001267 	.word	0x08001267
		{
			case 0:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim1); //M2
 8001230:	4b77      	ldr	r3, [pc, #476]	@ (8001410 <update_encoder_speed+0x208>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	b219      	sxth	r1, r3
 8001238:	4a76      	ldr	r2, [pc, #472]	@ (8001414 <update_encoder_speed+0x20c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8001240:	e01b      	b.n	800127a <update_encoder_speed+0x72>
			case 1:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim4); //M1
 8001242:	4b75      	ldr	r3, [pc, #468]	@ (8001418 <update_encoder_speed+0x210>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	b219      	sxth	r1, r3
 800124a:	4a72      	ldr	r2, [pc, #456]	@ (8001414 <update_encoder_speed+0x20c>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8001252:	e012      	b.n	800127a <update_encoder_speed+0x72>
			case 2:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim2); //M4 conflict
 8001254:	4b71      	ldr	r3, [pc, #452]	@ (800141c <update_encoder_speed+0x214>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	b219      	sxth	r1, r3
 800125c:	4a6d      	ldr	r2, [pc, #436]	@ (8001414 <update_encoder_speed+0x20c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8001264:	e009      	b.n	800127a <update_encoder_speed+0x72>
			case 3:
				encoder_current[i] = __HAL_TIM_GET_COUNTER(&htim3); //M3 conflict
 8001266:	4b6e      	ldr	r3, [pc, #440]	@ (8001420 <update_encoder_speed+0x218>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126c:	b219      	sxth	r1, r3
 800126e:	4a69      	ldr	r2, [pc, #420]	@ (8001414 <update_encoder_speed+0x20c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 8001276:	e000      	b.n	800127a <update_encoder_speed+0x72>
			default:
				break;
 8001278:	bf00      	nop
		}

		delta_encoder[i] = encoder_current[i] - encoder_past[i];
 800127a:	4a66      	ldr	r2, [pc, #408]	@ (8001414 <update_encoder_speed+0x20c>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001282:	b29a      	uxth	r2, r3
 8001284:	4967      	ldr	r1, [pc, #412]	@ (8001424 <update_encoder_speed+0x21c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800128c:	b29b      	uxth	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	b219      	sxth	r1, r3
 8001294:	4a64      	ldr	r2, [pc, #400]	@ (8001428 <update_encoder_speed+0x220>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    if (delta_encoder[i] < -32768)
		{
	    	delta_encoder[i] += 65536;
		}

	    encoder_past[i] = encoder_current[i];
 800129c:	4a5d      	ldr	r2, [pc, #372]	@ (8001414 <update_encoder_speed+0x20c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80012a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001424 <update_encoder_speed+0x21c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	    speed_rps[i] = (float) delta_encoder[i] / PPR / DT;
 80012ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001428 <update_encoder_speed+0x220>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 800142c <update_encoder_speed+0x224>
 80012c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012c4:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001430 <update_encoder_speed+0x228>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	b219      	sxth	r1, r3
 80012d6:	4a57      	ldr	r2, [pc, #348]	@ (8001434 <update_encoder_speed+0x22c>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    if (i != 2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d00b      	beq.n	80012fc <update_encoder_speed+0xf4>
	    {
	    	speed_rps[i] = -speed_rps[i];
 80012e4:	4a53      	ldr	r2, [pc, #332]	@ (8001434 <update_encoder_speed+0x22c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	425b      	negs	r3, r3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b219      	sxth	r1, r3
 80012f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001434 <update_encoder_speed+0x22c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b03      	cmp	r3, #3
 8001306:	dd85      	ble.n	8001214 <update_encoder_speed+0xc>
	    }

//	    speed_rpm[i] = speed_rps * 60.0f;
	}

    vx_control = (speed_rps[0] + speed_rps[1] + speed_rps[2] + speed_rps[3]) * r / 4.0;
 8001308:	4b4a      	ldr	r3, [pc, #296]	@ (8001434 <update_encoder_speed+0x22c>)
 800130a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130e:	461a      	mov	r2, r3
 8001310:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <update_encoder_speed+0x22c>)
 8001312:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001316:	4413      	add	r3, r2
 8001318:	4a46      	ldr	r2, [pc, #280]	@ (8001434 <update_encoder_speed+0x22c>)
 800131a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800131e:	4413      	add	r3, r2
 8001320:	4a44      	ldr	r2, [pc, #272]	@ (8001434 <update_encoder_speed+0x22c>)
 8001322:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001326:	4413      	add	r3, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f903 	bl	8000534 <__aeabi_i2d>
 800132e:	a336      	add	r3, pc, #216	@ (adr r3, 8001408 <update_encoder_speed+0x200>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f968 	bl	8000608 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <update_encoder_speed+0x230>)
 8001346:	f7ff fa89 	bl	800085c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc51 	bl	8000bf8 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4a38      	ldr	r2, [pc, #224]	@ (800143c <update_encoder_speed+0x234>)
 800135a:	6013      	str	r3, [r2, #0]
    vy_control = (-speed_rps[0] + speed_rps[1] + speed_rps[2] - speed_rps[3]) * r / 4.0;
 800135c:	4b35      	ldr	r3, [pc, #212]	@ (8001434 <update_encoder_speed+0x22c>)
 800135e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001362:	461a      	mov	r2, r3
 8001364:	4b33      	ldr	r3, [pc, #204]	@ (8001434 <update_encoder_speed+0x22c>)
 8001366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a31      	ldr	r2, [pc, #196]	@ (8001434 <update_encoder_speed+0x22c>)
 800136e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001372:	4413      	add	r3, r2
 8001374:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <update_encoder_speed+0x22c>)
 8001376:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d9 	bl	8000534 <__aeabi_i2d>
 8001382:	a321      	add	r3, pc, #132	@ (adr r3, 8001408 <update_encoder_speed+0x200>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f93e 	bl	8000608 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <update_encoder_speed+0x230>)
 800139a:	f7ff fa5f 	bl	800085c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fc27 	bl	8000bf8 <__aeabi_d2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <update_encoder_speed+0x238>)
 80013ae:	6013      	str	r3, [r2, #0]
    // theta_dot =  (-SpeedMeasured[0] + SpeedMeasured[1] - SpeedMeasured[2] + SpeedMeasured[3]) * r / (4.0 * (L1 + L2));
    // toán vận tốc tổng hợp của xe (vận tốc theo hướng tổng hợp)
    v_send = sqrt(vx_control * vx_control + vy_control * vy_control);
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <update_encoder_speed+0x234>)
 80013b2:	ed93 7a00 	vldr	s14, [r3]
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <update_encoder_speed+0x234>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <update_encoder_speed+0x238>)
 80013c2:	edd3 6a00 	vldr	s13, [r3]
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <update_encoder_speed+0x238>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	ee17 0a90 	vmov	r0, s15
 80013d8:	f7ff f8be 	bl	8000558 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	ec43 2b10 	vmov	d0, r2, r3
 80013e4:	f00a f9a0 	bl	800b728 <sqrt>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fc02 	bl	8000bf8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <update_encoder_speed+0x23c>)
 80013f8:	6013      	str	r3, [r2, #0]

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	f3af 8000 	nop.w
 8001408:	1eb851ec 	.word	0x1eb851ec
 800140c:	3fa1eb85 	.word	0x3fa1eb85
 8001410:	20000294 	.word	0x20000294
 8001414:	20000680 	.word	0x20000680
 8001418:	2000036c 	.word	0x2000036c
 800141c:	200002dc 	.word	0x200002dc
 8001420:	20000324 	.word	0x20000324
 8001424:	20000688 	.word	0x20000688
 8001428:	20000690 	.word	0x20000690
 800142c:	43700000 	.word	0x43700000
 8001430:	3c23d70a 	.word	0x3c23d70a
 8001434:	20000698 	.word	0x20000698
 8001438:	40100000 	.word	0x40100000
 800143c:	200006e0 	.word	0x200006e0
 8001440:	200006e4 	.word	0x200006e4
 8001444:	200006e8 	.word	0x200006e8

08001448 <read_IMU>:

void read_IMU(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af04      	add	r7, sp, #16
    uint8_t buffer[2];

    // ==== Read Yaw (Euler Heading) ====
    HAL_I2C_Mem_Read(&hi2c3, BNO055_ADDRESS, BNO055_EULER_H_LSB, 1, buffer, 2, HAL_MAX_DELAY);
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2302      	movs	r3, #2
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	221a      	movs	r2, #26
 8001460:	2150      	movs	r1, #80	@ 0x50
 8001462:	482f      	ldr	r0, [pc, #188]	@ (8001520 <read_IMU+0xd8>)
 8001464:	f002 fe8c 	bl	8004180 <HAL_I2C_Mem_Read>
    int16_t yaw_raw = (int16_t)((buffer[1] << 8) | buffer[0]);
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	b21b      	sxth	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	793b      	ldrb	r3, [r7, #4]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	80fb      	strh	r3, [r7, #6]
    yaw_deg = ((float)yaw_raw) / 16.0f;  // 1° = 16 LSB
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001484:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <read_IMU+0xdc>)
 800148e:	edc3 7a00 	vstr	s15, [r3]
    /* Yaw calib */
    yaw_deg += 80;
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <read_IMU+0xdc>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001528 <read_IMU+0xe0>
 800149c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a0:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <read_IMU+0xdc>)
 80014a2:	edc3 7a00 	vstr	s15, [r3]
    if (yaw_deg > 180)
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <read_IMU+0xdc>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800152c <read_IMU+0xe4>
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	dd09      	ble.n	80014ce <read_IMU+0x86>
        yaw_deg -= 360;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <read_IMU+0xdc>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001530 <read_IMU+0xe8>
 80014c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <read_IMU+0xdc>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
    yaw_deg += 180;
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <read_IMU+0xdc>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800152c <read_IMU+0xe4>
 80014d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <read_IMU+0xdc>)
 80014de:	edc3 7a00 	vstr	s15, [r3]
    yaw = yaw_deg * (M_PI / 180.0f);  // rad
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <read_IMU+0xdc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f836 	bl	8000558 <__aeabi_f2d>
 80014ec:	a30a      	add	r3, pc, #40	@ (adr r3, 8001518 <read_IMU+0xd0>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f889 	bl	8000608 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb7b 	bl	8000bf8 <__aeabi_d2f>
 8001502:	4603      	mov	r3, r0
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <read_IMU+0xec>)
 8001506:	6013      	str	r3, [r2, #0]
//    // ==== Read Gyro Z (yaw rate) ====
//    HAL_I2C_Mem_Read(&hi2c3, BNO055_ADDRESS, BNO055_GYRO_DATA_Z_LSB, 1, buffer, 2, HAL_MAX_DELAY);
//    int16_t gyro_z_raw = (int16_t)((buffer[1] << 8) | buffer[0]);
//    theta_dot = ((float)gyro_z_raw) / 16.0f;  // deg/s
//    theta_dot *= (M_PI / 180.0f);  // rad/s
    update_yaw_dot();
 8001508:	f000 f816 	bl	8001538 <update_yaw_dot>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	f3af 8000 	nop.w
 8001518:	a2529d39 	.word	0xa2529d39
 800151c:	3f91df46 	.word	0x3f91df46
 8001520:	20000240 	.word	0x20000240
 8001524:	200006c4 	.word	0x200006c4
 8001528:	42a00000 	.word	0x42a00000
 800152c:	43340000 	.word	0x43340000
 8001530:	43b40000 	.word	0x43b40000
 8001534:	200006c8 	.word	0x200006c8

08001538 <update_yaw_dot>:

void update_yaw_dot(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
    uint32_t t_now = HAL_GetTick(); // ms
 800153e:	f001 fd91 	bl	8003064 <HAL_GetTick>
 8001542:	60b8      	str	r0, [r7, #8]
    float dt = (t_now - t_prev) / 1000.0f; // s
 8001544:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <update_yaw_dot+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001554:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800162c <update_yaw_dot+0xf4>
 8001558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155c:	edc7 7a01 	vstr	s15, [r7, #4]

    float dyaw = yaw - yaw_prev;
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <update_yaw_dot+0xf8>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <update_yaw_dot+0xfc>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]

    // xử lý wrap-around (-pi ↔ pi)
    if (dyaw > M_PI) dyaw -= 2*M_PI;
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7fe ffef 	bl	8000558 <__aeabi_f2d>
 800157a:	a325      	add	r3, pc, #148	@ (adr r3, 8001610 <update_yaw_dot+0xd8>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff fad2 	bl	8000b28 <__aeabi_dcmpgt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d010      	beq.n	80015ac <update_yaw_dot+0x74>
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_f2d>
 8001590:	a321      	add	r3, pc, #132	@ (adr r3, 8001618 <update_yaw_dot+0xe0>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe fe7f 	bl	8000298 <__aeabi_dsub>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb29 	bl	8000bf8 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e01a      	b.n	80015e2 <update_yaw_dot+0xaa>
    else if (dyaw < -M_PI) dyaw += 2*M_PI;
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7fe ffd3 	bl	8000558 <__aeabi_f2d>
 80015b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001620 <update_yaw_dot+0xe8>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff fa98 	bl	8000aec <__aeabi_dcmplt>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00f      	beq.n	80015e2 <update_yaw_dot+0xaa>
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7fe ffc8 	bl	8000558 <__aeabi_f2d>
 80015c8:	a313      	add	r3, pc, #76	@ (adr r3, 8001618 <update_yaw_dot+0xe0>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe fe65 	bl	800029c <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fb0d 	bl	8000bf8 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	60fb      	str	r3, [r7, #12]

    yaw_dot = dyaw / dt;
 80015e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80015e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <update_yaw_dot+0x100>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]

    yaw_prev = yaw;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <update_yaw_dot+0xf8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <update_yaw_dot+0xfc>)
 80015fa:	6013      	str	r3, [r2, #0]
    t_prev = t_now;
 80015fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <update_yaw_dot+0xf0>)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	54442d18 	.word	0x54442d18
 8001614:	400921fb 	.word	0x400921fb
 8001618:	54442d18 	.word	0x54442d18
 800161c:	401921fb 	.word	0x401921fb
 8001620:	54442d18 	.word	0x54442d18
 8001624:	c00921fb 	.word	0xc00921fb
 8001628:	200006c0 	.word	0x200006c0
 800162c:	447a0000 	.word	0x447a0000
 8001630:	200006c8 	.word	0x200006c8
 8001634:	200006cc 	.word	0x200006cc
 8001638:	200006d0 	.word	0x200006d0

0800163c <check_uart_command>:

void check_uart_command(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
    static uint16_t old_pos = 0;
    uint16_t new_pos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart6.hdmarx);  // vị trí mới
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <check_uart_command+0x90>)
 8001644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	b29b      	uxth	r3, r3
 800164c:	f1c3 0319 	rsb	r3, r3, #25
 8001650:	80fb      	strh	r3, [r7, #6]

    if (new_pos != old_pos)
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <check_uart_command+0x94>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	88fa      	ldrh	r2, [r7, #6]
 8001658:	429a      	cmp	r2, r3
 800165a:	d033      	beq.n	80016c4 <check_uart_command+0x88>
    {
        while (old_pos != new_pos)
 800165c:	e02d      	b.n	80016ba <check_uart_command+0x7e>
        {
            char c = rx_buffer[old_pos++];
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <check_uart_command+0x94>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	b291      	uxth	r1, r2
 8001666:	4a1a      	ldr	r2, [pc, #104]	@ (80016d0 <check_uart_command+0x94>)
 8001668:	8011      	strh	r1, [r2, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <check_uart_command+0x98>)
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	717b      	strb	r3, [r7, #5]

            // Xử lý ký tự c (dùng buffer đệm riêng)
            if (c == '\n')
 8001672:	797b      	ldrb	r3, [r7, #5]
 8001674:	2b0a      	cmp	r3, #10
 8001676:	d10b      	bne.n	8001690 <check_uart_command+0x54>
            {
                // Kết thúc chuỗi, parse
                parse_uart_line(temp_line);
 8001678:	4817      	ldr	r0, [pc, #92]	@ (80016d8 <check_uart_command+0x9c>)
 800167a:	f000 f831 	bl	80016e0 <parse_uart_line>
                temp_line_index = 0;
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <check_uart_command+0xa0>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
                memset(temp_line, 0, sizeof(temp_line));
 8001684:	2264      	movs	r2, #100	@ 0x64
 8001686:	2100      	movs	r1, #0
 8001688:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <check_uart_command+0x9c>)
 800168a:	f007 fa9e 	bl	8008bca <memset>
 800168e:	e00d      	b.n	80016ac <check_uart_command+0x70>
            }
            else if (temp_line_index < sizeof(temp_line) - 1)
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <check_uart_command+0xa0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b62      	cmp	r3, #98	@ 0x62
 8001696:	d809      	bhi.n	80016ac <check_uart_command+0x70>
            {
                temp_line[temp_line_index++] = c;
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <check_uart_command+0xa0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	b2d1      	uxtb	r1, r2
 80016a0:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <check_uart_command+0xa0>)
 80016a2:	7011      	strb	r1, [r2, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <check_uart_command+0x9c>)
 80016a8:	797b      	ldrb	r3, [r7, #5]
 80016aa:	5453      	strb	r3, [r2, r1]
            }

            if (old_pos >= RX_BUFFER_SIZE)
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <check_uart_command+0x94>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	2b18      	cmp	r3, #24
 80016b2:	d902      	bls.n	80016ba <check_uart_command+0x7e>
                old_pos = 0;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <check_uart_command+0x94>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	801a      	strh	r2, [r3, #0]
        while (old_pos != new_pos)
 80016ba:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <check_uart_command+0x94>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1cc      	bne.n	800165e <check_uart_command+0x22>
        }
    }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200004d4 	.word	0x200004d4
 80016d0:	200006ec 	.word	0x200006ec
 80016d4:	20000644 	.word	0x20000644
 80016d8:	200005e0 	.word	0x200005e0
 80016dc:	2000067a 	.word	0x2000067a

080016e0 <parse_uart_line>:

void parse_uart_line(char *line)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	vx = 0;
 80016e8:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <parse_uart_line+0xf8>)
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
	vy = 0;
 80016f0:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <parse_uart_line+0xfc>)
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
	omega = 0;
 80016f8:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <parse_uart_line+0x100>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
    float vx_global = 0, vy_global = 0, omega_global = 0;
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	617b      	str	r3, [r7, #20]

    char *vxStr = strtok(line, " ");
 8001712:	4934      	ldr	r1, [pc, #208]	@ (80017e4 <parse_uart_line+0x104>)
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f007 fa73 	bl	8008c00 <strtok>
 800171a:	6138      	str	r0, [r7, #16]
    char *vyStr = strtok(NULL, " ");
 800171c:	4931      	ldr	r1, [pc, #196]	@ (80017e4 <parse_uart_line+0x104>)
 800171e:	2000      	movs	r0, #0
 8001720:	f007 fa6e 	bl	8008c00 <strtok>
 8001724:	60f8      	str	r0, [r7, #12]
    char *omegaStr = strtok(NULL, " ");
 8001726:	492f      	ldr	r1, [pc, #188]	@ (80017e4 <parse_uart_line+0x104>)
 8001728:	2000      	movs	r0, #0
 800172a:	f007 fa69 	bl	8008c00 <strtok>
 800172e:	60b8      	str	r0, [r7, #8]

    if (vxStr && vyStr && omegaStr)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d043      	beq.n	80017be <parse_uart_line+0xde>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d040      	beq.n	80017be <parse_uart_line+0xde>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d03d      	beq.n	80017be <parse_uart_line+0xde>
    {
        vx_global = atof(vxStr);
 8001742:	6938      	ldr	r0, [r7, #16]
 8001744:	f005 fe9e 	bl	8007484 <atof>
 8001748:	ec53 2b10 	vmov	r2, r3, d0
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa52 	bl	8000bf8 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	61fb      	str	r3, [r7, #28]
        vy_global = atof(vyStr);
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f005 fe93 	bl	8007484 <atof>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa47 	bl	8000bf8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]
        omega_global = atof(omegaStr);
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f005 fe88 	bl	8007484 <atof>
 8001774:	ec53 2b10 	vmov	r2, r3, d0
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa3c 	bl	8000bf8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	617b      	str	r3, [r7, #20]

        vx = vx_global;
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <parse_uart_line+0xf8>)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	6013      	str	r3, [r2, #0]
        vy = vy_global;
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <parse_uart_line+0xfc>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6013      	str	r3, [r2, #0]
        omega = omega_global;
 8001790:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <parse_uart_line+0x100>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6013      	str	r3, [r2, #0]

        started = 1;
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <parse_uart_line+0x108>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
//        move(vx, vy, omega);
        move(vx, vy, omega);
 800179c:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <parse_uart_line+0xf8>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <parse_uart_line+0xfc>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <parse_uart_line+0x100>)
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	eeb0 1a66 	vmov.f32	s2, s13
 80017b2:	eef0 0a47 	vmov.f32	s1, s14
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	f000 f81d 	bl	80017f8 <move>
    }

    manual_mode = 1;
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <parse_uart_line+0x10c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
    last_manual_time = HAL_GetTick();
 80017c4:	f001 fc4e 	bl	8003064 <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <parse_uart_line+0x110>)
 80017cc:	6013      	str	r3, [r2, #0]
}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200006d4 	.word	0x200006d4
 80017dc:	200006d8 	.word	0x200006d8
 80017e0:	200006dc 	.word	0x200006dc
 80017e4:	0800b9b8 	.word	0x0800b9b8
 80017e8:	20000679 	.word	0x20000679
 80017ec:	2000067b 	.word	0x2000067b
 80017f0:	2000067c 	.word	0x2000067c
 80017f4:	00000000 	.word	0x00000000

080017f8 <move>:

void move(float vx, float vy, float omega)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	ed87 0a03 	vstr	s0, [r7, #12]
 8001806:	edc7 0a02 	vstr	s1, [r7, #8]
 800180a:	ed87 1a01 	vstr	s2, [r7, #4]
    float v1 = (vx - vy - (L1 + L2) * omega) / r;
 800180e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001812:	edd7 7a02 	vldr	s15, [r7, #8]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	4604      	mov	r4, r0
 8001824:	460d      	mov	r5, r1
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe fe96 	bl	8000558 <__aeabi_f2d>
 800182c:	a38d      	add	r3, pc, #564	@ (adr r3, 8001a64 <move+0x26c>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fee9 	bl	8000608 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fd2b 	bl	8000298 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a388      	add	r3, pc, #544	@ (adr r3, 8001a6c <move+0x274>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7ff f804 	bl	800085c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f9cc 	bl	8000bf8 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
    float v2 = (vx + vy + (L1 + L2) * omega) / r;
 8001864:	ed97 7a03 	vldr	s14, [r7, #12]
 8001868:	edd7 7a02 	vldr	s15, [r7, #8]
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	ee17 0a90 	vmov	r0, s15
 8001874:	f7fe fe70 	bl	8000558 <__aeabi_f2d>
 8001878:	4604      	mov	r4, r0
 800187a:	460d      	mov	r5, r1
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	a378      	add	r3, pc, #480	@ (adr r3, 8001a64 <move+0x26c>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe febe 	bl	8000608 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fd02 	bl	800029c <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	a372      	add	r3, pc, #456	@ (adr r3, 8001a6c <move+0x274>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f9a1 	bl	8000bf8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	623b      	str	r3, [r7, #32]
    float v3 = (vx + vy - (L1 + L2) * omega) / r;
 80018ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80018be:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	ee17 0a90 	vmov	r0, s15
 80018ca:	f7fe fe45 	bl	8000558 <__aeabi_f2d>
 80018ce:	4604      	mov	r4, r0
 80018d0:	460d      	mov	r5, r1
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7fe fe40 	bl	8000558 <__aeabi_f2d>
 80018d8:	a362      	add	r3, pc, #392	@ (adr r3, 8001a64 <move+0x26c>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe93 	bl	8000608 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fcd5 	bl	8000298 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	a35d      	add	r3, pc, #372	@ (adr r3, 8001a6c <move+0x274>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe ffae 	bl	800085c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f976 	bl	8000bf8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	61fb      	str	r3, [r7, #28]
    float v4 = (vx - vy + (L1 + L2) * omega) / r;
 8001910:	ed97 7a03 	vldr	s14, [r7, #12]
 8001914:	edd7 7a02 	vldr	s15, [r7, #8]
 8001918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191c:	ee17 0a90 	vmov	r0, s15
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	4604      	mov	r4, r0
 8001926:	460d      	mov	r5, r1
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7fe fe15 	bl	8000558 <__aeabi_f2d>
 800192e:	a34d      	add	r3, pc, #308	@ (adr r3, 8001a64 <move+0x26c>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe68 	bl	8000608 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fcac 	bl	800029c <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	a347      	add	r3, pc, #284	@ (adr r3, 8001a6c <move+0x274>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe ff83 	bl	800085c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f94b 	bl	8000bf8 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]
//    Setpoint_before_fix[0] = v1;
//    Setpoint_before_fix[1] = v2;
//    Setpoint_before_fix[2] = v3;
//    Setpoint_before_fix[3] = v4;

    float max_speed = fmaxf(fmaxf(fabsf(v1), fabsf(v2)), fmaxf(fabsf(v3), fabsf(v4)));
 8001966:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800196a:	eeb0 7ae7 	vabs.f32	s14, s15
 800196e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001972:	eef0 7ae7 	vabs.f32	s15, s15
 8001976:	eef0 0a67 	vmov.f32	s1, s15
 800197a:	eeb0 0a47 	vmov.f32	s0, s14
 800197e:	f009 feff 	bl	800b780 <fmaxf>
 8001982:	eeb0 8a40 	vmov.f32	s16, s0
 8001986:	edd7 7a07 	vldr	s15, [r7, #28]
 800198a:	eeb0 7ae7 	vabs.f32	s14, s15
 800198e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001992:	eef0 7ae7 	vabs.f32	s15, s15
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	eeb0 0a47 	vmov.f32	s0, s14
 800199e:	f009 feef 	bl	800b780 <fmaxf>
 80019a2:	eef0 7a40 	vmov.f32	s15, s0
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	eeb0 0a48 	vmov.f32	s0, s16
 80019ae:	f009 fee7 	bl	800b780 <fmaxf>
 80019b2:	ed87 0a05 	vstr	s0, [r7, #20]
    if (max_speed > PWM_MAX)
 80019b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ba:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001a60 <move+0x268>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd2f      	ble.n	8001a28 <move+0x230>
    {
    	v1 = v1 * PWM_MAX / max_speed;
 80019c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019cc:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001a60 <move+0x268>
 80019d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        v2 = v2 * PWM_MAX / max_speed;
 80019e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a60 <move+0x268>
 80019e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	edc7 7a08 	vstr	s15, [r7, #32]
        v3 = v3 * PWM_MAX / max_speed;
 80019f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019fc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001a60 <move+0x268>
 8001a00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        v4 = v4 * PWM_MAX / max_speed;
 8001a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a14:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001a60 <move+0x268>
 8001a18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a24:	edc7 7a06 	vstr	s15, [r7, #24]
    }

    driveMotor(0, v1);  // Normalized từ -1.0 đến 1.0
 8001a28:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 f821 	bl	8001a74 <driveMotor>
    driveMotor(1, v2);
 8001a32:	ed97 0a08 	vldr	s0, [r7, #32]
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 f81c 	bl	8001a74 <driveMotor>
    driveMotor(2, v3);
 8001a3c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a40:	2002      	movs	r0, #2
 8001a42:	f000 f817 	bl	8001a74 <driveMotor>
    driveMotor(3, v4);
 8001a46:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f000 f812 	bl	8001a74 <driveMotor>
//
//    driveMotor(0, Setpoint[0] / MAX_SPEED);  // Normalized từ -1.0 đến 1.0
//    driveMotor(1, Setpoint[1] / MAX_SPEED);
//    driveMotor(2, Setpoint[2] / MAX_SPEED);
//    driveMotor(3, Setpoint[3] / MAX_SPEED);
}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	ecbd 8b02 	vpop	{d8}
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	f3af 8000 	nop.w
 8001a60:	43960000 	.word	0x43960000
 8001a64:	ae147ae2 	.word	0xae147ae2
 8001a68:	3fcae147 	.word	0x3fcae147
 8001a6c:	1eb851ec 	.word	0x1eb851ec
 8001a70:	3fa1eb85 	.word	0x3fa1eb85

08001a74 <driveMotor>:

void driveMotor(int idx, float speed)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	ed87 0a00 	vstr	s0, [r7]
    if (idx < 0 || idx >= 4) return;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f2c0 808d 	blt.w	8001ba2 <driveMotor+0x12e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	f300 8089 	bgt.w	8001ba2 <driveMotor+0x12e>

    uint8_t forward = (speed >= 0);
 8001a90:	edd7 7a00 	vldr	s15, [r7]
 8001a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	bfac      	ite	ge
 8001a9e:	2301      	movge	r3, #1
 8001aa0:	2300      	movlt	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	73fb      	strb	r3, [r7, #15]
    pwm_value_before_abs[idx] = speed * 60.0f;
 8001aa6:	edd7 7a00 	vldr	s15, [r7]
 8001aaa:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001bac <driveMotor+0x138>
 8001aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab6:	ee17 1a90 	vmov	r1, s15
 8001aba:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb0 <driveMotor+0x13c>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    float abs_speed = fabsf(speed);
 8001ac2:	edd7 7a00 	vldr	s15, [r7]
 8001ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8001aca:	edc7 7a02 	vstr	s15, [r7, #8]
//    if (abs_speed > 1.0f) abs_speed = 1.0f;  // Giới hạn từ -1.0 đến 1.0

    // Tính giá trị PWM theo PWM_MAX
//    pwm_value[idx] = (uint32_t)(abs_speed * PWM_MAX);

    pwm_value[idx] = (uint32_t)(abs_speed) ;
 8001ace:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad6:	ee17 1a90 	vmov	r1, s15
 8001ada:	4a36      	ldr	r2, [pc, #216]	@ (8001bb4 <driveMotor+0x140>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Điều khiển chiều
    HAL_GPIO_WritePin(in1_port[idx], in1_pin[idx], forward ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ae2:	4a35      	ldr	r2, [pc, #212]	@ (8001bb8 <driveMotor+0x144>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001aea:	4a34      	ldr	r2, [pc, #208]	@ (8001bbc <driveMotor+0x148>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	f002 f8e6 	bl	8003cd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(in2_port[idx], in2_pin[idx], forward ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001b04:	4a2e      	ldr	r2, [pc, #184]	@ (8001bc0 <driveMotor+0x14c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <driveMotor+0x150>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	f002 f8d5 	bl	8003cd0 <HAL_GPIO_WritePin>

    // Xuất PWM
    __HAL_TIM_SET_COMPARE(htim_pwm[idx], tim_channel[idx], pwm_value[idx]);
 8001b26:	4a28      	ldr	r2, [pc, #160]	@ (8001bc8 <driveMotor+0x154>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <driveMotor+0xd4>
 8001b32:	4a26      	ldr	r2, [pc, #152]	@ (8001bcc <driveMotor+0x158>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	491d      	ldr	r1, [pc, #116]	@ (8001bb4 <driveMotor+0x140>)
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b46:	e02d      	b.n	8001ba4 <driveMotor+0x130>
 8001b48:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <driveMotor+0x154>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d10a      	bne.n	8001b6a <driveMotor+0xf6>
 8001b54:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <driveMotor+0x158>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4915      	ldr	r1, [pc, #84]	@ (8001bb4 <driveMotor+0x140>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b66:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b68:	e01c      	b.n	8001ba4 <driveMotor+0x130>
 8001b6a:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <driveMotor+0x154>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d10a      	bne.n	8001b8c <driveMotor+0x118>
 8001b76:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <driveMotor+0x158>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <driveMotor+0x140>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b88:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b8a:	e00b      	b.n	8001ba4 <driveMotor+0x130>
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <driveMotor+0x158>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4907      	ldr	r1, [pc, #28]	@ (8001bb4 <driveMotor+0x140>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba0:	e000      	b.n	8001ba4 <driveMotor+0x130>
    if (idx < 0 || idx >= 4) return;
 8001ba2:	bf00      	nop
}
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	42700000 	.word	0x42700000
 8001bb0:	200006a0 	.word	0x200006a0
 8001bb4:	200006b0 	.word	0x200006b0
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000010 	.word	0x20000010
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	20000028 	.word	0x20000028
 8001bc8:	20000040 	.word	0x20000040
 8001bcc:	20000030 	.word	0x20000030

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af06      	add	r7, sp, #24

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001bd8:	f001 f9de 	bl	8002f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bdc:	f000 f88e 	bl	8001cfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001be0:	f000 fc20 	bl	8002424 <MX_GPIO_Init>
	MX_DMA_Init();
 8001be4:	f000 fbf6 	bl	80023d4 <MX_DMA_Init>
	MX_TIM1_Init();
 8001be8:	f000 f91e 	bl	8001e28 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001bec:	f000 f974 	bl	8001ed8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001bf0:	f000 f9c6 	bl	8001f80 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001bf4:	f000 fa18 	bl	8002028 <MX_TIM4_Init>
	MX_I2C3_Init();
 8001bf8:	f000 f8e8 	bl	8001dcc <MX_I2C3_Init>
	MX_USART6_UART_Init();
 8001bfc:	f000 fbc0 	bl	8002380 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 8001c00:	f000 fa66 	bl	80020d0 <MX_TIM5_Init>
	MX_TIM9_Init();
 8001c04:	f000 fae6 	bl	80021d4 <MX_TIM9_Init>
	MX_TIM10_Init();
 8001c08:	f000 fb48 	bl	800229c <MX_TIM10_Init>
	MX_TIM11_Init();
 8001c0c:	f000 fb94 	bl	8002338 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	user_init();
 8001c10:	f7ff fa36 	bl	8001080 <user_init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (TRUE == encoder_flag)
 8001c14:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd0 <main+0x100>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <main+0x54>
		{
//			update_encoder_speed();
			encoder_flag = FALSE;
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <main+0x100>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
		}
		if (TRUE == imu_flag)
 8001c24:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <main+0x104>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <main+0x64>
		{
//			read_IMU();
			imu_flag = FALSE;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <main+0x104>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
		}

		check_uart_command();
 8001c34:	f7ff fd02 	bl	800163c <check_uart_command>

		if ((manual_mode) && (HAL_GetTick() - last_manual_time > MANUAL_TIMEOUT))
 8001c38:	4b27      	ldr	r3, [pc, #156]	@ (8001cd8 <main+0x108>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d014      	beq.n	8001c6a <main+0x9a>
 8001c40:	f001 fa10 	bl	8003064 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <main+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d90a      	bls.n	8001c6a <main+0x9a>
		{
			manual_mode = 0;
 8001c54:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <main+0x108>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
			move(0, 0, 0);  // Dừng robot nếu timeout
 8001c5a:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001ce0 <main+0x110>
 8001c5e:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001ce0 <main+0x110>
 8001c62:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001ce0 <main+0x110>
 8001c66:	f7ff fdc7 	bl	80017f8 <move>
		}

//		tx_data.v = v_send;
//		tx_data.yaw = yaw;
//		tx_data.yaw_dot = yaw_dot;
		snprintf(tx_buffer, sizeof(tx_buffer), "%.3f %.3f %.3f\n", v_send, yaw, yaw_dot);
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <main+0x114>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc72 	bl	8000558 <__aeabi_f2d>
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <main+0x118>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc6b 	bl	8000558 <__aeabi_f2d>
 8001c82:	4680      	mov	r8, r0
 8001c84:	4689      	mov	r9, r1
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <main+0x11c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc64 	bl	8000558 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c98:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c9c:	e9cd 4500 	strd	r4, r5, [sp]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <main+0x120>)
 8001ca2:	2119      	movs	r1, #25
 8001ca4:	4813      	ldr	r0, [pc, #76]	@ (8001cf4 <main+0x124>)
 8001ca6:	f006 ff17 	bl	8008ad8 <sniprintf>
		if (huart6.gState == HAL_UART_STATE_READY)
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <main+0x128>)
 8001cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d1ae      	bne.n	8001c14 <main+0x44>
		{
			HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, strlen(tx_buffer), 3000);
 8001cb6:	480f      	ldr	r0, [pc, #60]	@ (8001cf4 <main+0x124>)
 8001cb8:	f7fe fae2 	bl	8000280 <strlen>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001cc4:	490b      	ldr	r1, [pc, #44]	@ (8001cf4 <main+0x124>)
 8001cc6:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <main+0x128>)
 8001cc8:	f004 fe0e 	bl	80068e8 <HAL_UART_Transmit>
		if (TRUE == encoder_flag)
 8001ccc:	e7a2      	b.n	8001c14 <main+0x44>
 8001cce:	bf00      	nop
 8001cd0:	200005dc 	.word	0x200005dc
 8001cd4:	200005dd 	.word	0x200005dd
 8001cd8:	2000067b 	.word	0x2000067b
 8001cdc:	2000067c 	.word	0x2000067c
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	200006e8 	.word	0x200006e8
 8001ce8:	200006c8 	.word	0x200006c8
 8001cec:	200006d0 	.word	0x200006d0
 8001cf0:	0800b9bc 	.word	0x0800b9bc
 8001cf4:	20000660 	.word	0x20000660
 8001cf8:	200004d4 	.word	0x200004d4

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	@ 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	@ 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 ff5d 	bl	8008bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <SystemClock_Config+0xc8>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a26      	ldr	r2, [pc, #152]	@ (8001dc4 <SystemClock_Config+0xc8>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <SystemClock_Config+0xc8>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <SystemClock_Config+0xcc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <SystemClock_Config+0xcc>)
 8001d46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <SystemClock_Config+0xcc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d60:	2310      	movs	r3, #16
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001d70:	2390      	movs	r3, #144	@ 0x90
 8001d72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d74:	2304      	movs	r3, #4
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 ffe3 	bl	8004d4c <HAL_RCC_OscConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d8c:	f000 fc88 	bl	80026a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2302      	movs	r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2102      	movs	r1, #2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fa45 	bl	800523c <HAL_RCC_ClockConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001db8:	f000 fc72 	bl	80026a0 <Error_Handler>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3750      	adds	r7, #80	@ 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000

08001dcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001dd2:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <MX_I2C3_Init+0x54>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001dd8:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <MX_I2C3_Init+0x58>)
 8001dda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <MX_I2C3_Init+0x50>)
 8001e0a:	f001 ff7b 	bl	8003d04 <HAL_I2C_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e14:	f000 fc44 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000240 	.word	0x20000240
 8001e20:	40005c00 	.word	0x40005c00
 8001e24:	000186a0 	.word	0x000186a0

08001e28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 fec7 	bl	8008bca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e46:	4a23      	ldr	r2, [pc, #140]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e70:	2303      	movs	r3, #3
 8001e72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001e9c:	f003 fdaa 	bl	80059f4 <HAL_TIM_Encoder_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ea6:	f000 fbfb 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	@ (8001ed0 <MX_TIM1_Init+0xa8>)
 8001eb8:	f004 fc44 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ec2:	f000 fbed 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	3730      	adds	r7, #48	@ 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000294 	.word	0x20000294
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	@ 0x30
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2224      	movs	r2, #36	@ 0x24
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f006 fe6f 	bl	8008bca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001ef6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001efa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001f20:	2302      	movs	r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f24:	2301      	movs	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f34:	2301      	movs	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001f48:	f003 fd54 	bl	80059f4 <HAL_TIM_Encoder_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f52:	f000 fba5 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	@ (8001f7c <MX_TIM2_Init+0xa4>)
 8001f64:	f004 fbee 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f6e:	f000 fb97 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	@ 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200002dc 	.word	0x200002dc

08001f80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	@ 0x30
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2224      	movs	r2, #36	@ 0x24
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f006 fe1b 	bl	8008bca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f9c:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001f9e:	4a21      	ldr	r2, [pc, #132]	@ (8002024 <MX_TIM3_Init+0xa4>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	4619      	mov	r1, r3
 8001fec:	480c      	ldr	r0, [pc, #48]	@ (8002020 <MX_TIM3_Init+0xa0>)
 8001fee:	f003 fd01 	bl	80059f4 <HAL_TIM_Encoder_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ff8:	f000 fb52 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <MX_TIM3_Init+0xa0>)
 800200a:	f004 fb9b 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002014:	f000 fb44 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	3730      	adds	r7, #48	@ 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000324 	.word	0x20000324
 8002024:	40000400 	.word	0x40000400

08002028 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2224      	movs	r2, #36	@ 0x24
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f006 fdc7 	bl	8008bca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002044:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 8002046:	4a21      	ldr	r2, [pc, #132]	@ (80020cc <MX_TIM4_Init+0xa4>)
 8002048:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 8002058:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800205c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002064:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 8002066:	2280      	movs	r2, #128	@ 0x80
 8002068:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800206a:	2303      	movs	r3, #3
 800206c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002082:	2301      	movs	r3, #1
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4619      	mov	r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 8002096:	f003 fcad 	bl	80059f4 <HAL_TIM_Encoder_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80020a0:	f000 fafe 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <MX_TIM4_Init+0xa0>)
 80020b2:	f004 fb47 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80020bc:	f000 faf0 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3730      	adds	r7, #48	@ 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000036c 	.word	0x2000036c
 80020cc:	40000800 	.word	0x40000800

080020d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	@ 0x38
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002102:	4a33      	ldr	r2, [pc, #204]	@ (80021d0 <MX_TIM5_Init+0x100>)
 8002104:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72;
 8002106:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002108:	2248      	movs	r2, #72	@ 0x48
 800210a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b2f      	ldr	r3, [pc, #188]	@ (80021cc <MX_TIM5_Init+0xfc>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8002112:	4b2e      	ldr	r3, [pc, #184]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002114:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002118:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b2c      	ldr	r3, [pc, #176]	@ (80021cc <MX_TIM5_Init+0xfc>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002126:	4829      	ldr	r0, [pc, #164]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002128:	f003 faa8 	bl	800567c <HAL_TIM_Base_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002132:	f000 fab5 	bl	80026a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800213c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002140:	4619      	mov	r1, r3
 8002142:	4822      	ldr	r0, [pc, #136]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002144:	f003 ff3c 	bl	8005fc0 <HAL_TIM_ConfigClockSource>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800214e:	f000 faa7 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002152:	481e      	ldr	r0, [pc, #120]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002154:	f003 fb44 	bl	80057e0 <HAL_TIM_PWM_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800215e:	f000 fa9f 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800216a:	f107 0320 	add.w	r3, r7, #32
 800216e:	4619      	mov	r1, r3
 8002170:	4816      	ldr	r0, [pc, #88]	@ (80021cc <MX_TIM5_Init+0xfc>)
 8002172:	f004 fae7 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800217c:	f000 fa90 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002180:	2360      	movs	r3, #96	@ 0x60
 8002182:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002184:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2208      	movs	r2, #8
 8002196:	4619      	mov	r1, r3
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <MX_TIM5_Init+0xfc>)
 800219a:	f003 fe4f 	bl	8005e3c <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80021a4:	f000 fa7c 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	220c      	movs	r2, #12
 80021ac:	4619      	mov	r1, r3
 80021ae:	4807      	ldr	r0, [pc, #28]	@ (80021cc <MX_TIM5_Init+0xfc>)
 80021b0:	f003 fe44 	bl	8005e3c <HAL_TIM_PWM_ConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80021ba:	f000 fa71 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80021be:	4803      	ldr	r0, [pc, #12]	@ (80021cc <MX_TIM5_Init+0xfc>)
 80021c0:	f000 fc5e 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 80021c4:	bf00      	nop
 80021c6:	3738      	adds	r7, #56	@ 0x38
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200003b4 	.word	0x200003b4
 80021d0:	40000c00 	.word	0x40000c00

080021d4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	@ 0x30
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <MX_TIM9_Init+0xc0>)
 80021fc:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <MX_TIM9_Init+0xc4>)
 80021fe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72;
 8002200:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <MX_TIM9_Init+0xc0>)
 8002202:	2248      	movs	r2, #72	@ 0x48
 8002204:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b23      	ldr	r3, [pc, #140]	@ (8002294 <MX_TIM9_Init+0xc0>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800220c:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <MX_TIM9_Init+0xc0>)
 800220e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002212:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <MX_TIM9_Init+0xc0>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <MX_TIM9_Init+0xc0>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002220:	481c      	ldr	r0, [pc, #112]	@ (8002294 <MX_TIM9_Init+0xc0>)
 8002222:	f003 fa2b 	bl	800567c <HAL_TIM_Base_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800222c:	f000 fa38 	bl	80026a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002234:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	4619      	mov	r1, r3
 800223c:	4815      	ldr	r0, [pc, #84]	@ (8002294 <MX_TIM9_Init+0xc0>)
 800223e:	f003 febf 	bl	8005fc0 <HAL_TIM_ConfigClockSource>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002248:	f000 fa2a 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800224c:	4811      	ldr	r0, [pc, #68]	@ (8002294 <MX_TIM9_Init+0xc0>)
 800224e:	f003 fac7 	bl	80057e0 <HAL_TIM_PWM_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002258:	f000 fa22 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225c:	2360      	movs	r3, #96	@ 0x60
 800225e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002260:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2204      	movs	r2, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4807      	ldr	r0, [pc, #28]	@ (8002294 <MX_TIM9_Init+0xc0>)
 8002276:	f003 fde1 	bl	8005e3c <HAL_TIM_PWM_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002280:	f000 fa0e 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <MX_TIM9_Init+0xc0>)
 8002286:	f000 fbfb 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	@ 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200003fc 	.word	0x200003fc
 8002298:	40014000 	.word	0x40014000

0800229c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002334 <MX_TIM10_Init+0x98>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022bc:	2248      	movs	r2, #72	@ 0x48
 80022be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022da:	4815      	ldr	r0, [pc, #84]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022dc:	f003 f9ce 	bl	800567c <HAL_TIM_Base_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80022e6:	f000 f9db 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <MX_TIM10_Init+0x94>)
 80022ec:	f003 fa78 	bl	80057e0 <HAL_TIM_PWM_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80022f6:	f000 f9d3 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	@ 0x60
 80022fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80022fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	4619      	mov	r1, r3
 8002312:	4807      	ldr	r0, [pc, #28]	@ (8002330 <MX_TIM10_Init+0x94>)
 8002314:	f003 fd92 	bl	8005e3c <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800231e:	f000 f9bf 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002322:	4803      	ldr	r0, [pc, #12]	@ (8002330 <MX_TIM10_Init+0x94>)
 8002324:	f000 fbac 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000444 	.word	0x20000444
 8002334:	40014400 	.word	0x40014400

08002338 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_TIM11_Init+0x40>)
 800233e:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <MX_TIM11_Init+0x44>)
 8002340:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7200-1;
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <MX_TIM11_Init+0x40>)
 8002344:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002348:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <MX_TIM11_Init+0x40>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_TIM11_Init+0x40>)
 8002352:	2263      	movs	r2, #99	@ 0x63
 8002354:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <MX_TIM11_Init+0x40>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_TIM11_Init+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_TIM11_Init+0x40>)
 8002364:	f003 f98a 	bl	800567c <HAL_TIM_Base_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800236e:	f000 f997 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000048c 	.word	0x2000048c
 800237c:	40014800 	.word	0x40014800

08002380 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <MX_USART6_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_USART6_UART_Init+0x4c>)
 80023b8:	f004 fa46 	bl	8006848 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f000 f96d 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200004d4 	.word	0x200004d4
 80023d0:	40011400 	.word	0x40011400

080023d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <MX_DMA_Init+0x4c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002420 <MX_DMA_Init+0x4c>)
 80023e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <MX_DMA_Init+0x4c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2039      	movs	r0, #57	@ 0x39
 80023fc:	f000 ff3d 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002400:	2039      	movs	r0, #57	@ 0x39
 8002402:	f000 ff56 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	2045      	movs	r0, #69	@ 0x45
 800240c:	f000 ff35 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002410:	2045      	movs	r0, #69	@ 0x45
 8002412:	f000 ff4e 	bl	80032b2 <HAL_NVIC_EnableIRQ>

}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	@ 0x30
 8002428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	4b92      	ldr	r3, [pc, #584]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a91      	ldr	r2, [pc, #580]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b8f      	ldr	r3, [pc, #572]	@ (8002688 <MX_GPIO_Init+0x264>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	4b8b      	ldr	r3, [pc, #556]	@ (8002688 <MX_GPIO_Init+0x264>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a8a      	ldr	r2, [pc, #552]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b88      	ldr	r3, [pc, #544]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b84      	ldr	r3, [pc, #528]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a83      	ldr	r2, [pc, #524]	@ (8002688 <MX_GPIO_Init+0x264>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b81      	ldr	r3, [pc, #516]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b7d      	ldr	r3, [pc, #500]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a7c      	ldr	r2, [pc, #496]	@ (8002688 <MX_GPIO_Init+0x264>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b7a      	ldr	r3, [pc, #488]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a75      	ldr	r2, [pc, #468]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b73      	ldr	r3, [pc, #460]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002688 <MX_GPIO_Init+0x264>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_3_GPIO_Port, IN2_3_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2108      	movs	r1, #8
 80024e6:	4869      	ldr	r0, [pc, #420]	@ (800268c <MX_GPIO_Init+0x268>)
 80024e8:	f001 fbf2 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_4_Pin|IN1_4_Pin|IN2_1_Pin, GPIO_PIN_RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	f640 0105 	movw	r1, #2053	@ 0x805
 80024f2:	4867      	ldr	r0, [pc, #412]	@ (8002690 <MX_GPIO_Init+0x26c>)
 80024f4:	f001 fbec 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80024f8:	2200      	movs	r2, #0
 80024fa:	f24f 0144 	movw	r1, #61508	@ 0xf044
 80024fe:	4865      	ldr	r0, [pc, #404]	@ (8002694 <MX_GPIO_Init+0x270>)
 8002500:	f001 fbe6 	bl	8003cd0 <HAL_GPIO_WritePin>
                          |IN1_2_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800250a:	4863      	ldr	r0, [pc, #396]	@ (8002698 <MX_GPIO_Init+0x274>)
 800250c:	f001 fbe0 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_3_GPIO_Port, IN1_3_Pin, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002516:	4861      	ldr	r0, [pc, #388]	@ (800269c <MX_GPIO_Init+0x278>)
 8002518:	f001 fbda 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800251c:	2304      	movs	r3, #4
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002520:	2300      	movs	r3, #0
 8002522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	4857      	ldr	r0, [pc, #348]	@ (800268c <MX_GPIO_Init+0x268>)
 8002530:	f001 fa4a 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_3_Pin */
  GPIO_InitStruct.Pin = IN2_3_Pin;
 8002534:	2308      	movs	r3, #8
 8002536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IN2_3_GPIO_Port, &GPIO_InitStruct);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	4850      	ldr	r0, [pc, #320]	@ (800268c <MX_GPIO_Init+0x268>)
 800254c:	f001 fa3c 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002550:	2332      	movs	r3, #50	@ 0x32
 8002552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002554:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	4619      	mov	r1, r3
 8002564:	4849      	ldr	r0, [pc, #292]	@ (800268c <MX_GPIO_Init+0x268>)
 8002566:	f001 fa2f 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_4_Pin IN1_4_Pin IN2_1_Pin */
  GPIO_InitStruct.Pin = IN2_4_Pin|IN1_4_Pin|IN2_1_Pin;
 800256a:	f640 0305 	movw	r3, #2053	@ 0x805
 800256e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4843      	ldr	r0, [pc, #268]	@ (8002690 <MX_GPIO_Init+0x26c>)
 8002584:	f001 fa20 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002588:	2301      	movs	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800258c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	483e      	ldr	r0, [pc, #248]	@ (8002698 <MX_GPIO_Init+0x274>)
 800259e:	f001 fa13 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           IN1_2_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80025a2:	f24f 0344 	movw	r3, #61508	@ 0xf044
 80025a6:	61fb      	str	r3, [r7, #28]
                          |IN1_2_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	4836      	ldr	r0, [pc, #216]	@ (8002694 <MX_GPIO_Init+0x270>)
 80025bc:	f001 fa04 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80025c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4830      	ldr	r0, [pc, #192]	@ (8002698 <MX_GPIO_Init+0x274>)
 80025d6:	f001 f9f7 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80025da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025ec:	230a      	movs	r3, #10
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	4828      	ldr	r0, [pc, #160]	@ (8002698 <MX_GPIO_Init+0x274>)
 80025f8:	f001 f9e6 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_1_Pin */
  GPIO_InitStruct.Pin = IN1_1_Pin;
 80025fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IN1_1_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4820      	ldr	r0, [pc, #128]	@ (8002698 <MX_GPIO_Init+0x274>)
 8002616:	f001 f9d7 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800261a:	2310      	movs	r3, #16
 800261c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002622:	2301      	movs	r3, #1
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	4819      	ldr	r0, [pc, #100]	@ (8002694 <MX_GPIO_Init+0x270>)
 800262e:	f001 f9cb 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002632:	2320      	movs	r3, #32
 8002634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	4813      	ldr	r0, [pc, #76]	@ (8002694 <MX_GPIO_Init+0x270>)
 8002646:	f001 f9bf 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800264a:	2320      	movs	r3, #32
 800264c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002652:	2301      	movs	r3, #1
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	480f      	ldr	r0, [pc, #60]	@ (800269c <MX_GPIO_Init+0x278>)
 800265e:	f001 f9b3 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_3_Pin */
  GPIO_InitStruct.Pin = IN1_3_Pin;
 8002662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	2301      	movs	r3, #1
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IN1_3_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	4808      	ldr	r0, [pc, #32]	@ (800269c <MX_GPIO_Init+0x278>)
 800267c:	f001 f9a4 	bl	80039c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002680:	bf00      	nop
 8002682:	3730      	adds	r7, #48	@ 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	40021000 	.word	0x40021000
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400

080026a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <Error_Handler+0x8>

080026ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_MspInit+0x4c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	4a0f      	ldr	r2, [pc, #60]	@ (80026f8 <HAL_MspInit+0x4c>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c2:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <HAL_MspInit+0x4c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_MspInit+0x4c>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <HAL_MspInit+0x4c>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_MspInit+0x4c>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026ea:	2007      	movs	r0, #7
 80026ec:	f000 fdba 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a29      	ldr	r2, [pc, #164]	@ (80027c0 <HAL_I2C_MspInit+0xc4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d14b      	bne.n	80027b6 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a20      	ldr	r2, [pc, #128]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800275a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275c:	2312      	movs	r3, #18
 800275e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002768:	2304      	movs	r3, #4
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	4815      	ldr	r0, [pc, #84]	@ (80027c8 <HAL_I2C_MspInit+0xcc>)
 8002774:	f001 f928 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800278a:	2304      	movs	r3, #4
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	480d      	ldr	r0, [pc, #52]	@ (80027cc <HAL_I2C_MspInit+0xd0>)
 8002796:	f001 f917 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 80027a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_I2C_MspInit+0xc8>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	@ 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40005c00 	.word	0x40005c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b090      	sub	sp, #64	@ 0x40
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a68      	ldr	r2, [pc, #416]	@ (8002990 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d135      	bne.n	800285e <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	4a66      	ldr	r2, [pc, #408]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6453      	str	r3, [r2, #68]	@ 0x44
 8002802:	4b64      	ldr	r3, [pc, #400]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	4b60      	ldr	r3, [pc, #384]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	4a5f      	ldr	r2, [pc, #380]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002818:	f043 0310 	orr.w	r3, r3, #16
 800281c:	6313      	str	r3, [r2, #48]	@ 0x30
 800281e:	4b5d      	ldr	r3, [pc, #372]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCA_1_Pin|ENCB_1_Pin;
 800282a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002834:	2301      	movs	r3, #1
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800283c:	2301      	movs	r3, #1
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002844:	4619      	mov	r1, r3
 8002846:	4854      	ldr	r0, [pc, #336]	@ (8002998 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002848:	f001 f8be 	bl	80039c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	201a      	movs	r0, #26
 8002852:	f000 fd12 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002856:	201a      	movs	r0, #26
 8002858:	f000 fd2b 	bl	80032b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800285c:	e094      	b.n	8002988 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002866:	d12c      	bne.n	80028c2 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	4b49      	ldr	r3, [pc, #292]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	4a48      	ldr	r2, [pc, #288]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6413      	str	r3, [r2, #64]	@ 0x40
 8002878:	4b46      	ldr	r3, [pc, #280]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	4b42      	ldr	r3, [pc, #264]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	4a41      	ldr	r2, [pc, #260]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6313      	str	r3, [r2, #48]	@ 0x30
 8002894:	4b3f      	ldr	r3, [pc, #252]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENCB_3_Pin|ENCA_3_Pin;
 80028a0:	2322      	movs	r3, #34	@ 0x22
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028b0:	2301      	movs	r3, #1
 80028b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b8:	4619      	mov	r1, r3
 80028ba:	4838      	ldr	r0, [pc, #224]	@ (800299c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80028bc:	f001 f884 	bl	80039c8 <HAL_GPIO_Init>
}
 80028c0:	e062      	b.n	8002988 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a36      	ldr	r2, [pc, #216]	@ (80029a0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d12c      	bne.n	8002926 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	6413      	str	r3, [r2, #64]	@ 0x40
 80028dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f8:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENCA_4_Pin|ENCB_4_Pin;
 8002904:	23c0      	movs	r3, #192	@ 0xc0
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800290c:	2301      	movs	r3, #1
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002914:	2302      	movs	r3, #2
 8002916:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800291c:	4619      	mov	r1, r3
 800291e:	481f      	ldr	r0, [pc, #124]	@ (800299c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002920:	f001 f852 	bl	80039c8 <HAL_GPIO_Init>
}
 8002924:	e030      	b.n	8002988 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM4)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1e      	ldr	r2, [pc, #120]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d12b      	bne.n	8002988 <HAL_TIM_Encoder_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	4a0f      	ldr	r2, [pc, #60]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002956:	f043 0302 	orr.w	r3, r3, #2
 800295a:	6313      	str	r3, [r2, #48]	@ 0x30
 800295c:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCA_2_Pin|ENCB_2_Pin;
 8002968:	23c0      	movs	r3, #192	@ 0xc0
 800296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002970:	2301      	movs	r3, #1
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002978:	2302      	movs	r3, #2
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002980:	4619      	mov	r1, r3
 8002982:	4809      	ldr	r0, [pc, #36]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002984:	f001 f820 	bl	80039c8 <HAL_GPIO_Init>
}
 8002988:	bf00      	nop
 800298a:	3740      	adds	r7, #64	@ 0x40
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40010000 	.word	0x40010000
 8002994:	40023800 	.word	0x40023800
 8002998:	40021000 	.word	0x40021000
 800299c:	40020000 	.word	0x40020000
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40020400 	.word	0x40020400

080029ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a6c <HAL_TIM_Base_MspInit+0xc0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ce:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80029da:	e042      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM9)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <HAL_TIM_Base_MspInit+0xc8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
}
 8002a02:	e02e      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1b      	ldr	r2, [pc, #108]	@ (8002a78 <HAL_TIM_Base_MspInit+0xcc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1e:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	e01a      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <HAL_TIM_Base_MspInit+0xd0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d115      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_TIM_Base_MspInit+0xc4>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	201a      	movs	r0, #26
 8002a58:	f000 fc0f 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a5c:	201a      	movs	r0, #26
 8002a5e:	f000 fc28 	bl	80032b2 <HAL_NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40000c00 	.word	0x40000c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40014000 	.word	0x40014000
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800

08002a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a36      	ldr	r2, [pc, #216]	@ (8002b78 <HAL_TIM_MspPostInit+0xf8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11e      	bne.n	8002ae0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b35      	ldr	r3, [pc, #212]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a34      	ldr	r2, [pc, #208]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4829      	ldr	r0, [pc, #164]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002ada:	f000 ff75 	bl	80039c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002ade:	e047      	b.n	8002b70 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM9)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	@ (8002b84 <HAL_TIM_MspPostInit+0x104>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d11e      	bne.n	8002b28 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002af4:	f043 0310 	orr.w	r3, r3, #16
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8002b06:	2340      	movs	r3, #64	@ 0x40
 8002b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b16:	2303      	movs	r3, #3
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4819      	ldr	r0, [pc, #100]	@ (8002b88 <HAL_TIM_MspPostInit+0x108>)
 8002b22:	f000 ff51 	bl	80039c8 <HAL_GPIO_Init>
}
 8002b26:	e023      	b.n	8002b70 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM10)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_TIM_MspPostInit+0x10c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11e      	bne.n	8002b70 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a10      	ldr	r2, [pc, #64]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2_Pin;
 8002b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002b60:	2303      	movs	r3, #3
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <HAL_TIM_MspPostInit+0x110>)
 8002b6c:	f000 ff2c 	bl	80039c8 <HAL_GPIO_Init>
}
 8002b70:	bf00      	nop
 8002b72:	3728      	adds	r7, #40	@ 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40000c00 	.word	0x40000c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40020400 	.word	0x40020400

08002b94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	@ 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a48      	ldr	r2, [pc, #288]	@ (8002cd4 <HAL_UART_MspInit+0x140>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 8089 	bne.w	8002cca <HAL_UART_MspInit+0x136>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	4b46      	ldr	r3, [pc, #280]	@ (8002cd8 <HAL_UART_MspInit+0x144>)
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc0:	4a45      	ldr	r2, [pc, #276]	@ (8002cd8 <HAL_UART_MspInit+0x144>)
 8002bc2:	f043 0320 	orr.w	r3, r3, #32
 8002bc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc8:	4b43      	ldr	r3, [pc, #268]	@ (8002cd8 <HAL_UART_MspInit+0x144>)
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd8 <HAL_UART_MspInit+0x144>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8002cd8 <HAL_UART_MspInit+0x144>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be4:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd8 <HAL_UART_MspInit+0x144>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bf0:	23c0      	movs	r3, #192	@ 0xc0
 8002bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c00:	2308      	movs	r3, #8
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4834      	ldr	r0, [pc, #208]	@ (8002cdc <HAL_UART_MspInit+0x148>)
 8002c0c:	f000 fedc 	bl	80039c8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c10:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c12:	4a34      	ldr	r2, [pc, #208]	@ (8002ce4 <HAL_UART_MspInit+0x150>)
 8002c14:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c16:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c18:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002c1c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1e:	4b30      	ldr	r3, [pc, #192]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c30:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c38:	4b29      	ldr	r3, [pc, #164]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002c3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c44:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c46:	4b26      	ldr	r3, [pc, #152]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002c52:	4823      	ldr	r0, [pc, #140]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c54:	f000 fb48 	bl	80032e8 <HAL_DMA_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c5e:	f7ff fd1f 	bl	80026a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c68:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c70:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <HAL_UART_MspInit+0x158>)
 8002c72:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c76:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c7e:	2240      	movs	r2, #64	@ 0x40
 8002c80:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c82:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c88:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c8e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c90:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c96:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002cae:	480e      	ldr	r0, [pc, #56]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002cb0:	f000 fb1a 	bl	80032e8 <HAL_DMA_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002cba:	f7ff fcf1 	bl	80026a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a09      	ldr	r2, [pc, #36]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cc4:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <HAL_UART_MspInit+0x154>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002cca:	bf00      	nop
 8002ccc:	3728      	adds	r7, #40	@ 0x28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	2000051c 	.word	0x2000051c
 8002ce4:	40026428 	.word	0x40026428
 8002ce8:	2000057c 	.word	0x2000057c
 8002cec:	400264a0 	.word	0x400264a0

08002cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <NMI_Handler+0x4>

08002cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <HardFault_Handler+0x4>

08002d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <MemManage_Handler+0x4>

08002d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d46:	f000 f979 	bl	800303c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d54:	4803      	ldr	r0, [pc, #12]	@ (8002d64 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002d56:	f002 ff81 	bl	8005c5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002d5a:	4803      	ldr	r0, [pc, #12]	@ (8002d68 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002d5c:	f002 ff7e 	bl	8005c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000294 	.word	0x20000294
 8002d68:	2000048c 	.word	0x2000048c

08002d6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002d70:	4802      	ldr	r0, [pc, #8]	@ (8002d7c <DMA2_Stream1_IRQHandler+0x10>)
 8002d72:	f000 fbbf 	bl	80034f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000051c 	.word	0x2000051c

08002d80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <DMA2_Stream6_IRQHandler+0x10>)
 8002d86:	f000 fbb5 	bl	80034f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000057c 	.word	0x2000057c

08002d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return 1;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <_kill>:

int _kill(int pid, int sig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dae:	f005 ffcd 	bl	8008d4c <__errno>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2216      	movs	r2, #22
 8002db6:	601a      	str	r2, [r3, #0]
  return -1;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_exit>:

void _exit (int status)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <_exit+0x12>

08002dda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e00a      	b.n	8002e02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dec:	f3af 8000 	nop.w
 8002df0:	4601      	mov	r1, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	60ba      	str	r2, [r7, #8]
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dbf0      	blt.n	8002dec <_read+0x12>
  }

  return len;
 8002e0a:	687b      	ldr	r3, [r7, #4]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e009      	b.n	8002e3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	60ba      	str	r2, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbf1      	blt.n	8002e26 <_write+0x12>
  }
  return len;
 8002e42:	687b      	ldr	r3, [r7, #4]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_close>:

int _close(int file)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e74:	605a      	str	r2, [r3, #4]
  return 0;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_isatty>:

int _isatty(int file)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f005 ff32 	bl	8008d4c <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20020000 	.word	0x20020000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	200006f0 	.word	0x200006f0
 8002f1c:	20000848 	.word	0x20000848

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <SystemInit+0x20>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <SystemInit+0x20>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f48:	f7ff ffea 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f4c:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f4e:	490d      	ldr	r1, [pc, #52]	@ (8002f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f54:	e002      	b.n	8002f5c <LoopCopyDataInit>

08002f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5a:	3304      	adds	r3, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f60:	d3f9      	bcc.n	8002f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f64:	4c0a      	ldr	r4, [pc, #40]	@ (8002f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f68:	e001      	b.n	8002f6e <LoopFillZerobss>

08002f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f6c:	3204      	adds	r2, #4

08002f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f70:	d3fb      	bcc.n	8002f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f72:	f005 fef1 	bl	8008d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f76:	f7fe fe2b 	bl	8001bd0 <main>
  bx  lr    
 8002f7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002f88:	0800be90 	.word	0x0800be90
  ldr r2, =_sbss
 8002f8c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002f90:	20000844 	.word	0x20000844

08002f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <HAL_Init+0x40>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <HAL_Init+0x40>)
 8002fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb4:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <HAL_Init+0x40>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 f94f 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 f808 	bl	8002fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fcc:	f7ff fb6e 	bl	80026ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe4:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <HAL_InitTick+0x54>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_InitTick+0x58>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f967 	bl	80032ce <HAL_SYSTICK_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e00e      	b.n	8003028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d80a      	bhi.n	8003026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f000 f92f 	bl	800327a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <HAL_InitTick+0x5c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000050 	.word	0x20000050
 8003034:	20000058 	.word	0x20000058
 8003038:	20000054 	.word	0x20000054

0800303c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_IncTick+0x20>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_IncTick+0x24>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4413      	add	r3, r2
 800304c:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <HAL_IncTick+0x24>)
 800304e:	6013      	str	r3, [r2, #0]
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000058 	.word	0x20000058
 8003060:	200006f4 	.word	0x200006f4

08003064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return uwTick;
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_GetTick+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	200006f4 	.word	0x200006f4

0800307c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7ff ffee 	bl	8003064 <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d005      	beq.n	80030a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_Delay+0x44>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a2:	bf00      	nop
 80030a4:	f7ff ffde 	bl	8003064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d8f7      	bhi.n	80030a4 <HAL_Delay+0x28>
  {
  }
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000058 	.word	0x20000058

080030c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f6:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	60d3      	str	r3, [r2, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <__NVIC_GetPriorityGrouping+0x18>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 0307 	and.w	r3, r3, #7
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db0b      	blt.n	8003152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	4907      	ldr	r1, [pc, #28]	@ (8003160 <__NVIC_EnableIRQ+0x38>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2001      	movs	r0, #1
 800314a:	fa00 f202 	lsl.w	r2, r0, r2
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e100 	.word	0xe000e100

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	@ (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	@ (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	@ 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
         );
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff8e 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff29 	bl	80030c4 <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff3e 	bl	800310c <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff8e 	bl	80031b8 <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5d 	bl	8003164 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff31 	bl	8003128 <__NVIC_EnableIRQ>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa2 	bl	8003220 <SysTick_Config>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff feb6 	bl	8003064 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e099      	b.n	8003438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	e00f      	b.n	8003346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003326:	f7ff fe9d 	bl	8003064 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d908      	bls.n	8003346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e078      	b.n	8003438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_DMA_Init+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d117      	bne.n	800340a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa6f 	bl	80038d0 <DMA_CheckFifoParam>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003406:	2301      	movs	r3, #1
 8003408:	e016      	b.n	8003438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa26 	bl	8003864 <DMA_CalcBaseAndBitshift>
 8003418:	4603      	mov	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	223f      	movs	r2, #63	@ 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	f010803f 	.word	0xf010803f

08003444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DMA_Start_IT+0x26>
 8003466:	2302      	movs	r3, #2
 8003468:	e040      	b.n	80034ec <HAL_DMA_Start_IT+0xa8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d12f      	bne.n	80034de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f9b8 	bl	8003808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0216 	orr.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0208 	orr.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e005      	b.n	80034ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003500:	4b8e      	ldr	r3, [pc, #568]	@ (800373c <HAL_DMA_IRQHandler+0x248>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a8e      	ldr	r2, [pc, #568]	@ (8003740 <HAL_DMA_IRQHandler+0x24c>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	2208      	movs	r2, #8
 8003520:	409a      	lsls	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01a      	beq.n	8003560 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354c:	2208      	movs	r2, #8
 800354e:	409a      	lsls	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	2201      	movs	r2, #1
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	2201      	movs	r2, #1
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	2204      	movs	r2, #4
 800359c:	409a      	lsls	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	2204      	movs	r2, #4
 80035ba:	409a      	lsls	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d0:	2210      	movs	r2, #16
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d043      	beq.n	8003664 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03c      	beq.n	8003664 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ee:	2210      	movs	r2, #16
 80035f0:	409a      	lsls	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d018      	beq.n	8003636 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d108      	bne.n	8003624 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d024      	beq.n	8003664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
 8003622:	e01f      	b.n	8003664 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e016      	b.n	8003664 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0208 	bic.w	r2, r2, #8
 8003652:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2220      	movs	r2, #32
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 808f 	beq.w	8003794 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8087 	beq.w	8003794 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2220      	movs	r2, #32
 800368c:	409a      	lsls	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b05      	cmp	r3, #5
 800369c:	d136      	bne.n	800370c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0216 	bic.w	r2, r2, #22
 80036ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <HAL_DMA_IRQHandler+0x1da>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0208 	bic.w	r2, r2, #8
 80036dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	223f      	movs	r2, #63	@ 0x3f
 80036e4:	409a      	lsls	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d07e      	beq.n	8003800 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
        }
        return;
 800370a:	e079      	b.n	8003800 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	2b00      	cmp	r3, #0
 800372e:	d031      	beq.n	8003794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e02c      	b.n	8003794 <HAL_DMA_IRQHandler+0x2a0>
 800373a:	bf00      	nop
 800373c:	20000050 	.word	0x20000050
 8003740:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d023      	beq.n	8003794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e01e      	b.n	8003794 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10f      	bne.n	8003784 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0210 	bic.w	r2, r2, #16
 8003772:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	2b00      	cmp	r3, #0
 800379a:	d032      	beq.n	8003802 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2205      	movs	r2, #5
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d307      	bcc.n	80037dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f2      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x2cc>
 80037da:	e000      	b.n	80037de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
 80037fe:	e000      	b.n	8003802 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003800:	bf00      	nop
    }
  }
}
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b40      	cmp	r3, #64	@ 0x40
 8003834:	d108      	bne.n	8003848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003846:	e007      	b.n	8003858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3b10      	subs	r3, #16
 8003874:	4a14      	ldr	r2, [pc, #80]	@ (80038c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800387e:	4a13      	ldr	r2, [pc, #76]	@ (80038cc <DMA_CalcBaseAndBitshift+0x68>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d909      	bls.n	80038a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80038a4:	e007      	b.n	80038b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	aaaaaaab 	.word	0xaaaaaaab
 80038cc:	0800b9e4 	.word	0x0800b9e4

080038d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11f      	bne.n	800392a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d856      	bhi.n	800399e <DMA_CheckFifoParam+0xce>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <DMA_CheckFifoParam+0x28>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003909 	.word	0x08003909
 80038fc:	0800391b 	.word	0x0800391b
 8003900:	08003909 	.word	0x08003909
 8003904:	0800399f 	.word	0x0800399f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d046      	beq.n	80039a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003918:	e043      	b.n	80039a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003922:	d140      	bne.n	80039a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e03d      	b.n	80039a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003932:	d121      	bne.n	8003978 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d837      	bhi.n	80039aa <DMA_CheckFifoParam+0xda>
 800393a:	a201      	add	r2, pc, #4	@ (adr r2, 8003940 <DMA_CheckFifoParam+0x70>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003951 	.word	0x08003951
 8003944:	08003957 	.word	0x08003957
 8003948:	08003951 	.word	0x08003951
 800394c:	08003969 	.word	0x08003969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e030      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d025      	beq.n	80039ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003966:	e022      	b.n	80039ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003970:	d11f      	bne.n	80039b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003976:	e01c      	b.n	80039b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d903      	bls.n	8003986 <DMA_CheckFifoParam+0xb6>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d003      	beq.n	800398c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003984:	e018      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
      break;
 800398a:	e015      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e00b      	b.n	80039b6 <DMA_CheckFifoParam+0xe6>
      break;
 800399e:	bf00      	nop
 80039a0:	e00a      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e008      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e006      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e004      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
    }
  } 
  
  return status; 
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	@ 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e159      	b.n	8003c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f040 8148 	bne.w	8003c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d005      	beq.n	8003a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d130      	bne.n	8003a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	2203      	movs	r2, #3
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a50:	2201      	movs	r2, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 0201 	and.w	r2, r3, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d017      	beq.n	8003ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d123      	bne.n	8003b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	220f      	movs	r2, #15
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3208      	adds	r2, #8
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0203 	and.w	r2, r3, #3
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a2 	beq.w	8003c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b57      	ldr	r3, [pc, #348]	@ (8003cb0 <HAL_GPIO_Init+0x2e8>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	4a56      	ldr	r2, [pc, #344]	@ (8003cb0 <HAL_GPIO_Init+0x2e8>)
 8003b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5e:	4b54      	ldr	r3, [pc, #336]	@ (8003cb0 <HAL_GPIO_Init+0x2e8>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6a:	4a52      	ldr	r2, [pc, #328]	@ (8003cb4 <HAL_GPIO_Init+0x2ec>)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	220f      	movs	r2, #15
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a49      	ldr	r2, [pc, #292]	@ (8003cb8 <HAL_GPIO_Init+0x2f0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d019      	beq.n	8003bca <HAL_GPIO_Init+0x202>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a48      	ldr	r2, [pc, #288]	@ (8003cbc <HAL_GPIO_Init+0x2f4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_GPIO_Init+0x1fe>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a47      	ldr	r2, [pc, #284]	@ (8003cc0 <HAL_GPIO_Init+0x2f8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00d      	beq.n	8003bc2 <HAL_GPIO_Init+0x1fa>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a46      	ldr	r2, [pc, #280]	@ (8003cc4 <HAL_GPIO_Init+0x2fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <HAL_GPIO_Init+0x1f6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a45      	ldr	r2, [pc, #276]	@ (8003cc8 <HAL_GPIO_Init+0x300>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_GPIO_Init+0x1f2>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bba:	2307      	movs	r3, #7
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bdc:	4935      	ldr	r1, [pc, #212]	@ (8003cb4 <HAL_GPIO_Init+0x2ec>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bea:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c14:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c38:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c68:	4b18      	ldr	r3, [pc, #96]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	f67f aea2 	bls.w	80039e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	@ 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40013c00 	.word	0x40013c00

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cec:	e003      	b.n	8003cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e12b      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe fce6 	bl	80026fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	@ 0x24
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d68:	f001 fc60 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a81      	ldr	r2, [pc, #516]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d807      	bhi.n	8003d88 <HAL_I2C_Init+0x84>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a80      	ldr	r2, [pc, #512]	@ (8003f7c <HAL_I2C_Init+0x278>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bf94      	ite	ls
 8003d80:	2301      	movls	r3, #1
 8003d82:	2300      	movhi	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e006      	b.n	8003d96 <HAL_I2C_Init+0x92>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f80 <HAL_I2C_Init+0x27c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf94      	ite	ls
 8003d90:	2301      	movls	r3, #1
 8003d92:	2300      	movhi	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0e7      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a78      	ldr	r2, [pc, #480]	@ (8003f84 <HAL_I2C_Init+0x280>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_I2C_Init+0xd4>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e009      	b.n	8003dec <HAL_I2C_Init+0xe8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	4a69      	ldr	r2, [pc, #420]	@ (8003f88 <HAL_I2C_Init+0x284>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	3301      	adds	r3, #1
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	495c      	ldr	r1, [pc, #368]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d819      	bhi.n	8003e40 <HAL_I2C_Init+0x13c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e59      	subs	r1, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e20:	400b      	ands	r3, r1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_I2C_Init+0x138>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e59      	subs	r1, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	e051      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	e04f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_I2C_Init+0x168>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e012      	b.n	8003e92 <HAL_I2C_Init+0x18e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	0099      	lsls	r1, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x196>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e022      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_I2C_Init+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e58      	subs	r0, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	440b      	add	r3, r1
 8003eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	0099      	lsls	r1, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	6809      	ldr	r1, [r1, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6911      	ldr	r1, [r2, #16]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68d2      	ldr	r2, [r2, #12]
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	000186a0 	.word	0x000186a0
 8003f7c:	001e847f 	.word	0x001e847f
 8003f80:	003d08ff 	.word	0x003d08ff
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	4608      	mov	r0, r1
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	813b      	strh	r3, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa6:	f7ff f85d 	bl	8003064 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	f040 80d9 	bne.w	800416c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2319      	movs	r3, #25
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	496d      	ldr	r1, [pc, #436]	@ (8004178 <HAL_I2C_Mem_Write+0x1ec>)
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fc8b 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0cc      	b.n	800416e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Mem_Write+0x56>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e0c5      	b.n	800416e <HAL_I2C_Mem_Write+0x1e2>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d007      	beq.n	8004008 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2221      	movs	r2, #33	@ 0x21
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2240      	movs	r2, #64	@ 0x40
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a4d      	ldr	r2, [pc, #308]	@ (800417c <HAL_I2C_Mem_Write+0x1f0>)
 8004048:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800404a:	88f8      	ldrh	r0, [r7, #6]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4603      	mov	r3, r0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fac2 	bl	80045e4 <I2C_RequestMemoryWrite>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d052      	beq.n	800410c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e081      	b.n	800416e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fd50 	bl	8004b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2b04      	cmp	r3, #4
 8004080:	d107      	bne.n	8004092 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06b      	b.n	800416e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11b      	bne.n	800410c <HAL_I2C_Mem_Write+0x180>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d017      	beq.n	800410c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1aa      	bne.n	800406a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fd43 	bl	8004ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	2b04      	cmp	r3, #4
 800412a:	d107      	bne.n	800413c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e016      	b.n	800416e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	00100002 	.word	0x00100002
 800417c:	ffff0000 	.word	0xffff0000

08004180 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	@ 0x30
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800419a:	f7fe ff63 	bl	8003064 <HAL_GetTick>
 800419e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	f040 8214 	bne.w	80045d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2319      	movs	r3, #25
 80041b4:	2201      	movs	r2, #1
 80041b6:	497b      	ldr	r1, [pc, #492]	@ (80043a4 <HAL_I2C_Mem_Read+0x224>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fb91 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	e207      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2C_Mem_Read+0x56>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e200      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d007      	beq.n	80041fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2222      	movs	r2, #34	@ 0x22
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2240      	movs	r2, #64	@ 0x40
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a5b      	ldr	r2, [pc, #364]	@ (80043a8 <HAL_I2C_Mem_Read+0x228>)
 800423c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800423e:	88f8      	ldrh	r0, [r7, #6]
 8004240:	893a      	ldrh	r2, [r7, #8]
 8004242:	8979      	ldrh	r1, [r7, #10]
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa5e 	bl	8004710 <I2C_RequestMemoryRead>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e1bc      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d113      	bne.n	800428e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	623b      	str	r3, [r7, #32]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e190      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	2b01      	cmp	r3, #1
 8004294:	d11b      	bne.n	80042ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e170      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d11b      	bne.n	800430e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	e150      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004324:	e144      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432a:	2b03      	cmp	r3, #3
 800432c:	f200 80f1 	bhi.w	8004512 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	2b01      	cmp	r3, #1
 8004336:	d123      	bne.n	8004380 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fc79 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e145      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800437e:	e117      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	2b02      	cmp	r3, #2
 8004386:	d14e      	bne.n	8004426 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	2200      	movs	r2, #0
 8004390:	4906      	ldr	r1, [pc, #24]	@ (80043ac <HAL_I2C_Mem_Read+0x22c>)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 faa4 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e11a      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
 80043a2:	bf00      	nop
 80043a4:	00100002 	.word	0x00100002
 80043a8:	ffff0000 	.word	0xffff0000
 80043ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004424:	e0c4      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	2200      	movs	r2, #0
 800442e:	496c      	ldr	r1, [pc, #432]	@ (80045e0 <HAL_I2C_Mem_Read+0x460>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa55 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0cb      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	2200      	movs	r2, #0
 800448a:	4955      	ldr	r1, [pc, #340]	@ (80045e0 <HAL_I2C_Mem_Read+0x460>)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fa27 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e09d      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004510:	e04e      	b.n	80045b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fb8c 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e058      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b04      	cmp	r3, #4
 8004564:	d124      	bne.n	80045b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456a:	2b03      	cmp	r3, #3
 800456c:	d107      	bne.n	800457e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800457c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f47f aeb6 	bne.w	8004326 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	@ 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	00010004 	.word	0x00010004

080045e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	461a      	mov	r2, r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	817b      	strh	r3, [r7, #10]
 80045f6:	460b      	mov	r3, r1
 80045f8:	813b      	strh	r3, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2200      	movs	r2, #0
 8004616:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f960 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004634:	d103      	bne.n	800463e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800463c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e05f      	b.n	8004702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	492d      	ldr	r1, [pc, #180]	@ (800470c <I2C_RequestMemoryWrite+0x128>)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f9bb 	bl	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04c      	b.n	8004702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004680:	6a39      	ldr	r1, [r7, #32]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa46 	bl	8004b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00d      	beq.n	80046aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	2b04      	cmp	r3, #4
 8004694:	d107      	bne.n	80046a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e02b      	b.n	8004702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b0:	893b      	ldrh	r3, [r7, #8]
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]
 80046ba:	e021      	b.n	8004700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046bc:	893b      	ldrh	r3, [r7, #8]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	6a39      	ldr	r1, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fa20 	bl	8004b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d107      	bne.n	80046f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e005      	b.n	8004702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f6:	893b      	ldrh	r3, [r7, #8]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	00010002 	.word	0x00010002

08004710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	817b      	strh	r3, [r7, #10]
 8004722:	460b      	mov	r3, r1
 8004724:	813b      	strh	r3, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2200      	movs	r2, #0
 8004752:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f8c2 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004770:	d103      	bne.n	800477a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0aa      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800478c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	4952      	ldr	r1, [pc, #328]	@ (80048dc <I2C_RequestMemoryRead+0x1cc>)
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f91d 	bl	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e097      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047bc:	6a39      	ldr	r1, [r7, #32]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f9a8 	bl	8004b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d107      	bne.n	80047e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e076      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ec:	893b      	ldrh	r3, [r7, #8]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	611a      	str	r2, [r3, #16]
 80047f6:	e021      	b.n	800483c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047f8:	893b      	ldrh	r3, [r7, #8]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004808:	6a39      	ldr	r1, [r7, #32]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f982 	bl	8004b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	2b04      	cmp	r3, #4
 800481c:	d107      	bne.n	800482e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800482c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e050      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004832:	893b      	ldrh	r3, [r7, #8]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	6a39      	ldr	r1, [r7, #32]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f967 	bl	8004b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00d      	beq.n	8004868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	2b04      	cmp	r3, #4
 8004852:	d107      	bne.n	8004864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e035      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	2200      	movs	r2, #0
 8004880:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f82b 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489e:	d103      	bne.n	80048a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e013      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048ac:	897b      	ldrh	r3, [r7, #10]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	4906      	ldr	r1, [pc, #24]	@ (80048dc <I2C_RequestMemoryRead+0x1cc>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f886 	bl	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00010002 	.word	0x00010002

080048e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f0:	e048      	b.n	8004984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d044      	beq.n	8004984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fe fbb3 	bl	8003064 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d139      	bne.n	8004984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10d      	bne.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	43da      	mvns	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	e00c      	b.n	8004950 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	43da      	mvns	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	429a      	cmp	r2, r3
 8004954:	d116      	bne.n	8004984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e023      	b.n	80049cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10d      	bne.n	80049aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	43da      	mvns	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	e00c      	b.n	80049c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	43da      	mvns	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4013      	ands	r3, r2
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d093      	beq.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049e2:	e071      	b.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f2:	d123      	bne.n	8004a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e067      	b.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d041      	beq.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe fb0e 	bl	8003064 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d136      	bne.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10c      	bne.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e00b      	b.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	43da      	mvns	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	f043 0220 	orr.w	r2, r3, #32
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e021      	b.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10c      	bne.n	8004aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e00b      	b.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	43da      	mvns	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4013      	ands	r3, r2
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f af6d 	bne.w	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b20:	e034      	b.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f8e3 	bl	8004cee <I2C_IsAcknowledgeFailed>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e034      	b.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d028      	beq.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fe fa93 	bl	8003064 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11d      	bne.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5a:	2b80      	cmp	r3, #128	@ 0x80
 8004b5c:	d016      	beq.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e007      	b.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b80      	cmp	r3, #128	@ 0x80
 8004b98:	d1c3      	bne.n	8004b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb0:	e034      	b.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f89b 	bl	8004cee <I2C_IsAcknowledgeFailed>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e034      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d028      	beq.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fe fa4b 	bl	8003064 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11d      	bne.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d016      	beq.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d1c3      	bne.n	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c40:	e049      	b.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d119      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e030      	b.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fe f9ee 	bl	8003064 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11d      	bne.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d016      	beq.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e007      	b.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d1ae      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d04:	d11b      	bne.n	8004d3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e267      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d075      	beq.n	8004e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d6a:	4b88      	ldr	r3, [pc, #544]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d00c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b85      	ldr	r3, [pc, #532]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d112      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d82:	4b82      	ldr	r3, [pc, #520]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	4b7e      	ldr	r3, [pc, #504]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05b      	beq.n	8004e54 <HAL_RCC_OscConfig+0x108>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d157      	bne.n	8004e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e242      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x74>
 8004db2:	4b76      	ldr	r3, [pc, #472]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a75      	ldr	r2, [pc, #468]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004dca:	4b70      	ldr	r3, [pc, #448]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6f      	ldr	r2, [pc, #444]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6c      	ldr	r2, [pc, #432]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0xb0>
 8004de4:	4b69      	ldr	r3, [pc, #420]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a68      	ldr	r2, [pc, #416]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b66      	ldr	r3, [pc, #408]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a65      	ldr	r2, [pc, #404]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fe f92e 	bl	8003064 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fe f92a 	bl	8003064 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	@ 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e207      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0xc0>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fe f91a 	bl	8003064 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fe f916 	bl	8003064 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	@ 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1f3      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	4b51      	ldr	r3, [pc, #324]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0xe8>
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e62:	4b4a      	ldr	r3, [pc, #296]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b47      	ldr	r3, [pc, #284]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7a:	4b44      	ldr	r3, [pc, #272]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d116      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	4b41      	ldr	r3, [pc, #260]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x152>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1c7      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4937      	ldr	r1, [pc, #220]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	e03a      	b.n	8004f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ebc:	4b34      	ldr	r3, [pc, #208]	@ (8004f90 <HAL_RCC_OscConfig+0x244>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fe f8cf 	bl	8003064 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fe f8cb 	bl	8003064 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1a8      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b28      	ldr	r3, [pc, #160]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4925      	ldr	r1, [pc, #148]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	e015      	b.n	8004f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efe:	4b24      	ldr	r3, [pc, #144]	@ (8004f90 <HAL_RCC_OscConfig+0x244>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fe f8ae 	bl	8003064 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7fe f8aa 	bl	8003064 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e187      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d036      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <HAL_RCC_OscConfig+0x248>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fe f88e 	bl	8003064 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fe f88a 	bl	8003064 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e167      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x200>
 8004f6a:	e01b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6c:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <HAL_RCC_OscConfig+0x248>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f72:	f7fe f877 	bl	8003064 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	e00e      	b.n	8004f98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fe f873 	bl	8003064 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d907      	bls.n	8004f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e150      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	42470000 	.word	0x42470000
 8004f94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f98:	4b88      	ldr	r3, [pc, #544]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ea      	bne.n	8004f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8097 	beq.w	80050e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb6:	4b81      	ldr	r3, [pc, #516]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	4a7c      	ldr	r2, [pc, #496]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fd2:	4b7a      	ldr	r3, [pc, #488]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe2:	4b77      	ldr	r3, [pc, #476]	@ (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d118      	bne.n	8005020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fee:	4b74      	ldr	r3, [pc, #464]	@ (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a73      	ldr	r2, [pc, #460]	@ (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffa:	f7fe f833 	bl	8003064 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005002:	f7fe f82f 	bl	8003064 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e10c      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	4b6a      	ldr	r3, [pc, #424]	@ (80051c0 <HAL_RCC_OscConfig+0x474>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x2ea>
 8005028:	4b64      	ldr	r3, [pc, #400]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a63      	ldr	r2, [pc, #396]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
 8005034:	e01c      	b.n	8005070 <HAL_RCC_OscConfig+0x324>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d10c      	bne.n	8005058 <HAL_RCC_OscConfig+0x30c>
 800503e:	4b5f      	ldr	r3, [pc, #380]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005042:	4a5e      	ldr	r2, [pc, #376]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	6713      	str	r3, [r2, #112]	@ 0x70
 800504a:	4b5c      	ldr	r3, [pc, #368]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	4a5b      	ldr	r2, [pc, #364]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	@ 0x70
 8005056:	e00b      	b.n	8005070 <HAL_RCC_OscConfig+0x324>
 8005058:	4b58      	ldr	r3, [pc, #352]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	4a57      	ldr	r2, [pc, #348]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6713      	str	r3, [r2, #112]	@ 0x70
 8005064:	4b55      	ldr	r3, [pc, #340]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	4a54      	ldr	r2, [pc, #336]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fd fff4 	bl	8003064 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fd fff0 	bl	8003064 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0cb      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	4b49      	ldr	r3, [pc, #292]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ee      	beq.n	8005080 <HAL_RCC_OscConfig+0x334>
 80050a2:	e014      	b.n	80050ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a4:	f7fd ffde 	bl	8003064 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fd ffda 	bl	8003064 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0b5      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c2:	4b3e      	ldr	r3, [pc, #248]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ee      	bne.n	80050ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b39      	ldr	r3, [pc, #228]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	4a38      	ldr	r2, [pc, #224]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80a1 	beq.w	800522c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ea:	4b34      	ldr	r3, [pc, #208]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d05c      	beq.n	80051b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d141      	bne.n	8005182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b31      	ldr	r3, [pc, #196]	@ (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fd ffae 	bl	8003064 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fd ffaa 	bl	8003064 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e087      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b27      	ldr	r3, [pc, #156]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	491b      	ldr	r1, [pc, #108]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005154:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515a:	f7fd ff83 	bl	8003064 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005162:	f7fd ff7f 	bl	8003064 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e05c      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005174:	4b11      	ldr	r3, [pc, #68]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x416>
 8005180:	e054      	b.n	800522c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fd ff6c 	bl	8003064 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005190:	f7fd ff68 	bl	8003064 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e045      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <HAL_RCC_OscConfig+0x470>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x444>
 80051ae:	e03d      	b.n	800522c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e038      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40007000 	.word	0x40007000
 80051c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <HAL_RCC_OscConfig+0x4ec>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d028      	beq.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d121      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005200:	4293      	cmp	r3, r2
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800

0800523c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0cc      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b68      	ldr	r3, [pc, #416]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d90c      	bls.n	8005278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b65      	ldr	r3, [pc, #404]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b63      	ldr	r3, [pc, #396]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b8      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005290:	4b59      	ldr	r3, [pc, #356]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a58      	ldr	r2, [pc, #352]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800529a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a8:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a52      	ldr	r2, [pc, #328]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b50      	ldr	r3, [pc, #320]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494d      	ldr	r1, [pc, #308]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d044      	beq.n	800535c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b47      	ldr	r3, [pc, #284]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d119      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	4b3f      	ldr	r3, [pc, #252]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e06f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530a:	4b3b      	ldr	r3, [pc, #236]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e067      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0203 	bic.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4934      	ldr	r1, [pc, #208]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800532c:	f7fd fe9a 	bl	8003064 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fd fe96 	bl	8003064 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e04f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	4b2b      	ldr	r3, [pc, #172]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 020c 	and.w	r2, r3, #12
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	429a      	cmp	r2, r3
 800535a:	d1eb      	bne.n	8005334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800535c:	4b25      	ldr	r3, [pc, #148]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d20c      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b22      	ldr	r3, [pc, #136]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4916      	ldr	r1, [pc, #88]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490e      	ldr	r1, [pc, #56]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053c2:	f000 f821 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490a      	ldr	r1, [pc, #40]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fd fdfa 	bl	8002fdc <HAL_InitTick>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023c00 	.word	0x40023c00
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800b9cc 	.word	0x0800b9cc
 8005400:	20000050 	.word	0x20000050
 8005404:	20000054 	.word	0x20000054

08005408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b094      	sub	sp, #80	@ 0x50
 800540e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005420:	4b79      	ldr	r3, [pc, #484]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d00d      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x40>
 800542c:	2b08      	cmp	r3, #8
 800542e:	f200 80e1 	bhi.w	80055f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x34>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d003      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x3a>
 800543a:	e0db      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800543c:	4b73      	ldr	r3, [pc, #460]	@ (800560c <HAL_RCC_GetSysClockFreq+0x204>)
 800543e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005440:	e0db      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005442:	4b73      	ldr	r3, [pc, #460]	@ (8005610 <HAL_RCC_GetSysClockFreq+0x208>)
 8005444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005446:	e0d8      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005448:	4b6f      	ldr	r3, [pc, #444]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005450:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005452:	4b6d      	ldr	r3, [pc, #436]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d063      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545e:	4b6a      	ldr	r3, [pc, #424]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	099b      	lsrs	r3, r3, #6
 8005464:	2200      	movs	r2, #0
 8005466:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005468:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	@ 0x34
 8005476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800547a:	4622      	mov	r2, r4
 800547c:	462b      	mov	r3, r5
 800547e:	f04f 0000 	mov.w	r0, #0
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	0159      	lsls	r1, r3, #5
 8005488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800548c:	0150      	lsls	r0, r2, #5
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4621      	mov	r1, r4
 8005494:	1a51      	subs	r1, r2, r1
 8005496:	6139      	str	r1, [r7, #16]
 8005498:	4629      	mov	r1, r5
 800549a:	eb63 0301 	sbc.w	r3, r3, r1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ac:	4659      	mov	r1, fp
 80054ae:	018b      	lsls	r3, r1, #6
 80054b0:	4651      	mov	r1, sl
 80054b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054b6:	4651      	mov	r1, sl
 80054b8:	018a      	lsls	r2, r1, #6
 80054ba:	4651      	mov	r1, sl
 80054bc:	ebb2 0801 	subs.w	r8, r2, r1
 80054c0:	4659      	mov	r1, fp
 80054c2:	eb63 0901 	sbc.w	r9, r3, r1
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054da:	4690      	mov	r8, r2
 80054dc:	4699      	mov	r9, r3
 80054de:	4623      	mov	r3, r4
 80054e0:	eb18 0303 	adds.w	r3, r8, r3
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	462b      	mov	r3, r5
 80054e8:	eb49 0303 	adc.w	r3, r9, r3
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054fa:	4629      	mov	r1, r5
 80054fc:	024b      	lsls	r3, r1, #9
 80054fe:	4621      	mov	r1, r4
 8005500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005504:	4621      	mov	r1, r4
 8005506:	024a      	lsls	r2, r1, #9
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800550e:	2200      	movs	r2, #0
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005518:	f7fb fbbe 	bl	8000c98 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4613      	mov	r3, r2
 8005522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005524:	e058      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005526:	4b38      	ldr	r3, [pc, #224]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	2200      	movs	r2, #0
 800552e:	4618      	mov	r0, r3
 8005530:	4611      	mov	r1, r2
 8005532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
 800553c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	0159      	lsls	r1, r3, #5
 800554e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005552:	0150      	lsls	r0, r2, #5
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4641      	mov	r1, r8
 800555a:	ebb2 0a01 	subs.w	sl, r2, r1
 800555e:	4649      	mov	r1, r9
 8005560:	eb63 0b01 	sbc.w	fp, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005578:	ebb2 040a 	subs.w	r4, r2, sl
 800557c:	eb63 050b 	sbc.w	r5, r3, fp
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	00eb      	lsls	r3, r5, #3
 800558a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800558e:	00e2      	lsls	r2, r4, #3
 8005590:	4614      	mov	r4, r2
 8005592:	461d      	mov	r5, r3
 8005594:	4643      	mov	r3, r8
 8005596:	18e3      	adds	r3, r4, r3
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	464b      	mov	r3, r9
 800559c:	eb45 0303 	adc.w	r3, r5, r3
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ae:	4629      	mov	r1, r5
 80055b0:	028b      	lsls	r3, r1, #10
 80055b2:	4621      	mov	r1, r4
 80055b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055b8:	4621      	mov	r1, r4
 80055ba:	028a      	lsls	r2, r1, #10
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c2:	2200      	movs	r2, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055cc:	f7fb fb64 	bl	8000c98 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055f2:	e002      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f4:	4b05      	ldr	r3, [pc, #20]	@ (800560c <HAL_RCC_GetSysClockFreq+0x204>)
 80055f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3750      	adds	r7, #80	@ 0x50
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	007a1200 	.word	0x007a1200

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000050 	.word	0x20000050

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	@ (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a9b      	lsrs	r3, r3, #10
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	@ (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	0800b9dc 	.word	0x0800b9dc

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffdc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0b5b      	lsrs	r3, r3, #13
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	@ (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	0800b9dc 	.word	0x0800b9dc

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e041      	b.n	8005712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fd f982 	bl	80029ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fd70 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d001      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e044      	b.n	80057be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575e:	d013      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1a      	ldr	r2, [pc, #104]	@ (80057d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a19      	ldr	r2, [pc, #100]	@ (80057d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a16      	ldr	r2, [pc, #88]	@ (80057dc <HAL_TIM_Base_Start_IT+0xc0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d111      	bne.n	80057ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b06      	cmp	r3, #6
 8005798:	d010      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	e007      	b.n	80057bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e041      	b.n	8005876 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f839 	bl	800587e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f000 fcbe 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_TIM_PWM_Start+0x24>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e022      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d109      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x3e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e015      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x58>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e008      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e068      	b.n	80059d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0x82>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	e013      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0x92>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	e00b      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xa2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005934:	e003      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2201      	movs	r2, #1
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fed6 	bl	80066f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a23      	ldr	r2, [pc, #140]	@ (80059e0 <HAL_TIM_PWM_Start+0x14c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d107      	bne.n	8005966 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005964:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1d      	ldr	r2, [pc, #116]	@ (80059e0 <HAL_TIM_PWM_Start+0x14c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x10e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005978:	d013      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x10e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <HAL_TIM_PWM_Start+0x150>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x10e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a17      	ldr	r2, [pc, #92]	@ (80059e8 <HAL_TIM_PWM_Start+0x154>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x10e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a16      	ldr	r2, [pc, #88]	@ (80059ec <HAL_TIM_PWM_Start+0x158>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x10e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a14      	ldr	r2, [pc, #80]	@ (80059f0 <HAL_TIM_PWM_Start+0x15c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b06      	cmp	r3, #6
 80059b2:	d010      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	e007      	b.n	80059d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40014000 	.word	0x40014000

080059f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e097      	b.n	8005b38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fc fed7 	bl	80027d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a38:	f023 0307 	bic.w	r3, r3, #7
 8005a3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 fba9 	bl	80061a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	4313      	orrs	r3, r2
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a94:	f023 030c 	bic.w	r3, r3, #12
 8005a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005aa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	011a      	lsls	r2, r3, #4
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	031b      	lsls	r3, r3, #12
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d110      	bne.n	8005b92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d102      	bne.n	8005b7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d001      	beq.n	8005b80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e069      	b.n	8005c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b90:	e031      	b.n	8005bf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d110      	bne.n	8005bba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d102      	bne.n	8005ba4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d001      	beq.n	8005ba8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e055      	b.n	8005c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb8:	e01d      	b.n	8005bf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d108      	bne.n	8005bd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d105      	bne.n	8005bd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc6:	7b7b      	ldrb	r3, [r7, #13]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d102      	bne.n	8005bd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bcc:	7b3b      	ldrb	r3, [r7, #12]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e03e      	b.n	8005c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_TIM_Encoder_Start+0xc4>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d008      	beq.n	8005c14 <HAL_TIM_Encoder_Start+0xd4>
 8005c02:	e00f      	b.n	8005c24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fd73 	bl	80066f8 <TIM_CCxChannelCmd>
      break;
 8005c12:	e016      	b.n	8005c42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fd6b 	bl	80066f8 <TIM_CCxChannelCmd>
      break;
 8005c22:	e00e      	b.n	8005c42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fd63 	bl	80066f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2201      	movs	r2, #1
 8005c38:	2104      	movs	r1, #4
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fd5c 	bl	80066f8 <TIM_CCxChannelCmd>
      break;
 8005c40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f042 0201 	orr.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d020      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01b      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0202 	mvn.w	r2, #2
 8005c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa5b 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa4d 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa5e 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d020      	beq.n	8005d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01b      	beq.n	8005d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0204 	mvn.w	r2, #4
 8005cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa35 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005cf8:	e005      	b.n	8005d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa27 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fa38 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d020      	beq.n	8005d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01b      	beq.n	8005d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0208 	mvn.w	r2, #8
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa0f 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa01 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fa12 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d020      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01b      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0210 	mvn.w	r2, #16
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9e9 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9db 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f9ec 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0201 	mvn.w	r2, #1
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fb f934 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fd24 	bl	8006834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9bd 	bl	800618a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0220 	mvn.w	r2, #32
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fcf6 	bl	8006820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e0ae      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b0c      	cmp	r3, #12
 8005e66:	f200 809f 	bhi.w	8005fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005fa9 	.word	0x08005fa9
 8005e78:	08005fa9 	.word	0x08005fa9
 8005e7c:	08005fa9 	.word	0x08005fa9
 8005e80:	08005ee5 	.word	0x08005ee5
 8005e84:	08005fa9 	.word	0x08005fa9
 8005e88:	08005fa9 	.word	0x08005fa9
 8005e8c:	08005fa9 	.word	0x08005fa9
 8005e90:	08005f27 	.word	0x08005f27
 8005e94:	08005fa9 	.word	0x08005fa9
 8005e98:	08005fa9 	.word	0x08005fa9
 8005e9c:	08005fa9 	.word	0x08005fa9
 8005ea0:	08005f67 	.word	0x08005f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f9fe 	bl	80062ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0208 	orr.w	r2, r2, #8
 8005ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0204 	bic.w	r2, r2, #4
 8005ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6999      	ldr	r1, [r3, #24]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	619a      	str	r2, [r3, #24]
      break;
 8005ee2:	e064      	b.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fa44 	bl	8006378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6999      	ldr	r1, [r3, #24]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	021a      	lsls	r2, r3, #8
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	619a      	str	r2, [r3, #24]
      break;
 8005f24:	e043      	b.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fa8f 	bl	8006450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0208 	orr.w	r2, r2, #8
 8005f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0204 	bic.w	r2, r2, #4
 8005f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69d9      	ldr	r1, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	61da      	str	r2, [r3, #28]
      break;
 8005f64:	e023      	b.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fad9 	bl	8006524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69d9      	ldr	r1, [r3, #28]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	021a      	lsls	r2, r3, #8
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	61da      	str	r2, [r3, #28]
      break;
 8005fa6:	e002      	b.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
      break;
 8005fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_ConfigClockSource+0x1c>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e0b4      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x186>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006014:	d03e      	beq.n	8006094 <HAL_TIM_ConfigClockSource+0xd4>
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	f200 8087 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006022:	f000 8086 	beq.w	8006132 <HAL_TIM_ConfigClockSource+0x172>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602a:	d87f      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800602c:	2b70      	cmp	r3, #112	@ 0x70
 800602e:	d01a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0xa6>
 8006030:	2b70      	cmp	r3, #112	@ 0x70
 8006032:	d87b      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 8006034:	2b60      	cmp	r3, #96	@ 0x60
 8006036:	d050      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x11a>
 8006038:	2b60      	cmp	r3, #96	@ 0x60
 800603a:	d877      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800603c:	2b50      	cmp	r3, #80	@ 0x50
 800603e:	d03c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0xfa>
 8006040:	2b50      	cmp	r3, #80	@ 0x50
 8006042:	d873      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 8006044:	2b40      	cmp	r3, #64	@ 0x40
 8006046:	d058      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x13a>
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d86f      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800604c:	2b30      	cmp	r3, #48	@ 0x30
 800604e:	d064      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006050:	2b30      	cmp	r3, #48	@ 0x30
 8006052:	d86b      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b20      	cmp	r3, #32
 8006056:	d060      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d867      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05c      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006060:	2b10      	cmp	r3, #16
 8006062:	d05a      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x15a>
 8006064:	e062      	b.n	800612c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	f000 fb1f 	bl	80066b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
      break;
 8006092:	e04f      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	f000 fb08 	bl	80066b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b6:	609a      	str	r2, [r3, #8]
      break;
 80060b8:	e03c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 fa7c 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2150      	movs	r1, #80	@ 0x50
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fad5 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 80060d8:	e02c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 fa9b 	bl	8006622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2160      	movs	r1, #96	@ 0x60
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fac5 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 80060f8:	e01c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006106:	461a      	mov	r2, r3
 8006108:	f000 fa5c 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2140      	movs	r1, #64	@ 0x40
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fab5 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8006118:	e00c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 faac 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 800612a:	e003      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      break;
 8006130:	e000      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a37      	ldr	r2, [pc, #220]	@ (8006290 <TIM_Base_SetConfig+0xf0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_Base_SetConfig+0x38>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061be:	d00b      	beq.n	80061d8 <TIM_Base_SetConfig+0x38>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a34      	ldr	r2, [pc, #208]	@ (8006294 <TIM_Base_SetConfig+0xf4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_Base_SetConfig+0x38>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <TIM_Base_SetConfig+0xf8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_Base_SetConfig+0x38>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a32      	ldr	r2, [pc, #200]	@ (800629c <TIM_Base_SetConfig+0xfc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d108      	bne.n	80061ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <TIM_Base_SetConfig+0xf0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01b      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f8:	d017      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a25      	ldr	r2, [pc, #148]	@ (8006294 <TIM_Base_SetConfig+0xf4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a24      	ldr	r2, [pc, #144]	@ (8006298 <TIM_Base_SetConfig+0xf8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a23      	ldr	r2, [pc, #140]	@ (800629c <TIM_Base_SetConfig+0xfc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00b      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a22      	ldr	r2, [pc, #136]	@ (80062a0 <TIM_Base_SetConfig+0x100>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <TIM_Base_SetConfig+0x104>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0x8a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a20      	ldr	r2, [pc, #128]	@ (80062a8 <TIM_Base_SetConfig+0x108>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <TIM_Base_SetConfig+0xf0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d103      	bne.n	800626a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f043 0204 	orr.w	r2, r3, #4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40010000 	.word	0x40010000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800

080062ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f023 0201 	bic.w	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0302 	bic.w	r3, r3, #2
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1c      	ldr	r2, [pc, #112]	@ (8006374 <TIM_OC1_SetConfig+0xc8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10c      	bne.n	8006322 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0308 	bic.w	r3, r3, #8
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a13      	ldr	r2, [pc, #76]	@ (8006374 <TIM_OC1_SetConfig+0xc8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d111      	bne.n	800634e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40010000 	.word	0x40010000

08006378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0210 	bic.w	r2, r3, #16
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0320 	bic.w	r3, r3, #32
 80063c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1e      	ldr	r2, [pc, #120]	@ (800644c <TIM_OC2_SetConfig+0xd4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d10d      	bne.n	80063f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a15      	ldr	r2, [pc, #84]	@ (800644c <TIM_OC2_SetConfig+0xd4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d113      	bne.n	8006424 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800640a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000

08006450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006520 <TIM_OC3_SetConfig+0xd0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10d      	bne.n	80064ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a14      	ldr	r2, [pc, #80]	@ (8006520 <TIM_OC3_SetConfig+0xd0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d113      	bne.n	80064fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	621a      	str	r2, [r3, #32]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40010000 	.word	0x40010000

08006524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800656e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	031b      	lsls	r3, r3, #12
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a10      	ldr	r2, [pc, #64]	@ (80065c0 <TIM_OC4_SetConfig+0x9c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d109      	bne.n	8006598 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800658a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000

080065c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 030a 	bic.w	r3, r3, #10
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006622:	b480      	push	{r7}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f023 0210 	bic.w	r2, r3, #16
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800664c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800665e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	f043 0307 	orr.w	r3, r3, #7
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	021a      	lsls	r2, r3, #8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	431a      	orrs	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4313      	orrs	r3, r2
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	609a      	str	r2, [r3, #8]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2201      	movs	r2, #1
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	43db      	mvns	r3, r3
 800671a:	401a      	ands	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1a      	ldr	r2, [r3, #32]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	fa01 f303 	lsl.w	r3, r1, r3
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006758:	2302      	movs	r3, #2
 800675a:	e050      	b.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1c      	ldr	r2, [pc, #112]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a8:	d013      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a18      	ldr	r2, [pc, #96]	@ (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a16      	ldr	r2, [pc, #88]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a15      	ldr	r2, [pc, #84]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a13      	ldr	r2, [pc, #76]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10c      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40014000 	.word	0x40014000

08006820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e042      	b.n	80068e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc f990 	bl	8002b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	@ 0x24
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800688a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fb85 	bl	8006f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	@ 0x28
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b20      	cmp	r3, #32
 8006906:	d175      	bne.n	80069f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Transmit+0x2c>
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e06e      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2221      	movs	r2, #33	@ 0x21
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006926:	f7fc fb9d 	bl	8003064 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	88fa      	ldrh	r2, [r7, #6]
 8006936:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006940:	d108      	bne.n	8006954 <HAL_UART_Transmit+0x6c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e003      	b.n	800695c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800695c:	e02e      	b.n	80069bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2180      	movs	r1, #128	@ 0x80
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f98b 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e03a      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3302      	adds	r3, #2
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e007      	b.n	80069ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1cb      	bne.n	800695e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2140      	movs	r1, #64	@ 0x40
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f957 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e006      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	e000      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
  }
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d112      	bne.n	8006a3e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_UART_Receive_DMA+0x26>
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e00b      	b.n	8006a40 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	461a      	mov	r2, r3
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f97f 	bl	8006d38 <UART_Start_Receive_DMA>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	e000      	b.n	8006a40 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
  }
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b09c      	sub	sp, #112	@ 0x70
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d172      	bne.n	8006b8a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006aca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006acc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3314      	adds	r3, #20
 8006afc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	623b      	str	r3, [r7, #32]
   return(result);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d119      	bne.n	8006b8a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 0310 	bic.w	r3, r3, #16
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b76:	61fa      	str	r2, [r7, #28]
 8006b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	69b9      	ldr	r1, [r7, #24]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	617b      	str	r3, [r7, #20]
   return(result);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d106      	bne.n	8006ba6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ba0:	f7ff ff66 	bl	8006a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ba4:	e002      	b.n	8006bac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ba6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ba8:	f7fa fa60 	bl	800106c <HAL_UART_RxCpltCallback>
}
 8006bac:	bf00      	nop
 8006bae:	3770      	adds	r7, #112	@ 0x70
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d108      	bne.n	8006be2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff ff48 	bl	8006a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be0:	e002      	b.n	8006be8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff ff30 	bl	8006a48 <HAL_UART_RxHalfCpltCallback>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0c:	2b80      	cmp	r3, #128	@ 0x80
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b21      	cmp	r3, #33	@ 0x21
 8006c22:	d108      	bne.n	8006c36 <UART_DMAError+0x46>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f000 f927 	bl	8006e84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b40      	cmp	r3, #64	@ 0x40
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b22      	cmp	r3, #34	@ 0x22
 8006c56:	d108      	bne.n	8006c6a <UART_DMAError+0x7a>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2200      	movs	r2, #0
 8006c62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006c64:	68b8      	ldr	r0, [r7, #8]
 8006c66:	f000 f935 	bl	8006ed4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	f043 0210 	orr.w	r2, r3, #16
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c76:	68b8      	ldr	r0, [r7, #8]
 8006c78:	f7ff fef0 	bl	8006a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c94:	e03b      	b.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d037      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fc f9e1 	bl	8003064 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	6a3a      	ldr	r2, [r7, #32]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e03a      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d023      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b80      	cmp	r3, #128	@ 0x80
 8006cca:	d020      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b40      	cmp	r3, #64	@ 0x40
 8006cd0:	d01d      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d116      	bne.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f8ec 	bl	8006ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2208      	movs	r2, #8
 8006d00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e00f      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bf0c      	ite	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	2300      	movne	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d0b4      	beq.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b098      	sub	sp, #96	@ 0x60
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2222      	movs	r2, #34	@ 0x22
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d64:	4a44      	ldr	r2, [pc, #272]	@ (8006e78 <UART_Start_Receive_DMA+0x140>)
 8006d66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	4a43      	ldr	r2, [pc, #268]	@ (8006e7c <UART_Start_Receive_DMA+0x144>)
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d74:	4a42      	ldr	r2, [pc, #264]	@ (8006e80 <UART_Start_Receive_DMA+0x148>)
 8006d76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	f7fc fb54 	bl	8003444 <HAL_DMA_Start_IT>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2210      	movs	r2, #16
 8006da6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e05d      	b.n	8006e70 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d019      	beq.n	8006e06 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006de8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006df2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e5      	bne.n	8006dd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e26:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e5      	bne.n	8006e06 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	617b      	str	r3, [r7, #20]
   return(result);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e50:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6a39      	ldr	r1, [r7, #32]
 8006e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3760      	adds	r7, #96	@ 0x60
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	08006a89 	.word	0x08006a89
 8006e7c:	08006bb5 	.word	0x08006bb5
 8006e80:	08006bf1 	.word	0x08006bf1

08006e84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	@ 0x24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	61ba      	str	r2, [r7, #24]
 8006eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6979      	ldr	r1, [r7, #20]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e5      	bne.n	8006e8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ec8:	bf00      	nop
 8006eca:	3724      	adds	r7, #36	@ 0x24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b095      	sub	sp, #84	@ 0x54
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006efc:	643a      	str	r2, [r7, #64]	@ 0x40
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d119      	bne.n	8006f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	330c      	adds	r3, #12
 8006f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f023 0310 	bic.w	r3, r3, #16
 8006f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f6c:	61ba      	str	r2, [r7, #24]
 8006f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6979      	ldr	r1, [r7, #20]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e5      	bne.n	8006f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f8e:	bf00      	nop
 8006f90:	3754      	adds	r7, #84	@ 0x54
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b0c0      	sub	sp, #256	@ 0x100
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	ea40 0301 	orr.w	r3, r0, r1
 8006fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ff4:	f021 010c 	bic.w	r1, r1, #12
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007002:	430b      	orrs	r3, r1
 8007004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007016:	6999      	ldr	r1, [r3, #24]
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	ea40 0301 	orr.w	r3, r0, r1
 8007022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4b8f      	ldr	r3, [pc, #572]	@ (8007268 <UART_SetConfig+0x2cc>)
 800702c:	429a      	cmp	r2, r3
 800702e:	d005      	beq.n	800703c <UART_SetConfig+0xa0>
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b8d      	ldr	r3, [pc, #564]	@ (800726c <UART_SetConfig+0x2d0>)
 8007038:	429a      	cmp	r2, r3
 800703a:	d104      	bne.n	8007046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800703c:	f7fe fb0a 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8007040:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007044:	e003      	b.n	800704e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007046:	f7fe faf1 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 800704a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007058:	f040 810c 	bne.w	8007274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800705c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007060:	2200      	movs	r2, #0
 8007062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007066:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800706a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	1891      	adds	r1, r2, r2
 8007074:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007076:	415b      	adcs	r3, r3
 8007078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800707a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800707e:	4621      	mov	r1, r4
 8007080:	eb12 0801 	adds.w	r8, r2, r1
 8007084:	4629      	mov	r1, r5
 8007086:	eb43 0901 	adc.w	r9, r3, r1
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800709a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800709e:	4690      	mov	r8, r2
 80070a0:	4699      	mov	r9, r3
 80070a2:	4623      	mov	r3, r4
 80070a4:	eb18 0303 	adds.w	r3, r8, r3
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070ac:	462b      	mov	r3, r5
 80070ae:	eb49 0303 	adc.w	r3, r9, r3
 80070b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070ca:	460b      	mov	r3, r1
 80070cc:	18db      	adds	r3, r3, r3
 80070ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80070d0:	4613      	mov	r3, r2
 80070d2:	eb42 0303 	adc.w	r3, r2, r3
 80070d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80070d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070e0:	f7f9 fdda 	bl	8000c98 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4b61      	ldr	r3, [pc, #388]	@ (8007270 <UART_SetConfig+0x2d4>)
 80070ea:	fba3 2302 	umull	r2, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	011c      	lsls	r4, r3, #4
 80070f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007104:	4642      	mov	r2, r8
 8007106:	464b      	mov	r3, r9
 8007108:	1891      	adds	r1, r2, r2
 800710a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800710c:	415b      	adcs	r3, r3
 800710e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007114:	4641      	mov	r1, r8
 8007116:	eb12 0a01 	adds.w	sl, r2, r1
 800711a:	4649      	mov	r1, r9
 800711c:	eb43 0b01 	adc.w	fp, r3, r1
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800712c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007134:	4692      	mov	sl, r2
 8007136:	469b      	mov	fp, r3
 8007138:	4643      	mov	r3, r8
 800713a:	eb1a 0303 	adds.w	r3, sl, r3
 800713e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007142:	464b      	mov	r3, r9
 8007144:	eb4b 0303 	adc.w	r3, fp, r3
 8007148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007158:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800715c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007160:	460b      	mov	r3, r1
 8007162:	18db      	adds	r3, r3, r3
 8007164:	643b      	str	r3, [r7, #64]	@ 0x40
 8007166:	4613      	mov	r3, r2
 8007168:	eb42 0303 	adc.w	r3, r2, r3
 800716c:	647b      	str	r3, [r7, #68]	@ 0x44
 800716e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007176:	f7f9 fd8f 	bl	8000c98 <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4611      	mov	r1, r2
 8007180:	4b3b      	ldr	r3, [pc, #236]	@ (8007270 <UART_SetConfig+0x2d4>)
 8007182:	fba3 2301 	umull	r2, r3, r3, r1
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	2264      	movs	r2, #100	@ 0x64
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	1acb      	subs	r3, r1, r3
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007196:	4b36      	ldr	r3, [pc, #216]	@ (8007270 <UART_SetConfig+0x2d4>)
 8007198:	fba3 2302 	umull	r2, r3, r3, r2
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071a4:	441c      	add	r4, r3
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071c0:	415b      	adcs	r3, r3
 80071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071c8:	4641      	mov	r1, r8
 80071ca:	1851      	adds	r1, r2, r1
 80071cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80071ce:	4649      	mov	r1, r9
 80071d0:	414b      	adcs	r3, r1
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071e0:	4659      	mov	r1, fp
 80071e2:	00cb      	lsls	r3, r1, #3
 80071e4:	4651      	mov	r1, sl
 80071e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ea:	4651      	mov	r1, sl
 80071ec:	00ca      	lsls	r2, r1, #3
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	4642      	mov	r2, r8
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071fc:	464b      	mov	r3, r9
 80071fe:	460a      	mov	r2, r1
 8007200:	eb42 0303 	adc.w	r3, r2, r3
 8007204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007214:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800721c:	460b      	mov	r3, r1
 800721e:	18db      	adds	r3, r3, r3
 8007220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007222:	4613      	mov	r3, r2
 8007224:	eb42 0303 	adc.w	r3, r2, r3
 8007228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800722a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800722e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007232:	f7f9 fd31 	bl	8000c98 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4b0d      	ldr	r3, [pc, #52]	@ (8007270 <UART_SetConfig+0x2d4>)
 800723c:	fba3 1302 	umull	r1, r3, r3, r2
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2164      	movs	r1, #100	@ 0x64
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	3332      	adds	r3, #50	@ 0x32
 800724e:	4a08      	ldr	r2, [pc, #32]	@ (8007270 <UART_SetConfig+0x2d4>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f003 0207 	and.w	r2, r3, #7
 800725a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4422      	add	r2, r4
 8007262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007264:	e106      	b.n	8007474 <UART_SetConfig+0x4d8>
 8007266:	bf00      	nop
 8007268:	40011000 	.word	0x40011000
 800726c:	40011400 	.word	0x40011400
 8007270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007278:	2200      	movs	r2, #0
 800727a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800727e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007286:	4642      	mov	r2, r8
 8007288:	464b      	mov	r3, r9
 800728a:	1891      	adds	r1, r2, r2
 800728c:	6239      	str	r1, [r7, #32]
 800728e:	415b      	adcs	r3, r3
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
 8007292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007296:	4641      	mov	r1, r8
 8007298:	1854      	adds	r4, r2, r1
 800729a:	4649      	mov	r1, r9
 800729c:	eb43 0501 	adc.w	r5, r3, r1
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	00eb      	lsls	r3, r5, #3
 80072aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ae:	00e2      	lsls	r2, r4, #3
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	4643      	mov	r3, r8
 80072b6:	18e3      	adds	r3, r4, r3
 80072b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072bc:	464b      	mov	r3, r9
 80072be:	eb45 0303 	adc.w	r3, r5, r3
 80072c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072e2:	4629      	mov	r1, r5
 80072e4:	008b      	lsls	r3, r1, #2
 80072e6:	4621      	mov	r1, r4
 80072e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ec:	4621      	mov	r1, r4
 80072ee:	008a      	lsls	r2, r1, #2
 80072f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80072f4:	f7f9 fcd0 	bl	8000c98 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4b60      	ldr	r3, [pc, #384]	@ (8007480 <UART_SetConfig+0x4e4>)
 80072fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	011c      	lsls	r4, r3, #4
 8007306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800730a:	2200      	movs	r2, #0
 800730c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007310:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	1891      	adds	r1, r2, r2
 800731e:	61b9      	str	r1, [r7, #24]
 8007320:	415b      	adcs	r3, r3
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007328:	4641      	mov	r1, r8
 800732a:	1851      	adds	r1, r2, r1
 800732c:	6139      	str	r1, [r7, #16]
 800732e:	4649      	mov	r1, r9
 8007330:	414b      	adcs	r3, r1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007340:	4659      	mov	r1, fp
 8007342:	00cb      	lsls	r3, r1, #3
 8007344:	4651      	mov	r1, sl
 8007346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800734a:	4651      	mov	r1, sl
 800734c:	00ca      	lsls	r2, r1, #3
 800734e:	4610      	mov	r0, r2
 8007350:	4619      	mov	r1, r3
 8007352:	4603      	mov	r3, r0
 8007354:	4642      	mov	r2, r8
 8007356:	189b      	adds	r3, r3, r2
 8007358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800735c:	464b      	mov	r3, r9
 800735e:	460a      	mov	r2, r1
 8007360:	eb42 0303 	adc.w	r3, r2, r3
 8007364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007372:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007380:	4649      	mov	r1, r9
 8007382:	008b      	lsls	r3, r1, #2
 8007384:	4641      	mov	r1, r8
 8007386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800738a:	4641      	mov	r1, r8
 800738c:	008a      	lsls	r2, r1, #2
 800738e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007392:	f7f9 fc81 	bl	8000c98 <__aeabi_uldivmod>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4611      	mov	r1, r2
 800739c:	4b38      	ldr	r3, [pc, #224]	@ (8007480 <UART_SetConfig+0x4e4>)
 800739e:	fba3 2301 	umull	r2, r3, r3, r1
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	2264      	movs	r2, #100	@ 0x64
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	1acb      	subs	r3, r1, r3
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	3332      	adds	r3, #50	@ 0x32
 80073b0:	4a33      	ldr	r2, [pc, #204]	@ (8007480 <UART_SetConfig+0x4e4>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073bc:	441c      	add	r4, r3
 80073be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c2:	2200      	movs	r2, #0
 80073c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80073c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80073c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	1891      	adds	r1, r2, r2
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	415b      	adcs	r3, r3
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073dc:	4641      	mov	r1, r8
 80073de:	1851      	adds	r1, r2, r1
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	4649      	mov	r1, r9
 80073e4:	414b      	adcs	r3, r1
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073f4:	4659      	mov	r1, fp
 80073f6:	00cb      	lsls	r3, r1, #3
 80073f8:	4651      	mov	r1, sl
 80073fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fe:	4651      	mov	r1, sl
 8007400:	00ca      	lsls	r2, r1, #3
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	4603      	mov	r3, r0
 8007408:	4642      	mov	r2, r8
 800740a:	189b      	adds	r3, r3, r2
 800740c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800740e:	464b      	mov	r3, r9
 8007410:	460a      	mov	r2, r1
 8007412:	eb42 0303 	adc.w	r3, r2, r3
 8007416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	663b      	str	r3, [r7, #96]	@ 0x60
 8007422:	667a      	str	r2, [r7, #100]	@ 0x64
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007430:	4649      	mov	r1, r9
 8007432:	008b      	lsls	r3, r1, #2
 8007434:	4641      	mov	r1, r8
 8007436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800743a:	4641      	mov	r1, r8
 800743c:	008a      	lsls	r2, r1, #2
 800743e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007442:	f7f9 fc29 	bl	8000c98 <__aeabi_uldivmod>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <UART_SetConfig+0x4e4>)
 800744c:	fba3 1302 	umull	r1, r3, r3, r2
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	2164      	movs	r1, #100	@ 0x64
 8007454:	fb01 f303 	mul.w	r3, r1, r3
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	3332      	adds	r3, #50	@ 0x32
 800745e:	4a08      	ldr	r2, [pc, #32]	@ (8007480 <UART_SetConfig+0x4e4>)
 8007460:	fba2 2303 	umull	r2, r3, r2, r3
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	f003 020f 	and.w	r2, r3, #15
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4422      	add	r2, r4
 8007472:	609a      	str	r2, [r3, #8]
}
 8007474:	bf00      	nop
 8007476:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800747a:	46bd      	mov	sp, r7
 800747c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007480:	51eb851f 	.word	0x51eb851f

08007484 <atof>:
 8007484:	2100      	movs	r1, #0
 8007486:	f000 be03 	b.w	8008090 <strtod>

0800748a <sulp>:
 800748a:	b570      	push	{r4, r5, r6, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	ec45 4b10 	vmov	d0, r4, r5
 8007494:	4616      	mov	r6, r2
 8007496:	f003 facf 	bl	800aa38 <__ulp>
 800749a:	ec51 0b10 	vmov	r0, r1, d0
 800749e:	b17e      	cbz	r6, 80074c0 <sulp+0x36>
 80074a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80074a4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dd09      	ble.n	80074c0 <sulp+0x36>
 80074ac:	051b      	lsls	r3, r3, #20
 80074ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80074b2:	2400      	movs	r4, #0
 80074b4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	f7f9 f8a4 	bl	8000608 <__aeabi_dmul>
 80074c0:	ec41 0b10 	vmov	d0, r0, r1
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080074c8 <_strtod_l>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	b09f      	sub	sp, #124	@ 0x7c
 80074ce:	460c      	mov	r4, r1
 80074d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80074d2:	2200      	movs	r2, #0
 80074d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80074d6:	9005      	str	r0, [sp, #20]
 80074d8:	f04f 0a00 	mov.w	sl, #0
 80074dc:	f04f 0b00 	mov.w	fp, #0
 80074e0:	460a      	mov	r2, r1
 80074e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80074e4:	7811      	ldrb	r1, [r2, #0]
 80074e6:	292b      	cmp	r1, #43	@ 0x2b
 80074e8:	d04a      	beq.n	8007580 <_strtod_l+0xb8>
 80074ea:	d838      	bhi.n	800755e <_strtod_l+0x96>
 80074ec:	290d      	cmp	r1, #13
 80074ee:	d832      	bhi.n	8007556 <_strtod_l+0x8e>
 80074f0:	2908      	cmp	r1, #8
 80074f2:	d832      	bhi.n	800755a <_strtod_l+0x92>
 80074f4:	2900      	cmp	r1, #0
 80074f6:	d03b      	beq.n	8007570 <_strtod_l+0xa8>
 80074f8:	2200      	movs	r2, #0
 80074fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80074fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80074fe:	782a      	ldrb	r2, [r5, #0]
 8007500:	2a30      	cmp	r2, #48	@ 0x30
 8007502:	f040 80b2 	bne.w	800766a <_strtod_l+0x1a2>
 8007506:	786a      	ldrb	r2, [r5, #1]
 8007508:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800750c:	2a58      	cmp	r2, #88	@ 0x58
 800750e:	d16e      	bne.n	80075ee <_strtod_l+0x126>
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	ab1a      	add	r3, sp, #104	@ 0x68
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	4a8f      	ldr	r2, [pc, #572]	@ (8007758 <_strtod_l+0x290>)
 800751c:	9805      	ldr	r0, [sp, #20]
 800751e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007520:	a919      	add	r1, sp, #100	@ 0x64
 8007522:	f002 fb83 	bl	8009c2c <__gethex>
 8007526:	f010 060f 	ands.w	r6, r0, #15
 800752a:	4604      	mov	r4, r0
 800752c:	d005      	beq.n	800753a <_strtod_l+0x72>
 800752e:	2e06      	cmp	r6, #6
 8007530:	d128      	bne.n	8007584 <_strtod_l+0xbc>
 8007532:	3501      	adds	r5, #1
 8007534:	2300      	movs	r3, #0
 8007536:	9519      	str	r5, [sp, #100]	@ 0x64
 8007538:	930e      	str	r3, [sp, #56]	@ 0x38
 800753a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 858e 	bne.w	800805e <_strtod_l+0xb96>
 8007542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007544:	b1cb      	cbz	r3, 800757a <_strtod_l+0xb2>
 8007546:	4652      	mov	r2, sl
 8007548:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800754c:	ec43 2b10 	vmov	d0, r2, r3
 8007550:	b01f      	add	sp, #124	@ 0x7c
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	2920      	cmp	r1, #32
 8007558:	d1ce      	bne.n	80074f8 <_strtod_l+0x30>
 800755a:	3201      	adds	r2, #1
 800755c:	e7c1      	b.n	80074e2 <_strtod_l+0x1a>
 800755e:	292d      	cmp	r1, #45	@ 0x2d
 8007560:	d1ca      	bne.n	80074f8 <_strtod_l+0x30>
 8007562:	2101      	movs	r1, #1
 8007564:	910e      	str	r1, [sp, #56]	@ 0x38
 8007566:	1c51      	adds	r1, r2, #1
 8007568:	9119      	str	r1, [sp, #100]	@ 0x64
 800756a:	7852      	ldrb	r2, [r2, #1]
 800756c:	2a00      	cmp	r2, #0
 800756e:	d1c5      	bne.n	80074fc <_strtod_l+0x34>
 8007570:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007572:	9419      	str	r4, [sp, #100]	@ 0x64
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 8570 	bne.w	800805a <_strtod_l+0xb92>
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	e7e5      	b.n	800754c <_strtod_l+0x84>
 8007580:	2100      	movs	r1, #0
 8007582:	e7ef      	b.n	8007564 <_strtod_l+0x9c>
 8007584:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007586:	b13a      	cbz	r2, 8007598 <_strtod_l+0xd0>
 8007588:	2135      	movs	r1, #53	@ 0x35
 800758a:	a81c      	add	r0, sp, #112	@ 0x70
 800758c:	f003 fb4e 	bl	800ac2c <__copybits>
 8007590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007592:	9805      	ldr	r0, [sp, #20]
 8007594:	f002 ff24 	bl	800a3e0 <_Bfree>
 8007598:	3e01      	subs	r6, #1
 800759a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800759c:	2e04      	cmp	r6, #4
 800759e:	d806      	bhi.n	80075ae <_strtod_l+0xe6>
 80075a0:	e8df f006 	tbb	[pc, r6]
 80075a4:	201d0314 	.word	0x201d0314
 80075a8:	14          	.byte	0x14
 80075a9:	00          	.byte	0x00
 80075aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80075ae:	05e1      	lsls	r1, r4, #23
 80075b0:	bf48      	it	mi
 80075b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80075b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075ba:	0d1b      	lsrs	r3, r3, #20
 80075bc:	051b      	lsls	r3, r3, #20
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1bb      	bne.n	800753a <_strtod_l+0x72>
 80075c2:	f001 fbc3 	bl	8008d4c <__errno>
 80075c6:	2322      	movs	r3, #34	@ 0x22
 80075c8:	6003      	str	r3, [r0, #0]
 80075ca:	e7b6      	b.n	800753a <_strtod_l+0x72>
 80075cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80075d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80075d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80075d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075dc:	e7e7      	b.n	80075ae <_strtod_l+0xe6>
 80075de:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007760 <_strtod_l+0x298>
 80075e2:	e7e4      	b.n	80075ae <_strtod_l+0xe6>
 80075e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80075e8:	f04f 3aff 	mov.w	sl, #4294967295
 80075ec:	e7df      	b.n	80075ae <_strtod_l+0xe6>
 80075ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b30      	cmp	r3, #48	@ 0x30
 80075f8:	d0f9      	beq.n	80075ee <_strtod_l+0x126>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d09d      	beq.n	800753a <_strtod_l+0x72>
 80075fe:	2301      	movs	r3, #1
 8007600:	2700      	movs	r7, #0
 8007602:	9308      	str	r3, [sp, #32]
 8007604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007606:	930c      	str	r3, [sp, #48]	@ 0x30
 8007608:	970b      	str	r7, [sp, #44]	@ 0x2c
 800760a:	46b9      	mov	r9, r7
 800760c:	220a      	movs	r2, #10
 800760e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007610:	7805      	ldrb	r5, [r0, #0]
 8007612:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007616:	b2d9      	uxtb	r1, r3
 8007618:	2909      	cmp	r1, #9
 800761a:	d928      	bls.n	800766e <_strtod_l+0x1a6>
 800761c:	494f      	ldr	r1, [pc, #316]	@ (800775c <_strtod_l+0x294>)
 800761e:	2201      	movs	r2, #1
 8007620:	f001 fadb 	bl	8008bda <strncmp>
 8007624:	2800      	cmp	r0, #0
 8007626:	d032      	beq.n	800768e <_strtod_l+0x1c6>
 8007628:	2000      	movs	r0, #0
 800762a:	462a      	mov	r2, r5
 800762c:	900a      	str	r0, [sp, #40]	@ 0x28
 800762e:	464d      	mov	r5, r9
 8007630:	4603      	mov	r3, r0
 8007632:	2a65      	cmp	r2, #101	@ 0x65
 8007634:	d001      	beq.n	800763a <_strtod_l+0x172>
 8007636:	2a45      	cmp	r2, #69	@ 0x45
 8007638:	d114      	bne.n	8007664 <_strtod_l+0x19c>
 800763a:	b91d      	cbnz	r5, 8007644 <_strtod_l+0x17c>
 800763c:	9a08      	ldr	r2, [sp, #32]
 800763e:	4302      	orrs	r2, r0
 8007640:	d096      	beq.n	8007570 <_strtod_l+0xa8>
 8007642:	2500      	movs	r5, #0
 8007644:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007646:	1c62      	adds	r2, r4, #1
 8007648:	9219      	str	r2, [sp, #100]	@ 0x64
 800764a:	7862      	ldrb	r2, [r4, #1]
 800764c:	2a2b      	cmp	r2, #43	@ 0x2b
 800764e:	d07a      	beq.n	8007746 <_strtod_l+0x27e>
 8007650:	2a2d      	cmp	r2, #45	@ 0x2d
 8007652:	d07e      	beq.n	8007752 <_strtod_l+0x28a>
 8007654:	f04f 0c00 	mov.w	ip, #0
 8007658:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800765c:	2909      	cmp	r1, #9
 800765e:	f240 8085 	bls.w	800776c <_strtod_l+0x2a4>
 8007662:	9419      	str	r4, [sp, #100]	@ 0x64
 8007664:	f04f 0800 	mov.w	r8, #0
 8007668:	e0a5      	b.n	80077b6 <_strtod_l+0x2ee>
 800766a:	2300      	movs	r3, #0
 800766c:	e7c8      	b.n	8007600 <_strtod_l+0x138>
 800766e:	f1b9 0f08 	cmp.w	r9, #8
 8007672:	bfd8      	it	le
 8007674:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007676:	f100 0001 	add.w	r0, r0, #1
 800767a:	bfda      	itte	le
 800767c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007680:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007682:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007686:	f109 0901 	add.w	r9, r9, #1
 800768a:	9019      	str	r0, [sp, #100]	@ 0x64
 800768c:	e7bf      	b.n	800760e <_strtod_l+0x146>
 800768e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	9219      	str	r2, [sp, #100]	@ 0x64
 8007694:	785a      	ldrb	r2, [r3, #1]
 8007696:	f1b9 0f00 	cmp.w	r9, #0
 800769a:	d03b      	beq.n	8007714 <_strtod_l+0x24c>
 800769c:	900a      	str	r0, [sp, #40]	@ 0x28
 800769e:	464d      	mov	r5, r9
 80076a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d912      	bls.n	80076ce <_strtod_l+0x206>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e7c2      	b.n	8007632 <_strtod_l+0x16a>
 80076ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80076b2:	785a      	ldrb	r2, [r3, #1]
 80076b4:	3001      	adds	r0, #1
 80076b6:	2a30      	cmp	r2, #48	@ 0x30
 80076b8:	d0f8      	beq.n	80076ac <_strtod_l+0x1e4>
 80076ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80076be:	2b08      	cmp	r3, #8
 80076c0:	f200 84d2 	bhi.w	8008068 <_strtod_l+0xba0>
 80076c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80076c8:	2000      	movs	r0, #0
 80076ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80076cc:	4605      	mov	r5, r0
 80076ce:	3a30      	subs	r2, #48	@ 0x30
 80076d0:	f100 0301 	add.w	r3, r0, #1
 80076d4:	d018      	beq.n	8007708 <_strtod_l+0x240>
 80076d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076d8:	4419      	add	r1, r3
 80076da:	910a      	str	r1, [sp, #40]	@ 0x28
 80076dc:	462e      	mov	r6, r5
 80076de:	f04f 0e0a 	mov.w	lr, #10
 80076e2:	1c71      	adds	r1, r6, #1
 80076e4:	eba1 0c05 	sub.w	ip, r1, r5
 80076e8:	4563      	cmp	r3, ip
 80076ea:	dc15      	bgt.n	8007718 <_strtod_l+0x250>
 80076ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80076f0:	182b      	adds	r3, r5, r0
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	f105 0501 	add.w	r5, r5, #1
 80076f8:	4405      	add	r5, r0
 80076fa:	dc1a      	bgt.n	8007732 <_strtod_l+0x26a>
 80076fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076fe:	230a      	movs	r3, #10
 8007700:	fb03 2301 	mla	r3, r3, r1, r2
 8007704:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007706:	2300      	movs	r3, #0
 8007708:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800770a:	1c51      	adds	r1, r2, #1
 800770c:	9119      	str	r1, [sp, #100]	@ 0x64
 800770e:	7852      	ldrb	r2, [r2, #1]
 8007710:	4618      	mov	r0, r3
 8007712:	e7c5      	b.n	80076a0 <_strtod_l+0x1d8>
 8007714:	4648      	mov	r0, r9
 8007716:	e7ce      	b.n	80076b6 <_strtod_l+0x1ee>
 8007718:	2e08      	cmp	r6, #8
 800771a:	dc05      	bgt.n	8007728 <_strtod_l+0x260>
 800771c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800771e:	fb0e f606 	mul.w	r6, lr, r6
 8007722:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007724:	460e      	mov	r6, r1
 8007726:	e7dc      	b.n	80076e2 <_strtod_l+0x21a>
 8007728:	2910      	cmp	r1, #16
 800772a:	bfd8      	it	le
 800772c:	fb0e f707 	mulle.w	r7, lr, r7
 8007730:	e7f8      	b.n	8007724 <_strtod_l+0x25c>
 8007732:	2b0f      	cmp	r3, #15
 8007734:	bfdc      	itt	le
 8007736:	230a      	movle	r3, #10
 8007738:	fb03 2707 	mlale	r7, r3, r7, r2
 800773c:	e7e3      	b.n	8007706 <_strtod_l+0x23e>
 800773e:	2300      	movs	r3, #0
 8007740:	930a      	str	r3, [sp, #40]	@ 0x28
 8007742:	2301      	movs	r3, #1
 8007744:	e77a      	b.n	800763c <_strtod_l+0x174>
 8007746:	f04f 0c00 	mov.w	ip, #0
 800774a:	1ca2      	adds	r2, r4, #2
 800774c:	9219      	str	r2, [sp, #100]	@ 0x64
 800774e:	78a2      	ldrb	r2, [r4, #2]
 8007750:	e782      	b.n	8007658 <_strtod_l+0x190>
 8007752:	f04f 0c01 	mov.w	ip, #1
 8007756:	e7f8      	b.n	800774a <_strtod_l+0x282>
 8007758:	0800bc2c 	.word	0x0800bc2c
 800775c:	0800b9ec 	.word	0x0800b9ec
 8007760:	7ff00000 	.word	0x7ff00000
 8007764:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007766:	1c51      	adds	r1, r2, #1
 8007768:	9119      	str	r1, [sp, #100]	@ 0x64
 800776a:	7852      	ldrb	r2, [r2, #1]
 800776c:	2a30      	cmp	r2, #48	@ 0x30
 800776e:	d0f9      	beq.n	8007764 <_strtod_l+0x29c>
 8007770:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007774:	2908      	cmp	r1, #8
 8007776:	f63f af75 	bhi.w	8007664 <_strtod_l+0x19c>
 800777a:	3a30      	subs	r2, #48	@ 0x30
 800777c:	9209      	str	r2, [sp, #36]	@ 0x24
 800777e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007780:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007782:	f04f 080a 	mov.w	r8, #10
 8007786:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007788:	1c56      	adds	r6, r2, #1
 800778a:	9619      	str	r6, [sp, #100]	@ 0x64
 800778c:	7852      	ldrb	r2, [r2, #1]
 800778e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007792:	f1be 0f09 	cmp.w	lr, #9
 8007796:	d939      	bls.n	800780c <_strtod_l+0x344>
 8007798:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800779a:	1a76      	subs	r6, r6, r1
 800779c:	2e08      	cmp	r6, #8
 800779e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80077a2:	dc03      	bgt.n	80077ac <_strtod_l+0x2e4>
 80077a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077a6:	4588      	cmp	r8, r1
 80077a8:	bfa8      	it	ge
 80077aa:	4688      	movge	r8, r1
 80077ac:	f1bc 0f00 	cmp.w	ip, #0
 80077b0:	d001      	beq.n	80077b6 <_strtod_l+0x2ee>
 80077b2:	f1c8 0800 	rsb	r8, r8, #0
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	d14e      	bne.n	8007858 <_strtod_l+0x390>
 80077ba:	9908      	ldr	r1, [sp, #32]
 80077bc:	4308      	orrs	r0, r1
 80077be:	f47f aebc 	bne.w	800753a <_strtod_l+0x72>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f47f aed4 	bne.w	8007570 <_strtod_l+0xa8>
 80077c8:	2a69      	cmp	r2, #105	@ 0x69
 80077ca:	d028      	beq.n	800781e <_strtod_l+0x356>
 80077cc:	dc25      	bgt.n	800781a <_strtod_l+0x352>
 80077ce:	2a49      	cmp	r2, #73	@ 0x49
 80077d0:	d025      	beq.n	800781e <_strtod_l+0x356>
 80077d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80077d4:	f47f aecc 	bne.w	8007570 <_strtod_l+0xa8>
 80077d8:	499a      	ldr	r1, [pc, #616]	@ (8007a44 <_strtod_l+0x57c>)
 80077da:	a819      	add	r0, sp, #100	@ 0x64
 80077dc:	f002 fc48 	bl	800a070 <__match>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f43f aec5 	beq.w	8007570 <_strtod_l+0xa8>
 80077e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b28      	cmp	r3, #40	@ 0x28
 80077ec:	d12e      	bne.n	800784c <_strtod_l+0x384>
 80077ee:	4996      	ldr	r1, [pc, #600]	@ (8007a48 <_strtod_l+0x580>)
 80077f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80077f2:	a819      	add	r0, sp, #100	@ 0x64
 80077f4:	f002 fc50 	bl	800a098 <__hexnan>
 80077f8:	2805      	cmp	r0, #5
 80077fa:	d127      	bne.n	800784c <_strtod_l+0x384>
 80077fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80077fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007802:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007806:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800780a:	e696      	b.n	800753a <_strtod_l+0x72>
 800780c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800780e:	fb08 2101 	mla	r1, r8, r1, r2
 8007812:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007816:	9209      	str	r2, [sp, #36]	@ 0x24
 8007818:	e7b5      	b.n	8007786 <_strtod_l+0x2be>
 800781a:	2a6e      	cmp	r2, #110	@ 0x6e
 800781c:	e7da      	b.n	80077d4 <_strtod_l+0x30c>
 800781e:	498b      	ldr	r1, [pc, #556]	@ (8007a4c <_strtod_l+0x584>)
 8007820:	a819      	add	r0, sp, #100	@ 0x64
 8007822:	f002 fc25 	bl	800a070 <__match>
 8007826:	2800      	cmp	r0, #0
 8007828:	f43f aea2 	beq.w	8007570 <_strtod_l+0xa8>
 800782c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800782e:	4988      	ldr	r1, [pc, #544]	@ (8007a50 <_strtod_l+0x588>)
 8007830:	3b01      	subs	r3, #1
 8007832:	a819      	add	r0, sp, #100	@ 0x64
 8007834:	9319      	str	r3, [sp, #100]	@ 0x64
 8007836:	f002 fc1b 	bl	800a070 <__match>
 800783a:	b910      	cbnz	r0, 8007842 <_strtod_l+0x37a>
 800783c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800783e:	3301      	adds	r3, #1
 8007840:	9319      	str	r3, [sp, #100]	@ 0x64
 8007842:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007a60 <_strtod_l+0x598>
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	e676      	b.n	800753a <_strtod_l+0x72>
 800784c:	4881      	ldr	r0, [pc, #516]	@ (8007a54 <_strtod_l+0x58c>)
 800784e:	f001 fabb 	bl	8008dc8 <nan>
 8007852:	ec5b ab10 	vmov	sl, fp, d0
 8007856:	e670      	b.n	800753a <_strtod_l+0x72>
 8007858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800785a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800785c:	eba8 0303 	sub.w	r3, r8, r3
 8007860:	f1b9 0f00 	cmp.w	r9, #0
 8007864:	bf08      	it	eq
 8007866:	46a9      	moveq	r9, r5
 8007868:	2d10      	cmp	r5, #16
 800786a:	9309      	str	r3, [sp, #36]	@ 0x24
 800786c:	462c      	mov	r4, r5
 800786e:	bfa8      	it	ge
 8007870:	2410      	movge	r4, #16
 8007872:	f7f8 fe4f 	bl	8000514 <__aeabi_ui2d>
 8007876:	2d09      	cmp	r5, #9
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	dc13      	bgt.n	80078a6 <_strtod_l+0x3de>
 800787e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	f43f ae5a 	beq.w	800753a <_strtod_l+0x72>
 8007886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007888:	dd78      	ble.n	800797c <_strtod_l+0x4b4>
 800788a:	2b16      	cmp	r3, #22
 800788c:	dc5f      	bgt.n	800794e <_strtod_l+0x486>
 800788e:	4972      	ldr	r1, [pc, #456]	@ (8007a58 <_strtod_l+0x590>)
 8007890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007898:	4652      	mov	r2, sl
 800789a:	465b      	mov	r3, fp
 800789c:	f7f8 feb4 	bl	8000608 <__aeabi_dmul>
 80078a0:	4682      	mov	sl, r0
 80078a2:	468b      	mov	fp, r1
 80078a4:	e649      	b.n	800753a <_strtod_l+0x72>
 80078a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007a58 <_strtod_l+0x590>)
 80078a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	4682      	mov	sl, r0
 80078b6:	4638      	mov	r0, r7
 80078b8:	468b      	mov	fp, r1
 80078ba:	f7f8 fe2b 	bl	8000514 <__aeabi_ui2d>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4650      	mov	r0, sl
 80078c4:	4659      	mov	r1, fp
 80078c6:	f7f8 fce9 	bl	800029c <__adddf3>
 80078ca:	2d0f      	cmp	r5, #15
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	ddd5      	ble.n	800787e <_strtod_l+0x3b6>
 80078d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d4:	1b2c      	subs	r4, r5, r4
 80078d6:	441c      	add	r4, r3
 80078d8:	2c00      	cmp	r4, #0
 80078da:	f340 8093 	ble.w	8007a04 <_strtod_l+0x53c>
 80078de:	f014 030f 	ands.w	r3, r4, #15
 80078e2:	d00a      	beq.n	80078fa <_strtod_l+0x432>
 80078e4:	495c      	ldr	r1, [pc, #368]	@ (8007a58 <_strtod_l+0x590>)
 80078e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ea:	4652      	mov	r2, sl
 80078ec:	465b      	mov	r3, fp
 80078ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f2:	f7f8 fe89 	bl	8000608 <__aeabi_dmul>
 80078f6:	4682      	mov	sl, r0
 80078f8:	468b      	mov	fp, r1
 80078fa:	f034 040f 	bics.w	r4, r4, #15
 80078fe:	d073      	beq.n	80079e8 <_strtod_l+0x520>
 8007900:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007904:	dd49      	ble.n	800799a <_strtod_l+0x4d2>
 8007906:	2400      	movs	r4, #0
 8007908:	46a0      	mov	r8, r4
 800790a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800790c:	46a1      	mov	r9, r4
 800790e:	9a05      	ldr	r2, [sp, #20]
 8007910:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007a60 <_strtod_l+0x598>
 8007914:	2322      	movs	r3, #34	@ 0x22
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	f04f 0a00 	mov.w	sl, #0
 800791c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800791e:	2b00      	cmp	r3, #0
 8007920:	f43f ae0b 	beq.w	800753a <_strtod_l+0x72>
 8007924:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007926:	9805      	ldr	r0, [sp, #20]
 8007928:	f002 fd5a 	bl	800a3e0 <_Bfree>
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	4649      	mov	r1, r9
 8007930:	f002 fd56 	bl	800a3e0 <_Bfree>
 8007934:	9805      	ldr	r0, [sp, #20]
 8007936:	4641      	mov	r1, r8
 8007938:	f002 fd52 	bl	800a3e0 <_Bfree>
 800793c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800793e:	9805      	ldr	r0, [sp, #20]
 8007940:	f002 fd4e 	bl	800a3e0 <_Bfree>
 8007944:	9805      	ldr	r0, [sp, #20]
 8007946:	4621      	mov	r1, r4
 8007948:	f002 fd4a 	bl	800a3e0 <_Bfree>
 800794c:	e5f5      	b.n	800753a <_strtod_l+0x72>
 800794e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007950:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007954:	4293      	cmp	r3, r2
 8007956:	dbbc      	blt.n	80078d2 <_strtod_l+0x40a>
 8007958:	4c3f      	ldr	r4, [pc, #252]	@ (8007a58 <_strtod_l+0x590>)
 800795a:	f1c5 050f 	rsb	r5, r5, #15
 800795e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007962:	4652      	mov	r2, sl
 8007964:	465b      	mov	r3, fp
 8007966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800796a:	f7f8 fe4d 	bl	8000608 <__aeabi_dmul>
 800796e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007970:	1b5d      	subs	r5, r3, r5
 8007972:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007976:	e9d4 2300 	ldrd	r2, r3, [r4]
 800797a:	e78f      	b.n	800789c <_strtod_l+0x3d4>
 800797c:	3316      	adds	r3, #22
 800797e:	dba8      	blt.n	80078d2 <_strtod_l+0x40a>
 8007980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007982:	eba3 0808 	sub.w	r8, r3, r8
 8007986:	4b34      	ldr	r3, [pc, #208]	@ (8007a58 <_strtod_l+0x590>)
 8007988:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800798c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007990:	4650      	mov	r0, sl
 8007992:	4659      	mov	r1, fp
 8007994:	f7f8 ff62 	bl	800085c <__aeabi_ddiv>
 8007998:	e782      	b.n	80078a0 <_strtod_l+0x3d8>
 800799a:	2300      	movs	r3, #0
 800799c:	4f2f      	ldr	r7, [pc, #188]	@ (8007a5c <_strtod_l+0x594>)
 800799e:	1124      	asrs	r4, r4, #4
 80079a0:	4650      	mov	r0, sl
 80079a2:	4659      	mov	r1, fp
 80079a4:	461e      	mov	r6, r3
 80079a6:	2c01      	cmp	r4, #1
 80079a8:	dc21      	bgt.n	80079ee <_strtod_l+0x526>
 80079aa:	b10b      	cbz	r3, 80079b0 <_strtod_l+0x4e8>
 80079ac:	4682      	mov	sl, r0
 80079ae:	468b      	mov	fp, r1
 80079b0:	492a      	ldr	r1, [pc, #168]	@ (8007a5c <_strtod_l+0x594>)
 80079b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80079b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80079ba:	4652      	mov	r2, sl
 80079bc:	465b      	mov	r3, fp
 80079be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <_strtod_l+0x598>)
 80079c8:	460a      	mov	r2, r1
 80079ca:	400b      	ands	r3, r1
 80079cc:	4925      	ldr	r1, [pc, #148]	@ (8007a64 <_strtod_l+0x59c>)
 80079ce:	428b      	cmp	r3, r1
 80079d0:	4682      	mov	sl, r0
 80079d2:	d898      	bhi.n	8007906 <_strtod_l+0x43e>
 80079d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80079d8:	428b      	cmp	r3, r1
 80079da:	bf86      	itte	hi
 80079dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007a68 <_strtod_l+0x5a0>
 80079e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80079e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80079e8:	2300      	movs	r3, #0
 80079ea:	9308      	str	r3, [sp, #32]
 80079ec:	e076      	b.n	8007adc <_strtod_l+0x614>
 80079ee:	07e2      	lsls	r2, r4, #31
 80079f0:	d504      	bpl.n	80079fc <_strtod_l+0x534>
 80079f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f6:	f7f8 fe07 	bl	8000608 <__aeabi_dmul>
 80079fa:	2301      	movs	r3, #1
 80079fc:	3601      	adds	r6, #1
 80079fe:	1064      	asrs	r4, r4, #1
 8007a00:	3708      	adds	r7, #8
 8007a02:	e7d0      	b.n	80079a6 <_strtod_l+0x4de>
 8007a04:	d0f0      	beq.n	80079e8 <_strtod_l+0x520>
 8007a06:	4264      	negs	r4, r4
 8007a08:	f014 020f 	ands.w	r2, r4, #15
 8007a0c:	d00a      	beq.n	8007a24 <_strtod_l+0x55c>
 8007a0e:	4b12      	ldr	r3, [pc, #72]	@ (8007a58 <_strtod_l+0x590>)
 8007a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a14:	4650      	mov	r0, sl
 8007a16:	4659      	mov	r1, fp
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 ff1e 	bl	800085c <__aeabi_ddiv>
 8007a20:	4682      	mov	sl, r0
 8007a22:	468b      	mov	fp, r1
 8007a24:	1124      	asrs	r4, r4, #4
 8007a26:	d0df      	beq.n	80079e8 <_strtod_l+0x520>
 8007a28:	2c1f      	cmp	r4, #31
 8007a2a:	dd1f      	ble.n	8007a6c <_strtod_l+0x5a4>
 8007a2c:	2400      	movs	r4, #0
 8007a2e:	46a0      	mov	r8, r4
 8007a30:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a32:	46a1      	mov	r9, r4
 8007a34:	9a05      	ldr	r2, [sp, #20]
 8007a36:	2322      	movs	r3, #34	@ 0x22
 8007a38:	f04f 0a00 	mov.w	sl, #0
 8007a3c:	f04f 0b00 	mov.w	fp, #0
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e76b      	b.n	800791c <_strtod_l+0x454>
 8007a44:	0800b9fb 	.word	0x0800b9fb
 8007a48:	0800bc18 	.word	0x0800bc18
 8007a4c:	0800b9f3 	.word	0x0800b9f3
 8007a50:	0800bada 	.word	0x0800bada
 8007a54:	0800bad6 	.word	0x0800bad6
 8007a58:	0800bca0 	.word	0x0800bca0
 8007a5c:	0800bc78 	.word	0x0800bc78
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	7ca00000 	.word	0x7ca00000
 8007a68:	7fefffff 	.word	0x7fefffff
 8007a6c:	f014 0310 	ands.w	r3, r4, #16
 8007a70:	bf18      	it	ne
 8007a72:	236a      	movne	r3, #106	@ 0x6a
 8007a74:	4ea9      	ldr	r6, [pc, #676]	@ (8007d1c <_strtod_l+0x854>)
 8007a76:	9308      	str	r3, [sp, #32]
 8007a78:	4650      	mov	r0, sl
 8007a7a:	4659      	mov	r1, fp
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	07e7      	lsls	r7, r4, #31
 8007a80:	d504      	bpl.n	8007a8c <_strtod_l+0x5c4>
 8007a82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a86:	f7f8 fdbf 	bl	8000608 <__aeabi_dmul>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	1064      	asrs	r4, r4, #1
 8007a8e:	f106 0608 	add.w	r6, r6, #8
 8007a92:	d1f4      	bne.n	8007a7e <_strtod_l+0x5b6>
 8007a94:	b10b      	cbz	r3, 8007a9a <_strtod_l+0x5d2>
 8007a96:	4682      	mov	sl, r0
 8007a98:	468b      	mov	fp, r1
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	b1b3      	cbz	r3, 8007acc <_strtod_l+0x604>
 8007a9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007aa2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	dd0f      	ble.n	8007acc <_strtod_l+0x604>
 8007aac:	2b1f      	cmp	r3, #31
 8007aae:	dd56      	ble.n	8007b5e <_strtod_l+0x696>
 8007ab0:	2b34      	cmp	r3, #52	@ 0x34
 8007ab2:	bfde      	ittt	le
 8007ab4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ab8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007abc:	4093      	lslle	r3, r2
 8007abe:	f04f 0a00 	mov.w	sl, #0
 8007ac2:	bfcc      	ite	gt
 8007ac4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ac8:	ea03 0b01 	andle.w	fp, r3, r1
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4650      	mov	r0, sl
 8007ad2:	4659      	mov	r1, fp
 8007ad4:	f7f9 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1a7      	bne.n	8007a2c <_strtod_l+0x564>
 8007adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007ae2:	9805      	ldr	r0, [sp, #20]
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	464a      	mov	r2, r9
 8007ae8:	f002 fce2 	bl	800a4b0 <__s2b>
 8007aec:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f43f af09 	beq.w	8007906 <_strtod_l+0x43e>
 8007af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007af6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af8:	2a00      	cmp	r2, #0
 8007afa:	eba3 0308 	sub.w	r3, r3, r8
 8007afe:	bfa8      	it	ge
 8007b00:	2300      	movge	r3, #0
 8007b02:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b04:	2400      	movs	r4, #0
 8007b06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b0c:	46a0      	mov	r8, r4
 8007b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b10:	9805      	ldr	r0, [sp, #20]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	f002 fc24 	bl	800a360 <_Balloc>
 8007b18:	4681      	mov	r9, r0
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f43f aef7 	beq.w	800790e <_strtod_l+0x446>
 8007b20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	3202      	adds	r2, #2
 8007b26:	f103 010c 	add.w	r1, r3, #12
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	300c      	adds	r0, #12
 8007b2e:	f001 f93a 	bl	8008da6 <memcpy>
 8007b32:	ec4b ab10 	vmov	d0, sl, fp
 8007b36:	9805      	ldr	r0, [sp, #20]
 8007b38:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b3a:	a91b      	add	r1, sp, #108	@ 0x6c
 8007b3c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007b40:	f002 ffea 	bl	800ab18 <__d2b>
 8007b44:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f aee1 	beq.w	800790e <_strtod_l+0x446>
 8007b4c:	9805      	ldr	r0, [sp, #20]
 8007b4e:	2101      	movs	r1, #1
 8007b50:	f002 fd44 	bl	800a5dc <__i2b>
 8007b54:	4680      	mov	r8, r0
 8007b56:	b948      	cbnz	r0, 8007b6c <_strtod_l+0x6a4>
 8007b58:	f04f 0800 	mov.w	r8, #0
 8007b5c:	e6d7      	b.n	800790e <_strtod_l+0x446>
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	ea03 0a0a 	and.w	sl, r3, sl
 8007b6a:	e7af      	b.n	8007acc <_strtod_l+0x604>
 8007b6c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007b6e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	bfab      	itete	ge
 8007b74:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b76:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b78:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b7a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b7c:	bfac      	ite	ge
 8007b7e:	18ef      	addge	r7, r5, r3
 8007b80:	1b5e      	sublt	r6, r3, r5
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	1aed      	subs	r5, r5, r3
 8007b86:	4415      	add	r5, r2
 8007b88:	4b65      	ldr	r3, [pc, #404]	@ (8007d20 <_strtod_l+0x858>)
 8007b8a:	3d01      	subs	r5, #1
 8007b8c:	429d      	cmp	r5, r3
 8007b8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b92:	da50      	bge.n	8007c36 <_strtod_l+0x76e>
 8007b94:	1b5b      	subs	r3, r3, r5
 8007b96:	2b1f      	cmp	r3, #31
 8007b98:	eba2 0203 	sub.w	r2, r2, r3
 8007b9c:	f04f 0101 	mov.w	r1, #1
 8007ba0:	dc3d      	bgt.n	8007c1e <_strtod_l+0x756>
 8007ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bac:	18bd      	adds	r5, r7, r2
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	42af      	cmp	r7, r5
 8007bb2:	4416      	add	r6, r2
 8007bb4:	441e      	add	r6, r3
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	bfa8      	it	ge
 8007bba:	462b      	movge	r3, r5
 8007bbc:	42b3      	cmp	r3, r6
 8007bbe:	bfa8      	it	ge
 8007bc0:	4633      	movge	r3, r6
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfc2      	ittt	gt
 8007bc6:	1aed      	subgt	r5, r5, r3
 8007bc8:	1af6      	subgt	r6, r6, r3
 8007bca:	1aff      	subgt	r7, r7, r3
 8007bcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd16      	ble.n	8007c00 <_strtod_l+0x738>
 8007bd2:	4641      	mov	r1, r8
 8007bd4:	9805      	ldr	r0, [sp, #20]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f002 fdb8 	bl	800a74c <__pow5mult>
 8007bdc:	4680      	mov	r8, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0ba      	beq.n	8007b58 <_strtod_l+0x690>
 8007be2:	4601      	mov	r1, r0
 8007be4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007be6:	9805      	ldr	r0, [sp, #20]
 8007be8:	f002 fd0e 	bl	800a608 <__multiply>
 8007bec:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f ae8d 	beq.w	800790e <_strtod_l+0x446>
 8007bf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bf6:	9805      	ldr	r0, [sp, #20]
 8007bf8:	f002 fbf2 	bl	800a3e0 <_Bfree>
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	dc1d      	bgt.n	8007c40 <_strtod_l+0x778>
 8007c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd23      	ble.n	8007c52 <_strtod_l+0x78a>
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c0e:	9805      	ldr	r0, [sp, #20]
 8007c10:	f002 fd9c 	bl	800a74c <__pow5mult>
 8007c14:	4681      	mov	r9, r0
 8007c16:	b9e0      	cbnz	r0, 8007c52 <_strtod_l+0x78a>
 8007c18:	f04f 0900 	mov.w	r9, #0
 8007c1c:	e677      	b.n	800790e <_strtod_l+0x446>
 8007c1e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007c22:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007c26:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007c2a:	35e2      	adds	r5, #226	@ 0xe2
 8007c2c:	fa01 f305 	lsl.w	r3, r1, r5
 8007c30:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c32:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c34:	e7ba      	b.n	8007bac <_strtod_l+0x6e4>
 8007c36:	2300      	movs	r3, #0
 8007c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c3e:	e7b5      	b.n	8007bac <_strtod_l+0x6e4>
 8007c40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c42:	9805      	ldr	r0, [sp, #20]
 8007c44:	462a      	mov	r2, r5
 8007c46:	f002 fddb 	bl	800a800 <__lshift>
 8007c4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1d9      	bne.n	8007c04 <_strtod_l+0x73c>
 8007c50:	e65d      	b.n	800790e <_strtod_l+0x446>
 8007c52:	2e00      	cmp	r6, #0
 8007c54:	dd07      	ble.n	8007c66 <_strtod_l+0x79e>
 8007c56:	4649      	mov	r1, r9
 8007c58:	9805      	ldr	r0, [sp, #20]
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	f002 fdd0 	bl	800a800 <__lshift>
 8007c60:	4681      	mov	r9, r0
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d0d8      	beq.n	8007c18 <_strtod_l+0x750>
 8007c66:	2f00      	cmp	r7, #0
 8007c68:	dd08      	ble.n	8007c7c <_strtod_l+0x7b4>
 8007c6a:	4641      	mov	r1, r8
 8007c6c:	9805      	ldr	r0, [sp, #20]
 8007c6e:	463a      	mov	r2, r7
 8007c70:	f002 fdc6 	bl	800a800 <__lshift>
 8007c74:	4680      	mov	r8, r0
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f43f ae49 	beq.w	800790e <_strtod_l+0x446>
 8007c7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c7e:	9805      	ldr	r0, [sp, #20]
 8007c80:	464a      	mov	r2, r9
 8007c82:	f002 fe45 	bl	800a910 <__mdiff>
 8007c86:	4604      	mov	r4, r0
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f43f ae40 	beq.w	800790e <_strtod_l+0x446>
 8007c8e:	68c3      	ldr	r3, [r0, #12]
 8007c90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c92:	2300      	movs	r3, #0
 8007c94:	60c3      	str	r3, [r0, #12]
 8007c96:	4641      	mov	r1, r8
 8007c98:	f002 fe1e 	bl	800a8d8 <__mcmp>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	da45      	bge.n	8007d2c <_strtod_l+0x864>
 8007ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ca6:	d16b      	bne.n	8007d80 <_strtod_l+0x8b8>
 8007ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d167      	bne.n	8007d80 <_strtod_l+0x8b8>
 8007cb0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cb4:	0d1b      	lsrs	r3, r3, #20
 8007cb6:	051b      	lsls	r3, r3, #20
 8007cb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007cbc:	d960      	bls.n	8007d80 <_strtod_l+0x8b8>
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	b913      	cbnz	r3, 8007cc8 <_strtod_l+0x800>
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	dd5b      	ble.n	8007d80 <_strtod_l+0x8b8>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	2201      	movs	r2, #1
 8007ccc:	9805      	ldr	r0, [sp, #20]
 8007cce:	f002 fd97 	bl	800a800 <__lshift>
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	f002 fdff 	bl	800a8d8 <__mcmp>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	dd50      	ble.n	8007d80 <_strtod_l+0x8b8>
 8007cde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ce2:	9a08      	ldr	r2, [sp, #32]
 8007ce4:	0d1b      	lsrs	r3, r3, #20
 8007ce6:	051b      	lsls	r3, r3, #20
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	d06a      	beq.n	8007dc2 <_strtod_l+0x8fa>
 8007cec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007cf0:	d867      	bhi.n	8007dc2 <_strtod_l+0x8fa>
 8007cf2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007cf6:	f67f ae9d 	bls.w	8007a34 <_strtod_l+0x56c>
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <_strtod_l+0x85c>)
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	4659      	mov	r1, fp
 8007d00:	2200      	movs	r2, #0
 8007d02:	f7f8 fc81 	bl	8000608 <__aeabi_dmul>
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <_strtod_l+0x860>)
 8007d08:	400b      	ands	r3, r1
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	468b      	mov	fp, r1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f47f ae08 	bne.w	8007924 <_strtod_l+0x45c>
 8007d14:	9a05      	ldr	r2, [sp, #20]
 8007d16:	2322      	movs	r3, #34	@ 0x22
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e603      	b.n	8007924 <_strtod_l+0x45c>
 8007d1c:	0800bc40 	.word	0x0800bc40
 8007d20:	fffffc02 	.word	0xfffffc02
 8007d24:	39500000 	.word	0x39500000
 8007d28:	7ff00000 	.word	0x7ff00000
 8007d2c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007d30:	d165      	bne.n	8007dfe <_strtod_l+0x936>
 8007d32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d38:	b35a      	cbz	r2, 8007d92 <_strtod_l+0x8ca>
 8007d3a:	4a9f      	ldr	r2, [pc, #636]	@ (8007fb8 <_strtod_l+0xaf0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d12b      	bne.n	8007d98 <_strtod_l+0x8d0>
 8007d40:	9b08      	ldr	r3, [sp, #32]
 8007d42:	4651      	mov	r1, sl
 8007d44:	b303      	cbz	r3, 8007d88 <_strtod_l+0x8c0>
 8007d46:	4b9d      	ldr	r3, [pc, #628]	@ (8007fbc <_strtod_l+0xaf4>)
 8007d48:	465a      	mov	r2, fp
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	d81b      	bhi.n	8007d8e <_strtod_l+0x8c6>
 8007d56:	0d1b      	lsrs	r3, r3, #20
 8007d58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d119      	bne.n	8007d98 <_strtod_l+0x8d0>
 8007d64:	4b96      	ldr	r3, [pc, #600]	@ (8007fc0 <_strtod_l+0xaf8>)
 8007d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d102      	bne.n	8007d72 <_strtod_l+0x8aa>
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	f43f adce 	beq.w	800790e <_strtod_l+0x446>
 8007d72:	4b92      	ldr	r3, [pc, #584]	@ (8007fbc <_strtod_l+0xaf4>)
 8007d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d76:	401a      	ands	r2, r3
 8007d78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d7c:	f04f 0a00 	mov.w	sl, #0
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1b9      	bne.n	8007cfa <_strtod_l+0x832>
 8007d86:	e5cd      	b.n	8007924 <_strtod_l+0x45c>
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	e7e8      	b.n	8007d60 <_strtod_l+0x898>
 8007d8e:	4613      	mov	r3, r2
 8007d90:	e7e6      	b.n	8007d60 <_strtod_l+0x898>
 8007d92:	ea53 030a 	orrs.w	r3, r3, sl
 8007d96:	d0a2      	beq.n	8007cde <_strtod_l+0x816>
 8007d98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d9a:	b1db      	cbz	r3, 8007dd4 <_strtod_l+0x90c>
 8007d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d9e:	4213      	tst	r3, r2
 8007da0:	d0ee      	beq.n	8007d80 <_strtod_l+0x8b8>
 8007da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da4:	9a08      	ldr	r2, [sp, #32]
 8007da6:	4650      	mov	r0, sl
 8007da8:	4659      	mov	r1, fp
 8007daa:	b1bb      	cbz	r3, 8007ddc <_strtod_l+0x914>
 8007dac:	f7ff fb6d 	bl	800748a <sulp>
 8007db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007db4:	ec53 2b10 	vmov	r2, r3, d0
 8007db8:	f7f8 fa70 	bl	800029c <__adddf3>
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	e7de      	b.n	8007d80 <_strtod_l+0x8b8>
 8007dc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007dc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dce:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd2:	e7d5      	b.n	8007d80 <_strtod_l+0x8b8>
 8007dd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dd6:	ea13 0f0a 	tst.w	r3, sl
 8007dda:	e7e1      	b.n	8007da0 <_strtod_l+0x8d8>
 8007ddc:	f7ff fb55 	bl	800748a <sulp>
 8007de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007de4:	ec53 2b10 	vmov	r2, r3, d0
 8007de8:	f7f8 fa56 	bl	8000298 <__aeabi_dsub>
 8007dec:	2200      	movs	r2, #0
 8007dee:	2300      	movs	r3, #0
 8007df0:	4682      	mov	sl, r0
 8007df2:	468b      	mov	fp, r1
 8007df4:	f7f8 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d0c1      	beq.n	8007d80 <_strtod_l+0x8b8>
 8007dfc:	e61a      	b.n	8007a34 <_strtod_l+0x56c>
 8007dfe:	4641      	mov	r1, r8
 8007e00:	4620      	mov	r0, r4
 8007e02:	f002 fee1 	bl	800abc8 <__ratio>
 8007e06:	ec57 6b10 	vmov	r6, r7, d0
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fe74 	bl	8000b00 <__aeabi_dcmple>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d06f      	beq.n	8007efc <_strtod_l+0xa34>
 8007e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d17a      	bne.n	8007f18 <_strtod_l+0xa50>
 8007e22:	f1ba 0f00 	cmp.w	sl, #0
 8007e26:	d158      	bne.n	8007eda <_strtod_l+0xa12>
 8007e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d15a      	bne.n	8007ee8 <_strtod_l+0xa20>
 8007e32:	4b64      	ldr	r3, [pc, #400]	@ (8007fc4 <_strtod_l+0xafc>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f7f8 fe57 	bl	8000aec <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d159      	bne.n	8007ef6 <_strtod_l+0xa2e>
 8007e42:	4630      	mov	r0, r6
 8007e44:	4639      	mov	r1, r7
 8007e46:	4b60      	ldr	r3, [pc, #384]	@ (8007fc8 <_strtod_l+0xb00>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f7f8 fbdd 	bl	8000608 <__aeabi_dmul>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007e56:	9606      	str	r6, [sp, #24]
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e5e:	4d57      	ldr	r5, [pc, #348]	@ (8007fbc <_strtod_l+0xaf4>)
 8007e60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e66:	401d      	ands	r5, r3
 8007e68:	4b58      	ldr	r3, [pc, #352]	@ (8007fcc <_strtod_l+0xb04>)
 8007e6a:	429d      	cmp	r5, r3
 8007e6c:	f040 80b2 	bne.w	8007fd4 <_strtod_l+0xb0c>
 8007e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e76:	ec4b ab10 	vmov	d0, sl, fp
 8007e7a:	f002 fddd 	bl	800aa38 <__ulp>
 8007e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e82:	ec51 0b10 	vmov	r0, r1, d0
 8007e86:	f7f8 fbbf 	bl	8000608 <__aeabi_dmul>
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	f7f8 fa05 	bl	800029c <__adddf3>
 8007e92:	460b      	mov	r3, r1
 8007e94:	4949      	ldr	r1, [pc, #292]	@ (8007fbc <_strtod_l+0xaf4>)
 8007e96:	4a4e      	ldr	r2, [pc, #312]	@ (8007fd0 <_strtod_l+0xb08>)
 8007e98:	4019      	ands	r1, r3
 8007e9a:	4291      	cmp	r1, r2
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	d942      	bls.n	8007f26 <_strtod_l+0xa5e>
 8007ea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ea2:	4b47      	ldr	r3, [pc, #284]	@ (8007fc0 <_strtod_l+0xaf8>)
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d103      	bne.n	8007eb0 <_strtod_l+0x9e8>
 8007ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f43f ad2f 	beq.w	800790e <_strtod_l+0x446>
 8007eb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007fc0 <_strtod_l+0xaf8>
 8007eb4:	f04f 3aff 	mov.w	sl, #4294967295
 8007eb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eba:	9805      	ldr	r0, [sp, #20]
 8007ebc:	f002 fa90 	bl	800a3e0 <_Bfree>
 8007ec0:	9805      	ldr	r0, [sp, #20]
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	f002 fa8c 	bl	800a3e0 <_Bfree>
 8007ec8:	9805      	ldr	r0, [sp, #20]
 8007eca:	4641      	mov	r1, r8
 8007ecc:	f002 fa88 	bl	800a3e0 <_Bfree>
 8007ed0:	9805      	ldr	r0, [sp, #20]
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	f002 fa84 	bl	800a3e0 <_Bfree>
 8007ed8:	e619      	b.n	8007b0e <_strtod_l+0x646>
 8007eda:	f1ba 0f01 	cmp.w	sl, #1
 8007ede:	d103      	bne.n	8007ee8 <_strtod_l+0xa20>
 8007ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f43f ada6 	beq.w	8007a34 <_strtod_l+0x56c>
 8007ee8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007f98 <_strtod_l+0xad0>
 8007eec:	4f35      	ldr	r7, [pc, #212]	@ (8007fc4 <_strtod_l+0xafc>)
 8007eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	e7b1      	b.n	8007e5a <_strtod_l+0x992>
 8007ef6:	4f34      	ldr	r7, [pc, #208]	@ (8007fc8 <_strtod_l+0xb00>)
 8007ef8:	2600      	movs	r6, #0
 8007efa:	e7aa      	b.n	8007e52 <_strtod_l+0x98a>
 8007efc:	4b32      	ldr	r3, [pc, #200]	@ (8007fc8 <_strtod_l+0xb00>)
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	2200      	movs	r2, #0
 8007f04:	f7f8 fb80 	bl	8000608 <__aeabi_dmul>
 8007f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d09f      	beq.n	8007e52 <_strtod_l+0x98a>
 8007f12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f16:	e7a0      	b.n	8007e5a <_strtod_l+0x992>
 8007f18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007fa0 <_strtod_l+0xad8>
 8007f1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f20:	ec57 6b17 	vmov	r6, r7, d7
 8007f24:	e799      	b.n	8007e5a <_strtod_l+0x992>
 8007f26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007f2a:	9b08      	ldr	r3, [sp, #32]
 8007f2c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1c1      	bne.n	8007eb8 <_strtod_l+0x9f0>
 8007f34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f38:	0d1b      	lsrs	r3, r3, #20
 8007f3a:	051b      	lsls	r3, r3, #20
 8007f3c:	429d      	cmp	r5, r3
 8007f3e:	d1bb      	bne.n	8007eb8 <_strtod_l+0x9f0>
 8007f40:	4630      	mov	r0, r6
 8007f42:	4639      	mov	r1, r7
 8007f44:	f7f8 fec0 	bl	8000cc8 <__aeabi_d2lz>
 8007f48:	f7f8 fb30 	bl	80005ac <__aeabi_l2d>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 f9a0 	bl	8000298 <__aeabi_dsub>
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f66:	ea46 060a 	orr.w	r6, r6, sl
 8007f6a:	431e      	orrs	r6, r3
 8007f6c:	d06f      	beq.n	800804e <_strtod_l+0xb86>
 8007f6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007fa8 <_strtod_l+0xae0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 fdba 	bl	8000aec <__aeabi_dcmplt>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f47f acd3 	bne.w	8007924 <_strtod_l+0x45c>
 8007f7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007fb0 <_strtod_l+0xae8>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f88:	f7f8 fdce 	bl	8000b28 <__aeabi_dcmpgt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d093      	beq.n	8007eb8 <_strtod_l+0x9f0>
 8007f90:	e4c8      	b.n	8007924 <_strtod_l+0x45c>
 8007f92:	bf00      	nop
 8007f94:	f3af 8000 	nop.w
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	bff00000 	.word	0xbff00000
 8007fa0:	00000000 	.word	0x00000000
 8007fa4:	3ff00000 	.word	0x3ff00000
 8007fa8:	94a03595 	.word	0x94a03595
 8007fac:	3fdfffff 	.word	0x3fdfffff
 8007fb0:	35afe535 	.word	0x35afe535
 8007fb4:	3fe00000 	.word	0x3fe00000
 8007fb8:	000fffff 	.word	0x000fffff
 8007fbc:	7ff00000 	.word	0x7ff00000
 8007fc0:	7fefffff 	.word	0x7fefffff
 8007fc4:	3ff00000 	.word	0x3ff00000
 8007fc8:	3fe00000 	.word	0x3fe00000
 8007fcc:	7fe00000 	.word	0x7fe00000
 8007fd0:	7c9fffff 	.word	0x7c9fffff
 8007fd4:	9b08      	ldr	r3, [sp, #32]
 8007fd6:	b323      	cbz	r3, 8008022 <_strtod_l+0xb5a>
 8007fd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007fdc:	d821      	bhi.n	8008022 <_strtod_l+0xb5a>
 8007fde:	a328      	add	r3, pc, #160	@ (adr r3, 8008080 <_strtod_l+0xbb8>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fd8a 	bl	8000b00 <__aeabi_dcmple>
 8007fec:	b1a0      	cbz	r0, 8008018 <_strtod_l+0xb50>
 8007fee:	4639      	mov	r1, r7
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7f8 fde1 	bl	8000bb8 <__aeabi_d2uiz>
 8007ff6:	2801      	cmp	r0, #1
 8007ff8:	bf38      	it	cc
 8007ffa:	2001      	movcc	r0, #1
 8007ffc:	f7f8 fa8a 	bl	8000514 <__aeabi_ui2d>
 8008000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	b9fb      	cbnz	r3, 8008048 <_strtod_l+0xb80>
 8008008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800800c:	9014      	str	r0, [sp, #80]	@ 0x50
 800800e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008010:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008014:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008018:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800801a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800801e:	1b5b      	subs	r3, r3, r5
 8008020:	9311      	str	r3, [sp, #68]	@ 0x44
 8008022:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008026:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800802a:	f002 fd05 	bl	800aa38 <__ulp>
 800802e:	4650      	mov	r0, sl
 8008030:	ec53 2b10 	vmov	r2, r3, d0
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 fae7 	bl	8000608 <__aeabi_dmul>
 800803a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800803e:	f7f8 f92d 	bl	800029c <__adddf3>
 8008042:	4682      	mov	sl, r0
 8008044:	468b      	mov	fp, r1
 8008046:	e770      	b.n	8007f2a <_strtod_l+0xa62>
 8008048:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800804c:	e7e0      	b.n	8008010 <_strtod_l+0xb48>
 800804e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008088 <_strtod_l+0xbc0>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 fd4a 	bl	8000aec <__aeabi_dcmplt>
 8008058:	e798      	b.n	8007f8c <_strtod_l+0xac4>
 800805a:	2300      	movs	r3, #0
 800805c:	930e      	str	r3, [sp, #56]	@ 0x38
 800805e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	f7ff ba6d 	b.w	8007542 <_strtod_l+0x7a>
 8008068:	2a65      	cmp	r2, #101	@ 0x65
 800806a:	f43f ab68 	beq.w	800773e <_strtod_l+0x276>
 800806e:	2a45      	cmp	r2, #69	@ 0x45
 8008070:	f43f ab65 	beq.w	800773e <_strtod_l+0x276>
 8008074:	2301      	movs	r3, #1
 8008076:	f7ff bba0 	b.w	80077ba <_strtod_l+0x2f2>
 800807a:	bf00      	nop
 800807c:	f3af 8000 	nop.w
 8008080:	ffc00000 	.word	0xffc00000
 8008084:	41dfffff 	.word	0x41dfffff
 8008088:	94a03595 	.word	0x94a03595
 800808c:	3fcfffff 	.word	0x3fcfffff

08008090 <strtod>:
 8008090:	460a      	mov	r2, r1
 8008092:	4601      	mov	r1, r0
 8008094:	4802      	ldr	r0, [pc, #8]	@ (80080a0 <strtod+0x10>)
 8008096:	4b03      	ldr	r3, [pc, #12]	@ (80080a4 <strtod+0x14>)
 8008098:	6800      	ldr	r0, [r0, #0]
 800809a:	f7ff ba15 	b.w	80074c8 <_strtod_l>
 800809e:	bf00      	nop
 80080a0:	200001d4 	.word	0x200001d4
 80080a4:	20000068 	.word	0x20000068

080080a8 <__cvt>:
 80080a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	ec57 6b10 	vmov	r6, r7, d0
 80080b0:	2f00      	cmp	r7, #0
 80080b2:	460c      	mov	r4, r1
 80080b4:	4619      	mov	r1, r3
 80080b6:	463b      	mov	r3, r7
 80080b8:	bfbb      	ittet	lt
 80080ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80080be:	461f      	movlt	r7, r3
 80080c0:	2300      	movge	r3, #0
 80080c2:	232d      	movlt	r3, #45	@ 0x2d
 80080c4:	700b      	strb	r3, [r1, #0]
 80080c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80080cc:	4691      	mov	r9, r2
 80080ce:	f023 0820 	bic.w	r8, r3, #32
 80080d2:	bfbc      	itt	lt
 80080d4:	4632      	movlt	r2, r6
 80080d6:	4616      	movlt	r6, r2
 80080d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80080dc:	d005      	beq.n	80080ea <__cvt+0x42>
 80080de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80080e2:	d100      	bne.n	80080e6 <__cvt+0x3e>
 80080e4:	3401      	adds	r4, #1
 80080e6:	2102      	movs	r1, #2
 80080e8:	e000      	b.n	80080ec <__cvt+0x44>
 80080ea:	2103      	movs	r1, #3
 80080ec:	ab03      	add	r3, sp, #12
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	ab02      	add	r3, sp, #8
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	ec47 6b10 	vmov	d0, r6, r7
 80080f8:	4653      	mov	r3, sl
 80080fa:	4622      	mov	r2, r4
 80080fc:	f000 ff14 	bl	8008f28 <_dtoa_r>
 8008100:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008104:	4605      	mov	r5, r0
 8008106:	d119      	bne.n	800813c <__cvt+0x94>
 8008108:	f019 0f01 	tst.w	r9, #1
 800810c:	d00e      	beq.n	800812c <__cvt+0x84>
 800810e:	eb00 0904 	add.w	r9, r0, r4
 8008112:	2200      	movs	r2, #0
 8008114:	2300      	movs	r3, #0
 8008116:	4630      	mov	r0, r6
 8008118:	4639      	mov	r1, r7
 800811a:	f7f8 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800811e:	b108      	cbz	r0, 8008124 <__cvt+0x7c>
 8008120:	f8cd 900c 	str.w	r9, [sp, #12]
 8008124:	2230      	movs	r2, #48	@ 0x30
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	454b      	cmp	r3, r9
 800812a:	d31e      	bcc.n	800816a <__cvt+0xc2>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008130:	1b5b      	subs	r3, r3, r5
 8008132:	4628      	mov	r0, r5
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	b004      	add	sp, #16
 8008138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008140:	eb00 0904 	add.w	r9, r0, r4
 8008144:	d1e5      	bne.n	8008112 <__cvt+0x6a>
 8008146:	7803      	ldrb	r3, [r0, #0]
 8008148:	2b30      	cmp	r3, #48	@ 0x30
 800814a:	d10a      	bne.n	8008162 <__cvt+0xba>
 800814c:	2200      	movs	r2, #0
 800814e:	2300      	movs	r3, #0
 8008150:	4630      	mov	r0, r6
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008158:	b918      	cbnz	r0, 8008162 <__cvt+0xba>
 800815a:	f1c4 0401 	rsb	r4, r4, #1
 800815e:	f8ca 4000 	str.w	r4, [sl]
 8008162:	f8da 3000 	ldr.w	r3, [sl]
 8008166:	4499      	add	r9, r3
 8008168:	e7d3      	b.n	8008112 <__cvt+0x6a>
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e7d9      	b.n	8008126 <__cvt+0x7e>

08008172 <__exponent>:
 8008172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008174:	2900      	cmp	r1, #0
 8008176:	bfba      	itte	lt
 8008178:	4249      	neglt	r1, r1
 800817a:	232d      	movlt	r3, #45	@ 0x2d
 800817c:	232b      	movge	r3, #43	@ 0x2b
 800817e:	2909      	cmp	r1, #9
 8008180:	7002      	strb	r2, [r0, #0]
 8008182:	7043      	strb	r3, [r0, #1]
 8008184:	dd29      	ble.n	80081da <__exponent+0x68>
 8008186:	f10d 0307 	add.w	r3, sp, #7
 800818a:	461d      	mov	r5, r3
 800818c:	270a      	movs	r7, #10
 800818e:	461a      	mov	r2, r3
 8008190:	fbb1 f6f7 	udiv	r6, r1, r7
 8008194:	fb07 1416 	mls	r4, r7, r6, r1
 8008198:	3430      	adds	r4, #48	@ 0x30
 800819a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800819e:	460c      	mov	r4, r1
 80081a0:	2c63      	cmp	r4, #99	@ 0x63
 80081a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80081a6:	4631      	mov	r1, r6
 80081a8:	dcf1      	bgt.n	800818e <__exponent+0x1c>
 80081aa:	3130      	adds	r1, #48	@ 0x30
 80081ac:	1e94      	subs	r4, r2, #2
 80081ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80081b2:	1c41      	adds	r1, r0, #1
 80081b4:	4623      	mov	r3, r4
 80081b6:	42ab      	cmp	r3, r5
 80081b8:	d30a      	bcc.n	80081d0 <__exponent+0x5e>
 80081ba:	f10d 0309 	add.w	r3, sp, #9
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	42ac      	cmp	r4, r5
 80081c2:	bf88      	it	hi
 80081c4:	2300      	movhi	r3, #0
 80081c6:	3302      	adds	r3, #2
 80081c8:	4403      	add	r3, r0
 80081ca:	1a18      	subs	r0, r3, r0
 80081cc:	b003      	add	sp, #12
 80081ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80081d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80081d8:	e7ed      	b.n	80081b6 <__exponent+0x44>
 80081da:	2330      	movs	r3, #48	@ 0x30
 80081dc:	3130      	adds	r1, #48	@ 0x30
 80081de:	7083      	strb	r3, [r0, #2]
 80081e0:	70c1      	strb	r1, [r0, #3]
 80081e2:	1d03      	adds	r3, r0, #4
 80081e4:	e7f1      	b.n	80081ca <__exponent+0x58>
	...

080081e8 <_printf_float>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	b08d      	sub	sp, #52	@ 0x34
 80081ee:	460c      	mov	r4, r1
 80081f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80081f4:	4616      	mov	r6, r2
 80081f6:	461f      	mov	r7, r3
 80081f8:	4605      	mov	r5, r0
 80081fa:	f000 fd5d 	bl	8008cb8 <_localeconv_r>
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	4618      	mov	r0, r3
 8008204:	f7f8 f83c 	bl	8000280 <strlen>
 8008208:	2300      	movs	r3, #0
 800820a:	930a      	str	r3, [sp, #40]	@ 0x28
 800820c:	f8d8 3000 	ldr.w	r3, [r8]
 8008210:	9005      	str	r0, [sp, #20]
 8008212:	3307      	adds	r3, #7
 8008214:	f023 0307 	bic.w	r3, r3, #7
 8008218:	f103 0208 	add.w	r2, r3, #8
 800821c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008220:	f8d4 b000 	ldr.w	fp, [r4]
 8008224:	f8c8 2000 	str.w	r2, [r8]
 8008228:	e9d3 8900 	ldrd	r8, r9, [r3]
 800822c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	f8cd 8018 	str.w	r8, [sp, #24]
 8008236:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800823a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800823e:	4b9c      	ldr	r3, [pc, #624]	@ (80084b0 <_printf_float+0x2c8>)
 8008240:	f04f 32ff 	mov.w	r2, #4294967295
 8008244:	f7f8 fc7a 	bl	8000b3c <__aeabi_dcmpun>
 8008248:	bb70      	cbnz	r0, 80082a8 <_printf_float+0xc0>
 800824a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800824e:	4b98      	ldr	r3, [pc, #608]	@ (80084b0 <_printf_float+0x2c8>)
 8008250:	f04f 32ff 	mov.w	r2, #4294967295
 8008254:	f7f8 fc54 	bl	8000b00 <__aeabi_dcmple>
 8008258:	bb30      	cbnz	r0, 80082a8 <_printf_float+0xc0>
 800825a:	2200      	movs	r2, #0
 800825c:	2300      	movs	r3, #0
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	f7f8 fc43 	bl	8000aec <__aeabi_dcmplt>
 8008266:	b110      	cbz	r0, 800826e <_printf_float+0x86>
 8008268:	232d      	movs	r3, #45	@ 0x2d
 800826a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800826e:	4a91      	ldr	r2, [pc, #580]	@ (80084b4 <_printf_float+0x2cc>)
 8008270:	4b91      	ldr	r3, [pc, #580]	@ (80084b8 <_printf_float+0x2d0>)
 8008272:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008276:	bf8c      	ite	hi
 8008278:	4690      	movhi	r8, r2
 800827a:	4698      	movls	r8, r3
 800827c:	2303      	movs	r3, #3
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	f02b 0304 	bic.w	r3, fp, #4
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	f04f 0900 	mov.w	r9, #0
 800828a:	9700      	str	r7, [sp, #0]
 800828c:	4633      	mov	r3, r6
 800828e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008290:	4621      	mov	r1, r4
 8008292:	4628      	mov	r0, r5
 8008294:	f000 f9d2 	bl	800863c <_printf_common>
 8008298:	3001      	adds	r0, #1
 800829a:	f040 808d 	bne.w	80083b8 <_printf_float+0x1d0>
 800829e:	f04f 30ff 	mov.w	r0, #4294967295
 80082a2:	b00d      	add	sp, #52	@ 0x34
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	4642      	mov	r2, r8
 80082aa:	464b      	mov	r3, r9
 80082ac:	4640      	mov	r0, r8
 80082ae:	4649      	mov	r1, r9
 80082b0:	f7f8 fc44 	bl	8000b3c <__aeabi_dcmpun>
 80082b4:	b140      	cbz	r0, 80082c8 <_printf_float+0xe0>
 80082b6:	464b      	mov	r3, r9
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfbc      	itt	lt
 80082bc:	232d      	movlt	r3, #45	@ 0x2d
 80082be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80082c2:	4a7e      	ldr	r2, [pc, #504]	@ (80084bc <_printf_float+0x2d4>)
 80082c4:	4b7e      	ldr	r3, [pc, #504]	@ (80084c0 <_printf_float+0x2d8>)
 80082c6:	e7d4      	b.n	8008272 <_printf_float+0x8a>
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80082ce:	9206      	str	r2, [sp, #24]
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	d13b      	bne.n	800834c <_printf_float+0x164>
 80082d4:	2306      	movs	r3, #6
 80082d6:	6063      	str	r3, [r4, #4]
 80082d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80082dc:	2300      	movs	r3, #0
 80082de:	6022      	str	r2, [r4, #0]
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80082e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80082e8:	ab09      	add	r3, sp, #36	@ 0x24
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	6861      	ldr	r1, [r4, #4]
 80082ee:	ec49 8b10 	vmov	d0, r8, r9
 80082f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7ff fed6 	bl	80080a8 <__cvt>
 80082fc:	9b06      	ldr	r3, [sp, #24]
 80082fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008300:	2b47      	cmp	r3, #71	@ 0x47
 8008302:	4680      	mov	r8, r0
 8008304:	d129      	bne.n	800835a <_printf_float+0x172>
 8008306:	1cc8      	adds	r0, r1, #3
 8008308:	db02      	blt.n	8008310 <_printf_float+0x128>
 800830a:	6863      	ldr	r3, [r4, #4]
 800830c:	4299      	cmp	r1, r3
 800830e:	dd41      	ble.n	8008394 <_printf_float+0x1ac>
 8008310:	f1aa 0a02 	sub.w	sl, sl, #2
 8008314:	fa5f fa8a 	uxtb.w	sl, sl
 8008318:	3901      	subs	r1, #1
 800831a:	4652      	mov	r2, sl
 800831c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008320:	9109      	str	r1, [sp, #36]	@ 0x24
 8008322:	f7ff ff26 	bl	8008172 <__exponent>
 8008326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008328:	1813      	adds	r3, r2, r0
 800832a:	2a01      	cmp	r2, #1
 800832c:	4681      	mov	r9, r0
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	dc02      	bgt.n	8008338 <_printf_float+0x150>
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	07d2      	lsls	r2, r2, #31
 8008336:	d501      	bpl.n	800833c <_printf_float+0x154>
 8008338:	3301      	adds	r3, #1
 800833a:	6123      	str	r3, [r4, #16]
 800833c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0a2      	beq.n	800828a <_printf_float+0xa2>
 8008344:	232d      	movs	r3, #45	@ 0x2d
 8008346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800834a:	e79e      	b.n	800828a <_printf_float+0xa2>
 800834c:	9a06      	ldr	r2, [sp, #24]
 800834e:	2a47      	cmp	r2, #71	@ 0x47
 8008350:	d1c2      	bne.n	80082d8 <_printf_float+0xf0>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1c0      	bne.n	80082d8 <_printf_float+0xf0>
 8008356:	2301      	movs	r3, #1
 8008358:	e7bd      	b.n	80082d6 <_printf_float+0xee>
 800835a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800835e:	d9db      	bls.n	8008318 <_printf_float+0x130>
 8008360:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008364:	d118      	bne.n	8008398 <_printf_float+0x1b0>
 8008366:	2900      	cmp	r1, #0
 8008368:	6863      	ldr	r3, [r4, #4]
 800836a:	dd0b      	ble.n	8008384 <_printf_float+0x19c>
 800836c:	6121      	str	r1, [r4, #16]
 800836e:	b913      	cbnz	r3, 8008376 <_printf_float+0x18e>
 8008370:	6822      	ldr	r2, [r4, #0]
 8008372:	07d0      	lsls	r0, r2, #31
 8008374:	d502      	bpl.n	800837c <_printf_float+0x194>
 8008376:	3301      	adds	r3, #1
 8008378:	440b      	add	r3, r1
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	e7db      	b.n	800833c <_printf_float+0x154>
 8008384:	b913      	cbnz	r3, 800838c <_printf_float+0x1a4>
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	07d2      	lsls	r2, r2, #31
 800838a:	d501      	bpl.n	8008390 <_printf_float+0x1a8>
 800838c:	3302      	adds	r3, #2
 800838e:	e7f4      	b.n	800837a <_printf_float+0x192>
 8008390:	2301      	movs	r3, #1
 8008392:	e7f2      	b.n	800837a <_printf_float+0x192>
 8008394:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800839a:	4299      	cmp	r1, r3
 800839c:	db05      	blt.n	80083aa <_printf_float+0x1c2>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	6121      	str	r1, [r4, #16]
 80083a2:	07d8      	lsls	r0, r3, #31
 80083a4:	d5ea      	bpl.n	800837c <_printf_float+0x194>
 80083a6:	1c4b      	adds	r3, r1, #1
 80083a8:	e7e7      	b.n	800837a <_printf_float+0x192>
 80083aa:	2900      	cmp	r1, #0
 80083ac:	bfd4      	ite	le
 80083ae:	f1c1 0202 	rsble	r2, r1, #2
 80083b2:	2201      	movgt	r2, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	e7e0      	b.n	800837a <_printf_float+0x192>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	055a      	lsls	r2, r3, #21
 80083bc:	d407      	bmi.n	80083ce <_printf_float+0x1e6>
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	4642      	mov	r2, r8
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	d12b      	bne.n	8008424 <_printf_float+0x23c>
 80083cc:	e767      	b.n	800829e <_printf_float+0xb6>
 80083ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083d2:	f240 80dd 	bls.w	8008590 <_printf_float+0x3a8>
 80083d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	f7f8 fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d033      	beq.n	800844e <_printf_float+0x266>
 80083e6:	4a37      	ldr	r2, [pc, #220]	@ (80084c4 <_printf_float+0x2dc>)
 80083e8:	2301      	movs	r3, #1
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f af54 	beq.w	800829e <_printf_float+0xb6>
 80083f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80083fa:	4543      	cmp	r3, r8
 80083fc:	db02      	blt.n	8008404 <_printf_float+0x21c>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	07d8      	lsls	r0, r3, #31
 8008402:	d50f      	bpl.n	8008424 <_printf_float+0x23c>
 8008404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af45 	beq.w	800829e <_printf_float+0xb6>
 8008414:	f04f 0900 	mov.w	r9, #0
 8008418:	f108 38ff 	add.w	r8, r8, #4294967295
 800841c:	f104 0a1a 	add.w	sl, r4, #26
 8008420:	45c8      	cmp	r8, r9
 8008422:	dc09      	bgt.n	8008438 <_printf_float+0x250>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	079b      	lsls	r3, r3, #30
 8008428:	f100 8103 	bmi.w	8008632 <_printf_float+0x44a>
 800842c:	68e0      	ldr	r0, [r4, #12]
 800842e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008430:	4298      	cmp	r0, r3
 8008432:	bfb8      	it	lt
 8008434:	4618      	movlt	r0, r3
 8008436:	e734      	b.n	80082a2 <_printf_float+0xba>
 8008438:	2301      	movs	r3, #1
 800843a:	4652      	mov	r2, sl
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f af2b 	beq.w	800829e <_printf_float+0xb6>
 8008448:	f109 0901 	add.w	r9, r9, #1
 800844c:	e7e8      	b.n	8008420 <_printf_float+0x238>
 800844e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc39      	bgt.n	80084c8 <_printf_float+0x2e0>
 8008454:	4a1b      	ldr	r2, [pc, #108]	@ (80084c4 <_printf_float+0x2dc>)
 8008456:	2301      	movs	r3, #1
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f af1d 	beq.w	800829e <_printf_float+0xb6>
 8008464:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008468:	ea59 0303 	orrs.w	r3, r9, r3
 800846c:	d102      	bne.n	8008474 <_printf_float+0x28c>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	07d9      	lsls	r1, r3, #31
 8008472:	d5d7      	bpl.n	8008424 <_printf_float+0x23c>
 8008474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af0d 	beq.w	800829e <_printf_float+0xb6>
 8008484:	f04f 0a00 	mov.w	sl, #0
 8008488:	f104 0b1a 	add.w	fp, r4, #26
 800848c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800848e:	425b      	negs	r3, r3
 8008490:	4553      	cmp	r3, sl
 8008492:	dc01      	bgt.n	8008498 <_printf_float+0x2b0>
 8008494:	464b      	mov	r3, r9
 8008496:	e793      	b.n	80083c0 <_printf_float+0x1d8>
 8008498:	2301      	movs	r3, #1
 800849a:	465a      	mov	r2, fp
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f aefb 	beq.w	800829e <_printf_float+0xb6>
 80084a8:	f10a 0a01 	add.w	sl, sl, #1
 80084ac:	e7ee      	b.n	800848c <_printf_float+0x2a4>
 80084ae:	bf00      	nop
 80084b0:	7fefffff 	.word	0x7fefffff
 80084b4:	0800b9f2 	.word	0x0800b9f2
 80084b8:	0800b9ee 	.word	0x0800b9ee
 80084bc:	0800b9fa 	.word	0x0800b9fa
 80084c0:	0800b9f6 	.word	0x0800b9f6
 80084c4:	0800b9fe 	.word	0x0800b9fe
 80084c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80084ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084ce:	4553      	cmp	r3, sl
 80084d0:	bfa8      	it	ge
 80084d2:	4653      	movge	r3, sl
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	4699      	mov	r9, r3
 80084d8:	dc36      	bgt.n	8008548 <_printf_float+0x360>
 80084da:	f04f 0b00 	mov.w	fp, #0
 80084de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084e2:	f104 021a 	add.w	r2, r4, #26
 80084e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80084e8:	9306      	str	r3, [sp, #24]
 80084ea:	eba3 0309 	sub.w	r3, r3, r9
 80084ee:	455b      	cmp	r3, fp
 80084f0:	dc31      	bgt.n	8008556 <_printf_float+0x36e>
 80084f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f4:	459a      	cmp	sl, r3
 80084f6:	dc3a      	bgt.n	800856e <_printf_float+0x386>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	07da      	lsls	r2, r3, #31
 80084fc:	d437      	bmi.n	800856e <_printf_float+0x386>
 80084fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008500:	ebaa 0903 	sub.w	r9, sl, r3
 8008504:	9b06      	ldr	r3, [sp, #24]
 8008506:	ebaa 0303 	sub.w	r3, sl, r3
 800850a:	4599      	cmp	r9, r3
 800850c:	bfa8      	it	ge
 800850e:	4699      	movge	r9, r3
 8008510:	f1b9 0f00 	cmp.w	r9, #0
 8008514:	dc33      	bgt.n	800857e <_printf_float+0x396>
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800851e:	f104 0b1a 	add.w	fp, r4, #26
 8008522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008524:	ebaa 0303 	sub.w	r3, sl, r3
 8008528:	eba3 0309 	sub.w	r3, r3, r9
 800852c:	4543      	cmp	r3, r8
 800852e:	f77f af79 	ble.w	8008424 <_printf_float+0x23c>
 8008532:	2301      	movs	r3, #1
 8008534:	465a      	mov	r2, fp
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	f43f aeae 	beq.w	800829e <_printf_float+0xb6>
 8008542:	f108 0801 	add.w	r8, r8, #1
 8008546:	e7ec      	b.n	8008522 <_printf_float+0x33a>
 8008548:	4642      	mov	r2, r8
 800854a:	4631      	mov	r1, r6
 800854c:	4628      	mov	r0, r5
 800854e:	47b8      	blx	r7
 8008550:	3001      	adds	r0, #1
 8008552:	d1c2      	bne.n	80084da <_printf_float+0x2f2>
 8008554:	e6a3      	b.n	800829e <_printf_float+0xb6>
 8008556:	2301      	movs	r3, #1
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	9206      	str	r2, [sp, #24]
 800855e:	47b8      	blx	r7
 8008560:	3001      	adds	r0, #1
 8008562:	f43f ae9c 	beq.w	800829e <_printf_float+0xb6>
 8008566:	9a06      	ldr	r2, [sp, #24]
 8008568:	f10b 0b01 	add.w	fp, fp, #1
 800856c:	e7bb      	b.n	80084e6 <_printf_float+0x2fe>
 800856e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	d1c0      	bne.n	80084fe <_printf_float+0x316>
 800857c:	e68f      	b.n	800829e <_printf_float+0xb6>
 800857e:	9a06      	ldr	r2, [sp, #24]
 8008580:	464b      	mov	r3, r9
 8008582:	4442      	add	r2, r8
 8008584:	4631      	mov	r1, r6
 8008586:	4628      	mov	r0, r5
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	d1c3      	bne.n	8008516 <_printf_float+0x32e>
 800858e:	e686      	b.n	800829e <_printf_float+0xb6>
 8008590:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008594:	f1ba 0f01 	cmp.w	sl, #1
 8008598:	dc01      	bgt.n	800859e <_printf_float+0x3b6>
 800859a:	07db      	lsls	r3, r3, #31
 800859c:	d536      	bpl.n	800860c <_printf_float+0x424>
 800859e:	2301      	movs	r3, #1
 80085a0:	4642      	mov	r2, r8
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	f43f ae78 	beq.w	800829e <_printf_float+0xb6>
 80085ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae70 	beq.w	800829e <_printf_float+0xb6>
 80085be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80085c2:	2200      	movs	r2, #0
 80085c4:	2300      	movs	r3, #0
 80085c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085ca:	f7f8 fa85 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ce:	b9c0      	cbnz	r0, 8008602 <_printf_float+0x41a>
 80085d0:	4653      	mov	r3, sl
 80085d2:	f108 0201 	add.w	r2, r8, #1
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	d10c      	bne.n	80085fa <_printf_float+0x412>
 80085e0:	e65d      	b.n	800829e <_printf_float+0xb6>
 80085e2:	2301      	movs	r3, #1
 80085e4:	465a      	mov	r2, fp
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae56 	beq.w	800829e <_printf_float+0xb6>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	45d0      	cmp	r8, sl
 80085f8:	dbf3      	blt.n	80085e2 <_printf_float+0x3fa>
 80085fa:	464b      	mov	r3, r9
 80085fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008600:	e6df      	b.n	80083c2 <_printf_float+0x1da>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	f104 0b1a 	add.w	fp, r4, #26
 800860a:	e7f4      	b.n	80085f6 <_printf_float+0x40e>
 800860c:	2301      	movs	r3, #1
 800860e:	4642      	mov	r2, r8
 8008610:	e7e1      	b.n	80085d6 <_printf_float+0x3ee>
 8008612:	2301      	movs	r3, #1
 8008614:	464a      	mov	r2, r9
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f ae3e 	beq.w	800829e <_printf_float+0xb6>
 8008622:	f108 0801 	add.w	r8, r8, #1
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800862a:	1a5b      	subs	r3, r3, r1
 800862c:	4543      	cmp	r3, r8
 800862e:	dcf0      	bgt.n	8008612 <_printf_float+0x42a>
 8008630:	e6fc      	b.n	800842c <_printf_float+0x244>
 8008632:	f04f 0800 	mov.w	r8, #0
 8008636:	f104 0919 	add.w	r9, r4, #25
 800863a:	e7f4      	b.n	8008626 <_printf_float+0x43e>

0800863c <_printf_common>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	4616      	mov	r6, r2
 8008642:	4698      	mov	r8, r3
 8008644:	688a      	ldr	r2, [r1, #8]
 8008646:	690b      	ldr	r3, [r1, #16]
 8008648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800864c:	4293      	cmp	r3, r2
 800864e:	bfb8      	it	lt
 8008650:	4613      	movlt	r3, r2
 8008652:	6033      	str	r3, [r6, #0]
 8008654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008658:	4607      	mov	r7, r0
 800865a:	460c      	mov	r4, r1
 800865c:	b10a      	cbz	r2, 8008662 <_printf_common+0x26>
 800865e:	3301      	adds	r3, #1
 8008660:	6033      	str	r3, [r6, #0]
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	0699      	lsls	r1, r3, #26
 8008666:	bf42      	ittt	mi
 8008668:	6833      	ldrmi	r3, [r6, #0]
 800866a:	3302      	addmi	r3, #2
 800866c:	6033      	strmi	r3, [r6, #0]
 800866e:	6825      	ldr	r5, [r4, #0]
 8008670:	f015 0506 	ands.w	r5, r5, #6
 8008674:	d106      	bne.n	8008684 <_printf_common+0x48>
 8008676:	f104 0a19 	add.w	sl, r4, #25
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	6832      	ldr	r2, [r6, #0]
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	42ab      	cmp	r3, r5
 8008682:	dc26      	bgt.n	80086d2 <_printf_common+0x96>
 8008684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	3b00      	subs	r3, #0
 800868c:	bf18      	it	ne
 800868e:	2301      	movne	r3, #1
 8008690:	0692      	lsls	r2, r2, #26
 8008692:	d42b      	bmi.n	80086ec <_printf_common+0xb0>
 8008694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008698:	4641      	mov	r1, r8
 800869a:	4638      	mov	r0, r7
 800869c:	47c8      	blx	r9
 800869e:	3001      	adds	r0, #1
 80086a0:	d01e      	beq.n	80086e0 <_printf_common+0xa4>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	f003 0306 	and.w	r3, r3, #6
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	bf02      	ittt	eq
 80086ae:	68e5      	ldreq	r5, [r4, #12]
 80086b0:	6833      	ldreq	r3, [r6, #0]
 80086b2:	1aed      	subeq	r5, r5, r3
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	bf0c      	ite	eq
 80086b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086bc:	2500      	movne	r5, #0
 80086be:	4293      	cmp	r3, r2
 80086c0:	bfc4      	itt	gt
 80086c2:	1a9b      	subgt	r3, r3, r2
 80086c4:	18ed      	addgt	r5, r5, r3
 80086c6:	2600      	movs	r6, #0
 80086c8:	341a      	adds	r4, #26
 80086ca:	42b5      	cmp	r5, r6
 80086cc:	d11a      	bne.n	8008704 <_printf_common+0xc8>
 80086ce:	2000      	movs	r0, #0
 80086d0:	e008      	b.n	80086e4 <_printf_common+0xa8>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4652      	mov	r2, sl
 80086d6:	4641      	mov	r1, r8
 80086d8:	4638      	mov	r0, r7
 80086da:	47c8      	blx	r9
 80086dc:	3001      	adds	r0, #1
 80086de:	d103      	bne.n	80086e8 <_printf_common+0xac>
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	3501      	adds	r5, #1
 80086ea:	e7c6      	b.n	800867a <_printf_common+0x3e>
 80086ec:	18e1      	adds	r1, r4, r3
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	2030      	movs	r0, #48	@ 0x30
 80086f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086f6:	4422      	add	r2, r4
 80086f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008700:	3302      	adds	r3, #2
 8008702:	e7c7      	b.n	8008694 <_printf_common+0x58>
 8008704:	2301      	movs	r3, #1
 8008706:	4622      	mov	r2, r4
 8008708:	4641      	mov	r1, r8
 800870a:	4638      	mov	r0, r7
 800870c:	47c8      	blx	r9
 800870e:	3001      	adds	r0, #1
 8008710:	d0e6      	beq.n	80086e0 <_printf_common+0xa4>
 8008712:	3601      	adds	r6, #1
 8008714:	e7d9      	b.n	80086ca <_printf_common+0x8e>
	...

08008718 <_printf_i>:
 8008718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	7e0f      	ldrb	r7, [r1, #24]
 800871e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008720:	2f78      	cmp	r7, #120	@ 0x78
 8008722:	4691      	mov	r9, r2
 8008724:	4680      	mov	r8, r0
 8008726:	460c      	mov	r4, r1
 8008728:	469a      	mov	sl, r3
 800872a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800872e:	d807      	bhi.n	8008740 <_printf_i+0x28>
 8008730:	2f62      	cmp	r7, #98	@ 0x62
 8008732:	d80a      	bhi.n	800874a <_printf_i+0x32>
 8008734:	2f00      	cmp	r7, #0
 8008736:	f000 80d1 	beq.w	80088dc <_printf_i+0x1c4>
 800873a:	2f58      	cmp	r7, #88	@ 0x58
 800873c:	f000 80b8 	beq.w	80088b0 <_printf_i+0x198>
 8008740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008748:	e03a      	b.n	80087c0 <_printf_i+0xa8>
 800874a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800874e:	2b15      	cmp	r3, #21
 8008750:	d8f6      	bhi.n	8008740 <_printf_i+0x28>
 8008752:	a101      	add	r1, pc, #4	@ (adr r1, 8008758 <_printf_i+0x40>)
 8008754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087c5 	.word	0x080087c5
 8008760:	08008741 	.word	0x08008741
 8008764:	08008741 	.word	0x08008741
 8008768:	08008741 	.word	0x08008741
 800876c:	08008741 	.word	0x08008741
 8008770:	080087c5 	.word	0x080087c5
 8008774:	08008741 	.word	0x08008741
 8008778:	08008741 	.word	0x08008741
 800877c:	08008741 	.word	0x08008741
 8008780:	08008741 	.word	0x08008741
 8008784:	080088c3 	.word	0x080088c3
 8008788:	080087ef 	.word	0x080087ef
 800878c:	0800887d 	.word	0x0800887d
 8008790:	08008741 	.word	0x08008741
 8008794:	08008741 	.word	0x08008741
 8008798:	080088e5 	.word	0x080088e5
 800879c:	08008741 	.word	0x08008741
 80087a0:	080087ef 	.word	0x080087ef
 80087a4:	08008741 	.word	0x08008741
 80087a8:	08008741 	.word	0x08008741
 80087ac:	08008885 	.word	0x08008885
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6032      	str	r2, [r6, #0]
 80087b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087c0:	2301      	movs	r3, #1
 80087c2:	e09c      	b.n	80088fe <_printf_i+0x1e6>
 80087c4:	6833      	ldr	r3, [r6, #0]
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	1d19      	adds	r1, r3, #4
 80087ca:	6031      	str	r1, [r6, #0]
 80087cc:	0606      	lsls	r6, r0, #24
 80087ce:	d501      	bpl.n	80087d4 <_printf_i+0xbc>
 80087d0:	681d      	ldr	r5, [r3, #0]
 80087d2:	e003      	b.n	80087dc <_printf_i+0xc4>
 80087d4:	0645      	lsls	r5, r0, #25
 80087d6:	d5fb      	bpl.n	80087d0 <_printf_i+0xb8>
 80087d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087dc:	2d00      	cmp	r5, #0
 80087de:	da03      	bge.n	80087e8 <_printf_i+0xd0>
 80087e0:	232d      	movs	r3, #45	@ 0x2d
 80087e2:	426d      	negs	r5, r5
 80087e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e8:	4858      	ldr	r0, [pc, #352]	@ (800894c <_printf_i+0x234>)
 80087ea:	230a      	movs	r3, #10
 80087ec:	e011      	b.n	8008812 <_printf_i+0xfa>
 80087ee:	6821      	ldr	r1, [r4, #0]
 80087f0:	6833      	ldr	r3, [r6, #0]
 80087f2:	0608      	lsls	r0, r1, #24
 80087f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80087f8:	d402      	bmi.n	8008800 <_printf_i+0xe8>
 80087fa:	0649      	lsls	r1, r1, #25
 80087fc:	bf48      	it	mi
 80087fe:	b2ad      	uxthmi	r5, r5
 8008800:	2f6f      	cmp	r7, #111	@ 0x6f
 8008802:	4852      	ldr	r0, [pc, #328]	@ (800894c <_printf_i+0x234>)
 8008804:	6033      	str	r3, [r6, #0]
 8008806:	bf14      	ite	ne
 8008808:	230a      	movne	r3, #10
 800880a:	2308      	moveq	r3, #8
 800880c:	2100      	movs	r1, #0
 800880e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008812:	6866      	ldr	r6, [r4, #4]
 8008814:	60a6      	str	r6, [r4, #8]
 8008816:	2e00      	cmp	r6, #0
 8008818:	db05      	blt.n	8008826 <_printf_i+0x10e>
 800881a:	6821      	ldr	r1, [r4, #0]
 800881c:	432e      	orrs	r6, r5
 800881e:	f021 0104 	bic.w	r1, r1, #4
 8008822:	6021      	str	r1, [r4, #0]
 8008824:	d04b      	beq.n	80088be <_printf_i+0x1a6>
 8008826:	4616      	mov	r6, r2
 8008828:	fbb5 f1f3 	udiv	r1, r5, r3
 800882c:	fb03 5711 	mls	r7, r3, r1, r5
 8008830:	5dc7      	ldrb	r7, [r0, r7]
 8008832:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008836:	462f      	mov	r7, r5
 8008838:	42bb      	cmp	r3, r7
 800883a:	460d      	mov	r5, r1
 800883c:	d9f4      	bls.n	8008828 <_printf_i+0x110>
 800883e:	2b08      	cmp	r3, #8
 8008840:	d10b      	bne.n	800885a <_printf_i+0x142>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	07df      	lsls	r7, r3, #31
 8008846:	d508      	bpl.n	800885a <_printf_i+0x142>
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	6861      	ldr	r1, [r4, #4]
 800884c:	4299      	cmp	r1, r3
 800884e:	bfde      	ittt	le
 8008850:	2330      	movle	r3, #48	@ 0x30
 8008852:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008856:	f106 36ff 	addle.w	r6, r6, #4294967295
 800885a:	1b92      	subs	r2, r2, r6
 800885c:	6122      	str	r2, [r4, #16]
 800885e:	f8cd a000 	str.w	sl, [sp]
 8008862:	464b      	mov	r3, r9
 8008864:	aa03      	add	r2, sp, #12
 8008866:	4621      	mov	r1, r4
 8008868:	4640      	mov	r0, r8
 800886a:	f7ff fee7 	bl	800863c <_printf_common>
 800886e:	3001      	adds	r0, #1
 8008870:	d14a      	bne.n	8008908 <_printf_i+0x1f0>
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	b004      	add	sp, #16
 8008878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	f043 0320 	orr.w	r3, r3, #32
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	4832      	ldr	r0, [pc, #200]	@ (8008950 <_printf_i+0x238>)
 8008886:	2778      	movs	r7, #120	@ 0x78
 8008888:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	6831      	ldr	r1, [r6, #0]
 8008890:	061f      	lsls	r7, r3, #24
 8008892:	f851 5b04 	ldr.w	r5, [r1], #4
 8008896:	d402      	bmi.n	800889e <_printf_i+0x186>
 8008898:	065f      	lsls	r7, r3, #25
 800889a:	bf48      	it	mi
 800889c:	b2ad      	uxthmi	r5, r5
 800889e:	6031      	str	r1, [r6, #0]
 80088a0:	07d9      	lsls	r1, r3, #31
 80088a2:	bf44      	itt	mi
 80088a4:	f043 0320 	orrmi.w	r3, r3, #32
 80088a8:	6023      	strmi	r3, [r4, #0]
 80088aa:	b11d      	cbz	r5, 80088b4 <_printf_i+0x19c>
 80088ac:	2310      	movs	r3, #16
 80088ae:	e7ad      	b.n	800880c <_printf_i+0xf4>
 80088b0:	4826      	ldr	r0, [pc, #152]	@ (800894c <_printf_i+0x234>)
 80088b2:	e7e9      	b.n	8008888 <_printf_i+0x170>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	f023 0320 	bic.w	r3, r3, #32
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	e7f6      	b.n	80088ac <_printf_i+0x194>
 80088be:	4616      	mov	r6, r2
 80088c0:	e7bd      	b.n	800883e <_printf_i+0x126>
 80088c2:	6833      	ldr	r3, [r6, #0]
 80088c4:	6825      	ldr	r5, [r4, #0]
 80088c6:	6961      	ldr	r1, [r4, #20]
 80088c8:	1d18      	adds	r0, r3, #4
 80088ca:	6030      	str	r0, [r6, #0]
 80088cc:	062e      	lsls	r6, r5, #24
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	d501      	bpl.n	80088d6 <_printf_i+0x1be>
 80088d2:	6019      	str	r1, [r3, #0]
 80088d4:	e002      	b.n	80088dc <_printf_i+0x1c4>
 80088d6:	0668      	lsls	r0, r5, #25
 80088d8:	d5fb      	bpl.n	80088d2 <_printf_i+0x1ba>
 80088da:	8019      	strh	r1, [r3, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	4616      	mov	r6, r2
 80088e2:	e7bc      	b.n	800885e <_printf_i+0x146>
 80088e4:	6833      	ldr	r3, [r6, #0]
 80088e6:	1d1a      	adds	r2, r3, #4
 80088e8:	6032      	str	r2, [r6, #0]
 80088ea:	681e      	ldr	r6, [r3, #0]
 80088ec:	6862      	ldr	r2, [r4, #4]
 80088ee:	2100      	movs	r1, #0
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7f7 fc75 	bl	80001e0 <memchr>
 80088f6:	b108      	cbz	r0, 80088fc <_printf_i+0x1e4>
 80088f8:	1b80      	subs	r0, r0, r6
 80088fa:	6060      	str	r0, [r4, #4]
 80088fc:	6863      	ldr	r3, [r4, #4]
 80088fe:	6123      	str	r3, [r4, #16]
 8008900:	2300      	movs	r3, #0
 8008902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008906:	e7aa      	b.n	800885e <_printf_i+0x146>
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	4632      	mov	r2, r6
 800890c:	4649      	mov	r1, r9
 800890e:	4640      	mov	r0, r8
 8008910:	47d0      	blx	sl
 8008912:	3001      	adds	r0, #1
 8008914:	d0ad      	beq.n	8008872 <_printf_i+0x15a>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	079b      	lsls	r3, r3, #30
 800891a:	d413      	bmi.n	8008944 <_printf_i+0x22c>
 800891c:	68e0      	ldr	r0, [r4, #12]
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	4298      	cmp	r0, r3
 8008922:	bfb8      	it	lt
 8008924:	4618      	movlt	r0, r3
 8008926:	e7a6      	b.n	8008876 <_printf_i+0x15e>
 8008928:	2301      	movs	r3, #1
 800892a:	4632      	mov	r2, r6
 800892c:	4649      	mov	r1, r9
 800892e:	4640      	mov	r0, r8
 8008930:	47d0      	blx	sl
 8008932:	3001      	adds	r0, #1
 8008934:	d09d      	beq.n	8008872 <_printf_i+0x15a>
 8008936:	3501      	adds	r5, #1
 8008938:	68e3      	ldr	r3, [r4, #12]
 800893a:	9903      	ldr	r1, [sp, #12]
 800893c:	1a5b      	subs	r3, r3, r1
 800893e:	42ab      	cmp	r3, r5
 8008940:	dcf2      	bgt.n	8008928 <_printf_i+0x210>
 8008942:	e7eb      	b.n	800891c <_printf_i+0x204>
 8008944:	2500      	movs	r5, #0
 8008946:	f104 0619 	add.w	r6, r4, #25
 800894a:	e7f5      	b.n	8008938 <_printf_i+0x220>
 800894c:	0800ba00 	.word	0x0800ba00
 8008950:	0800ba11 	.word	0x0800ba11

08008954 <std>:
 8008954:	2300      	movs	r3, #0
 8008956:	b510      	push	{r4, lr}
 8008958:	4604      	mov	r4, r0
 800895a:	e9c0 3300 	strd	r3, r3, [r0]
 800895e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008962:	6083      	str	r3, [r0, #8]
 8008964:	8181      	strh	r1, [r0, #12]
 8008966:	6643      	str	r3, [r0, #100]	@ 0x64
 8008968:	81c2      	strh	r2, [r0, #14]
 800896a:	6183      	str	r3, [r0, #24]
 800896c:	4619      	mov	r1, r3
 800896e:	2208      	movs	r2, #8
 8008970:	305c      	adds	r0, #92	@ 0x5c
 8008972:	f000 f92a 	bl	8008bca <memset>
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <std+0x58>)
 8008978:	6263      	str	r3, [r4, #36]	@ 0x24
 800897a:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <std+0x5c>)
 800897c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800897e:	4b0d      	ldr	r3, [pc, #52]	@ (80089b4 <std+0x60>)
 8008980:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008982:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <std+0x64>)
 8008984:	6323      	str	r3, [r4, #48]	@ 0x30
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <std+0x68>)
 8008988:	6224      	str	r4, [r4, #32]
 800898a:	429c      	cmp	r4, r3
 800898c:	d006      	beq.n	800899c <std+0x48>
 800898e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008992:	4294      	cmp	r4, r2
 8008994:	d002      	beq.n	800899c <std+0x48>
 8008996:	33d0      	adds	r3, #208	@ 0xd0
 8008998:	429c      	cmp	r4, r3
 800899a:	d105      	bne.n	80089a8 <std+0x54>
 800899c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a4:	f000 b9fc 	b.w	8008da0 <__retarget_lock_init_recursive>
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	bf00      	nop
 80089ac:	08008b45 	.word	0x08008b45
 80089b0:	08008b67 	.word	0x08008b67
 80089b4:	08008b9f 	.word	0x08008b9f
 80089b8:	08008bc3 	.word	0x08008bc3
 80089bc:	200006f8 	.word	0x200006f8

080089c0 <stdio_exit_handler>:
 80089c0:	4a02      	ldr	r2, [pc, #8]	@ (80089cc <stdio_exit_handler+0xc>)
 80089c2:	4903      	ldr	r1, [pc, #12]	@ (80089d0 <stdio_exit_handler+0x10>)
 80089c4:	4803      	ldr	r0, [pc, #12]	@ (80089d4 <stdio_exit_handler+0x14>)
 80089c6:	f000 b869 	b.w	8008a9c <_fwalk_sglue>
 80089ca:	bf00      	nop
 80089cc:	2000005c 	.word	0x2000005c
 80089d0:	0800b085 	.word	0x0800b085
 80089d4:	200001d8 	.word	0x200001d8

080089d8 <cleanup_stdio>:
 80089d8:	6841      	ldr	r1, [r0, #4]
 80089da:	4b0c      	ldr	r3, [pc, #48]	@ (8008a0c <cleanup_stdio+0x34>)
 80089dc:	4299      	cmp	r1, r3
 80089de:	b510      	push	{r4, lr}
 80089e0:	4604      	mov	r4, r0
 80089e2:	d001      	beq.n	80089e8 <cleanup_stdio+0x10>
 80089e4:	f002 fb4e 	bl	800b084 <_fflush_r>
 80089e8:	68a1      	ldr	r1, [r4, #8]
 80089ea:	4b09      	ldr	r3, [pc, #36]	@ (8008a10 <cleanup_stdio+0x38>)
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d002      	beq.n	80089f6 <cleanup_stdio+0x1e>
 80089f0:	4620      	mov	r0, r4
 80089f2:	f002 fb47 	bl	800b084 <_fflush_r>
 80089f6:	68e1      	ldr	r1, [r4, #12]
 80089f8:	4b06      	ldr	r3, [pc, #24]	@ (8008a14 <cleanup_stdio+0x3c>)
 80089fa:	4299      	cmp	r1, r3
 80089fc:	d004      	beq.n	8008a08 <cleanup_stdio+0x30>
 80089fe:	4620      	mov	r0, r4
 8008a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a04:	f002 bb3e 	b.w	800b084 <_fflush_r>
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200006f8 	.word	0x200006f8
 8008a10:	20000760 	.word	0x20000760
 8008a14:	200007c8 	.word	0x200007c8

08008a18 <global_stdio_init.part.0>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a48 <global_stdio_init.part.0+0x30>)
 8008a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8008a4c <global_stdio_init.part.0+0x34>)
 8008a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a50 <global_stdio_init.part.0+0x38>)
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	4620      	mov	r0, r4
 8008a24:	2200      	movs	r2, #0
 8008a26:	2104      	movs	r1, #4
 8008a28:	f7ff ff94 	bl	8008954 <std>
 8008a2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a30:	2201      	movs	r2, #1
 8008a32:	2109      	movs	r1, #9
 8008a34:	f7ff ff8e 	bl	8008954 <std>
 8008a38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a42:	2112      	movs	r1, #18
 8008a44:	f7ff bf86 	b.w	8008954 <std>
 8008a48:	20000830 	.word	0x20000830
 8008a4c:	200006f8 	.word	0x200006f8
 8008a50:	080089c1 	.word	0x080089c1

08008a54 <__sfp_lock_acquire>:
 8008a54:	4801      	ldr	r0, [pc, #4]	@ (8008a5c <__sfp_lock_acquire+0x8>)
 8008a56:	f000 b9a4 	b.w	8008da2 <__retarget_lock_acquire_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20000839 	.word	0x20000839

08008a60 <__sfp_lock_release>:
 8008a60:	4801      	ldr	r0, [pc, #4]	@ (8008a68 <__sfp_lock_release+0x8>)
 8008a62:	f000 b99f 	b.w	8008da4 <__retarget_lock_release_recursive>
 8008a66:	bf00      	nop
 8008a68:	20000839 	.word	0x20000839

08008a6c <__sinit>:
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	4604      	mov	r4, r0
 8008a70:	f7ff fff0 	bl	8008a54 <__sfp_lock_acquire>
 8008a74:	6a23      	ldr	r3, [r4, #32]
 8008a76:	b11b      	cbz	r3, 8008a80 <__sinit+0x14>
 8008a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a7c:	f7ff bff0 	b.w	8008a60 <__sfp_lock_release>
 8008a80:	4b04      	ldr	r3, [pc, #16]	@ (8008a94 <__sinit+0x28>)
 8008a82:	6223      	str	r3, [r4, #32]
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <__sinit+0x2c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1f5      	bne.n	8008a78 <__sinit+0xc>
 8008a8c:	f7ff ffc4 	bl	8008a18 <global_stdio_init.part.0>
 8008a90:	e7f2      	b.n	8008a78 <__sinit+0xc>
 8008a92:	bf00      	nop
 8008a94:	080089d9 	.word	0x080089d9
 8008a98:	20000830 	.word	0x20000830

08008a9c <_fwalk_sglue>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	4688      	mov	r8, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aac:	f1b9 0901 	subs.w	r9, r9, #1
 8008ab0:	d505      	bpl.n	8008abe <_fwalk_sglue+0x22>
 8008ab2:	6824      	ldr	r4, [r4, #0]
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	d1f7      	bne.n	8008aa8 <_fwalk_sglue+0xc>
 8008ab8:	4630      	mov	r0, r6
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d907      	bls.n	8008ad4 <_fwalk_sglue+0x38>
 8008ac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	d003      	beq.n	8008ad4 <_fwalk_sglue+0x38>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c0      	blx	r8
 8008ad2:	4306      	orrs	r6, r0
 8008ad4:	3568      	adds	r5, #104	@ 0x68
 8008ad6:	e7e9      	b.n	8008aac <_fwalk_sglue+0x10>

08008ad8 <sniprintf>:
 8008ad8:	b40c      	push	{r2, r3}
 8008ada:	b530      	push	{r4, r5, lr}
 8008adc:	4b18      	ldr	r3, [pc, #96]	@ (8008b40 <sniprintf+0x68>)
 8008ade:	1e0c      	subs	r4, r1, #0
 8008ae0:	681d      	ldr	r5, [r3, #0]
 8008ae2:	b09d      	sub	sp, #116	@ 0x74
 8008ae4:	da08      	bge.n	8008af8 <sniprintf+0x20>
 8008ae6:	238b      	movs	r3, #139	@ 0x8b
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	b01d      	add	sp, #116	@ 0x74
 8008af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af4:	b002      	add	sp, #8
 8008af6:	4770      	bx	lr
 8008af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008b06:	bf14      	ite	ne
 8008b08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b0c:	4623      	moveq	r3, r4
 8008b0e:	9304      	str	r3, [sp, #16]
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b16:	9002      	str	r0, [sp, #8]
 8008b18:	9006      	str	r0, [sp, #24]
 8008b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b20:	ab21      	add	r3, sp, #132	@ 0x84
 8008b22:	a902      	add	r1, sp, #8
 8008b24:	4628      	mov	r0, r5
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	f002 f92c 	bl	800ad84 <_svfiprintf_r>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	bfbc      	itt	lt
 8008b30:	238b      	movlt	r3, #139	@ 0x8b
 8008b32:	602b      	strlt	r3, [r5, #0]
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	d0da      	beq.n	8008aee <sniprintf+0x16>
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e7d6      	b.n	8008aee <sniprintf+0x16>
 8008b40:	200001d4 	.word	0x200001d4

08008b44 <__sread>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4c:	f000 f8da 	bl	8008d04 <_read_r>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	bfab      	itete	ge
 8008b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b56:	89a3      	ldrhlt	r3, [r4, #12]
 8008b58:	181b      	addge	r3, r3, r0
 8008b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b5e:	bfac      	ite	ge
 8008b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b62:	81a3      	strhlt	r3, [r4, #12]
 8008b64:	bd10      	pop	{r4, pc}

08008b66 <__swrite>:
 8008b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6a:	461f      	mov	r7, r3
 8008b6c:	898b      	ldrh	r3, [r1, #12]
 8008b6e:	05db      	lsls	r3, r3, #23
 8008b70:	4605      	mov	r5, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	4616      	mov	r6, r2
 8008b76:	d505      	bpl.n	8008b84 <__swrite+0x1e>
 8008b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f000 f8ae 	bl	8008ce0 <_lseek_r>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	4632      	mov	r2, r6
 8008b92:	463b      	mov	r3, r7
 8008b94:	4628      	mov	r0, r5
 8008b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9a:	f000 b8c5 	b.w	8008d28 <_write_r>

08008b9e <__sseek>:
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba6:	f000 f89b 	bl	8008ce0 <_lseek_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	bf15      	itete	ne
 8008bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bba:	81a3      	strheq	r3, [r4, #12]
 8008bbc:	bf18      	it	ne
 8008bbe:	81a3      	strhne	r3, [r4, #12]
 8008bc0:	bd10      	pop	{r4, pc}

08008bc2 <__sclose>:
 8008bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc6:	f000 b87b 	b.w	8008cc0 <_close_r>

08008bca <memset>:
 8008bca:	4402      	add	r2, r0
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d100      	bne.n	8008bd4 <memset+0xa>
 8008bd2:	4770      	bx	lr
 8008bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd8:	e7f9      	b.n	8008bce <memset+0x4>

08008bda <strncmp>:
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	b16a      	cbz	r2, 8008bfa <strncmp+0x20>
 8008bde:	3901      	subs	r1, #1
 8008be0:	1884      	adds	r4, r0, r2
 8008be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d103      	bne.n	8008bf6 <strncmp+0x1c>
 8008bee:	42a0      	cmp	r0, r4
 8008bf0:	d001      	beq.n	8008bf6 <strncmp+0x1c>
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d1f5      	bne.n	8008be2 <strncmp+0x8>
 8008bf6:	1ad0      	subs	r0, r2, r3
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	e7fc      	b.n	8008bf8 <strncmp+0x1e>
	...

08008c00 <strtok>:
 8008c00:	4b16      	ldr	r3, [pc, #88]	@ (8008c5c <strtok+0x5c>)
 8008c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	681f      	ldr	r7, [r3, #0]
 8008c08:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	460e      	mov	r6, r1
 8008c0e:	b9ec      	cbnz	r4, 8008c4c <strtok+0x4c>
 8008c10:	2050      	movs	r0, #80	@ 0x50
 8008c12:	f001 fadd 	bl	800a1d0 <malloc>
 8008c16:	4602      	mov	r2, r0
 8008c18:	6478      	str	r0, [r7, #68]	@ 0x44
 8008c1a:	b920      	cbnz	r0, 8008c26 <strtok+0x26>
 8008c1c:	4b10      	ldr	r3, [pc, #64]	@ (8008c60 <strtok+0x60>)
 8008c1e:	4811      	ldr	r0, [pc, #68]	@ (8008c64 <strtok+0x64>)
 8008c20:	215b      	movs	r1, #91	@ 0x5b
 8008c22:	f000 f8d9 	bl	8008dd8 <__assert_func>
 8008c26:	e9c0 4400 	strd	r4, r4, [r0]
 8008c2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008c2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008c32:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008c36:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008c3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008c3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008c42:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008c46:	6184      	str	r4, [r0, #24]
 8008c48:	7704      	strb	r4, [r0, #28]
 8008c4a:	6244      	str	r4, [r0, #36]	@ 0x24
 8008c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	2301      	movs	r3, #1
 8008c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c58:	f000 b806 	b.w	8008c68 <__strtok_r>
 8008c5c:	200001d4 	.word	0x200001d4
 8008c60:	0800ba22 	.word	0x0800ba22
 8008c64:	0800ba39 	.word	0x0800ba39

08008c68 <__strtok_r>:
 8008c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b908      	cbnz	r0, 8008c72 <__strtok_r+0xa>
 8008c6e:	6814      	ldr	r4, [r2, #0]
 8008c70:	b144      	cbz	r4, 8008c84 <__strtok_r+0x1c>
 8008c72:	4620      	mov	r0, r4
 8008c74:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008c78:	460f      	mov	r7, r1
 8008c7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008c7e:	b91e      	cbnz	r6, 8008c88 <__strtok_r+0x20>
 8008c80:	b965      	cbnz	r5, 8008c9c <__strtok_r+0x34>
 8008c82:	6015      	str	r5, [r2, #0]
 8008c84:	2000      	movs	r0, #0
 8008c86:	e005      	b.n	8008c94 <__strtok_r+0x2c>
 8008c88:	42b5      	cmp	r5, r6
 8008c8a:	d1f6      	bne.n	8008c7a <__strtok_r+0x12>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1f0      	bne.n	8008c72 <__strtok_r+0xa>
 8008c90:	6014      	str	r4, [r2, #0]
 8008c92:	7003      	strb	r3, [r0, #0]
 8008c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c96:	461c      	mov	r4, r3
 8008c98:	e00c      	b.n	8008cb4 <__strtok_r+0x4c>
 8008c9a:	b91d      	cbnz	r5, 8008ca4 <__strtok_r+0x3c>
 8008c9c:	4627      	mov	r7, r4
 8008c9e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	d1f6      	bne.n	8008c9a <__strtok_r+0x32>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f2      	beq.n	8008c96 <__strtok_r+0x2e>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	703b      	strb	r3, [r7, #0]
 8008cb4:	6014      	str	r4, [r2, #0]
 8008cb6:	e7ed      	b.n	8008c94 <__strtok_r+0x2c>

08008cb8 <_localeconv_r>:
 8008cb8:	4800      	ldr	r0, [pc, #0]	@ (8008cbc <_localeconv_r+0x4>)
 8008cba:	4770      	bx	lr
 8008cbc:	20000158 	.word	0x20000158

08008cc0 <_close_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d06      	ldr	r5, [pc, #24]	@ (8008cdc <_close_r+0x1c>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f7fa f8be 	bl	8002e4c <_close>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_close_r+0x1a>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_close_r+0x1a>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	20000834 	.word	0x20000834

08008ce0 <_lseek_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	@ (8008d00 <_lseek_r+0x20>)
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	602a      	str	r2, [r5, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f7fa f8d3 	bl	8002e9a <_lseek>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_lseek_r+0x1e>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_lseek_r+0x1e>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	20000834 	.word	0x20000834

08008d04 <_read_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d07      	ldr	r5, [pc, #28]	@ (8008d24 <_read_r+0x20>)
 8008d08:	4604      	mov	r4, r0
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	602a      	str	r2, [r5, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f7fa f861 	bl	8002dda <_read>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_read_r+0x1e>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_read_r+0x1e>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	20000834 	.word	0x20000834

08008d28 <_write_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d07      	ldr	r5, [pc, #28]	@ (8008d48 <_write_r+0x20>)
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	4608      	mov	r0, r1
 8008d30:	4611      	mov	r1, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	602a      	str	r2, [r5, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f7fa f86c 	bl	8002e14 <_write>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_write_r+0x1e>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_write_r+0x1e>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20000834 	.word	0x20000834

08008d4c <__errno>:
 8008d4c:	4b01      	ldr	r3, [pc, #4]	@ (8008d54 <__errno+0x8>)
 8008d4e:	6818      	ldr	r0, [r3, #0]
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	200001d4 	.word	0x200001d4

08008d58 <__libc_init_array>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8008d90 <__libc_init_array+0x38>)
 8008d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8008d94 <__libc_init_array+0x3c>)
 8008d5e:	1b64      	subs	r4, r4, r5
 8008d60:	10a4      	asrs	r4, r4, #2
 8008d62:	2600      	movs	r6, #0
 8008d64:	42a6      	cmp	r6, r4
 8008d66:	d109      	bne.n	8008d7c <__libc_init_array+0x24>
 8008d68:	4d0b      	ldr	r5, [pc, #44]	@ (8008d98 <__libc_init_array+0x40>)
 8008d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8008d9c <__libc_init_array+0x44>)
 8008d6c:	f002 fe18 	bl	800b9a0 <_init>
 8008d70:	1b64      	subs	r4, r4, r5
 8008d72:	10a4      	asrs	r4, r4, #2
 8008d74:	2600      	movs	r6, #0
 8008d76:	42a6      	cmp	r6, r4
 8008d78:	d105      	bne.n	8008d86 <__libc_init_array+0x2e>
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
 8008d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d80:	4798      	blx	r3
 8008d82:	3601      	adds	r6, #1
 8008d84:	e7ee      	b.n	8008d64 <__libc_init_array+0xc>
 8008d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8a:	4798      	blx	r3
 8008d8c:	3601      	adds	r6, #1
 8008d8e:	e7f2      	b.n	8008d76 <__libc_init_array+0x1e>
 8008d90:	0800be88 	.word	0x0800be88
 8008d94:	0800be88 	.word	0x0800be88
 8008d98:	0800be88 	.word	0x0800be88
 8008d9c:	0800be8c 	.word	0x0800be8c

08008da0 <__retarget_lock_init_recursive>:
 8008da0:	4770      	bx	lr

08008da2 <__retarget_lock_acquire_recursive>:
 8008da2:	4770      	bx	lr

08008da4 <__retarget_lock_release_recursive>:
 8008da4:	4770      	bx	lr

08008da6 <memcpy>:
 8008da6:	440a      	add	r2, r1
 8008da8:	4291      	cmp	r1, r2
 8008daa:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dae:	d100      	bne.n	8008db2 <memcpy+0xc>
 8008db0:	4770      	bx	lr
 8008db2:	b510      	push	{r4, lr}
 8008db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dbc:	4291      	cmp	r1, r2
 8008dbe:	d1f9      	bne.n	8008db4 <memcpy+0xe>
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	0000      	movs	r0, r0
 8008dc4:	0000      	movs	r0, r0
	...

08008dc8 <nan>:
 8008dc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008dd0 <nan+0x8>
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	7ff80000 	.word	0x7ff80000

08008dd8 <__assert_func>:
 8008dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dda:	4614      	mov	r4, r2
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4b09      	ldr	r3, [pc, #36]	@ (8008e04 <__assert_func+0x2c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4605      	mov	r5, r0
 8008de4:	68d8      	ldr	r0, [r3, #12]
 8008de6:	b14c      	cbz	r4, 8008dfc <__assert_func+0x24>
 8008de8:	4b07      	ldr	r3, [pc, #28]	@ (8008e08 <__assert_func+0x30>)
 8008dea:	9100      	str	r1, [sp, #0]
 8008dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df0:	4906      	ldr	r1, [pc, #24]	@ (8008e0c <__assert_func+0x34>)
 8008df2:	462b      	mov	r3, r5
 8008df4:	f002 f96e 	bl	800b0d4 <fiprintf>
 8008df8:	f002 f9a8 	bl	800b14c <abort>
 8008dfc:	4b04      	ldr	r3, [pc, #16]	@ (8008e10 <__assert_func+0x38>)
 8008dfe:	461c      	mov	r4, r3
 8008e00:	e7f3      	b.n	8008dea <__assert_func+0x12>
 8008e02:	bf00      	nop
 8008e04:	200001d4 	.word	0x200001d4
 8008e08:	0800ba9b 	.word	0x0800ba9b
 8008e0c:	0800baa8 	.word	0x0800baa8
 8008e10:	0800bad6 	.word	0x0800bad6

08008e14 <quorem>:
 8008e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	6903      	ldr	r3, [r0, #16]
 8008e1a:	690c      	ldr	r4, [r1, #16]
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	4607      	mov	r7, r0
 8008e20:	db7e      	blt.n	8008f20 <quorem+0x10c>
 8008e22:	3c01      	subs	r4, #1
 8008e24:	f101 0814 	add.w	r8, r1, #20
 8008e28:	00a3      	lsls	r3, r4, #2
 8008e2a:	f100 0514 	add.w	r5, r0, #20
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	429a      	cmp	r2, r3
 8008e42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e46:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e4a:	d32e      	bcc.n	8008eaa <quorem+0x96>
 8008e4c:	f04f 0a00 	mov.w	sl, #0
 8008e50:	46c4      	mov	ip, r8
 8008e52:	46ae      	mov	lr, r5
 8008e54:	46d3      	mov	fp, sl
 8008e56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e5a:	b298      	uxth	r0, r3
 8008e5c:	fb06 a000 	mla	r0, r6, r0, sl
 8008e60:	0c02      	lsrs	r2, r0, #16
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	fb06 2303 	mla	r3, r6, r3, r2
 8008e68:	f8de 2000 	ldr.w	r2, [lr]
 8008e6c:	b280      	uxth	r0, r0
 8008e6e:	b292      	uxth	r2, r2
 8008e70:	1a12      	subs	r2, r2, r0
 8008e72:	445a      	add	r2, fp
 8008e74:	f8de 0000 	ldr.w	r0, [lr]
 8008e78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e86:	b292      	uxth	r2, r2
 8008e88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e8c:	45e1      	cmp	r9, ip
 8008e8e:	f84e 2b04 	str.w	r2, [lr], #4
 8008e92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e96:	d2de      	bcs.n	8008e56 <quorem+0x42>
 8008e98:	9b00      	ldr	r3, [sp, #0]
 8008e9a:	58eb      	ldr	r3, [r5, r3]
 8008e9c:	b92b      	cbnz	r3, 8008eaa <quorem+0x96>
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	3b04      	subs	r3, #4
 8008ea2:	429d      	cmp	r5, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	d32f      	bcc.n	8008f08 <quorem+0xf4>
 8008ea8:	613c      	str	r4, [r7, #16]
 8008eaa:	4638      	mov	r0, r7
 8008eac:	f001 fd14 	bl	800a8d8 <__mcmp>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	db25      	blt.n	8008f00 <quorem+0xec>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ebc:	f8d1 c000 	ldr.w	ip, [r1]
 8008ec0:	fa1f fe82 	uxth.w	lr, r2
 8008ec4:	fa1f f38c 	uxth.w	r3, ip
 8008ec8:	eba3 030e 	sub.w	r3, r3, lr
 8008ecc:	4403      	add	r3, r0
 8008ece:	0c12      	lsrs	r2, r2, #16
 8008ed0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ed4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ede:	45c1      	cmp	r9, r8
 8008ee0:	f841 3b04 	str.w	r3, [r1], #4
 8008ee4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ee8:	d2e6      	bcs.n	8008eb8 <quorem+0xa4>
 8008eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ef2:	b922      	cbnz	r2, 8008efe <quorem+0xea>
 8008ef4:	3b04      	subs	r3, #4
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	d30b      	bcc.n	8008f14 <quorem+0x100>
 8008efc:	613c      	str	r4, [r7, #16]
 8008efe:	3601      	adds	r6, #1
 8008f00:	4630      	mov	r0, r6
 8008f02:	b003      	add	sp, #12
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	3b04      	subs	r3, #4
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	d1cb      	bne.n	8008ea8 <quorem+0x94>
 8008f10:	3c01      	subs	r4, #1
 8008f12:	e7c6      	b.n	8008ea2 <quorem+0x8e>
 8008f14:	6812      	ldr	r2, [r2, #0]
 8008f16:	3b04      	subs	r3, #4
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	d1ef      	bne.n	8008efc <quorem+0xe8>
 8008f1c:	3c01      	subs	r4, #1
 8008f1e:	e7ea      	b.n	8008ef6 <quorem+0xe2>
 8008f20:	2000      	movs	r0, #0
 8008f22:	e7ee      	b.n	8008f02 <quorem+0xee>
 8008f24:	0000      	movs	r0, r0
	...

08008f28 <_dtoa_r>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	69c7      	ldr	r7, [r0, #28]
 8008f2e:	b097      	sub	sp, #92	@ 0x5c
 8008f30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f34:	ec55 4b10 	vmov	r4, r5, d0
 8008f38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008f3a:	9107      	str	r1, [sp, #28]
 8008f3c:	4681      	mov	r9, r0
 8008f3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f40:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f42:	b97f      	cbnz	r7, 8008f64 <_dtoa_r+0x3c>
 8008f44:	2010      	movs	r0, #16
 8008f46:	f001 f943 	bl	800a1d0 <malloc>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008f50:	b920      	cbnz	r0, 8008f5c <_dtoa_r+0x34>
 8008f52:	4ba9      	ldr	r3, [pc, #676]	@ (80091f8 <_dtoa_r+0x2d0>)
 8008f54:	21ef      	movs	r1, #239	@ 0xef
 8008f56:	48a9      	ldr	r0, [pc, #676]	@ (80091fc <_dtoa_r+0x2d4>)
 8008f58:	f7ff ff3e 	bl	8008dd8 <__assert_func>
 8008f5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f60:	6007      	str	r7, [r0, #0]
 8008f62:	60c7      	str	r7, [r0, #12]
 8008f64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f68:	6819      	ldr	r1, [r3, #0]
 8008f6a:	b159      	cbz	r1, 8008f84 <_dtoa_r+0x5c>
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	604a      	str	r2, [r1, #4]
 8008f70:	2301      	movs	r3, #1
 8008f72:	4093      	lsls	r3, r2
 8008f74:	608b      	str	r3, [r1, #8]
 8008f76:	4648      	mov	r0, r9
 8008f78:	f001 fa32 	bl	800a3e0 <_Bfree>
 8008f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	1e2b      	subs	r3, r5, #0
 8008f86:	bfb9      	ittee	lt
 8008f88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f8c:	9305      	strlt	r3, [sp, #20]
 8008f8e:	2300      	movge	r3, #0
 8008f90:	6033      	strge	r3, [r6, #0]
 8008f92:	9f05      	ldr	r7, [sp, #20]
 8008f94:	4b9a      	ldr	r3, [pc, #616]	@ (8009200 <_dtoa_r+0x2d8>)
 8008f96:	bfbc      	itt	lt
 8008f98:	2201      	movlt	r2, #1
 8008f9a:	6032      	strlt	r2, [r6, #0]
 8008f9c:	43bb      	bics	r3, r7
 8008f9e:	d112      	bne.n	8008fc6 <_dtoa_r+0x9e>
 8008fa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fac:	4323      	orrs	r3, r4
 8008fae:	f000 855a 	beq.w	8009a66 <_dtoa_r+0xb3e>
 8008fb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fb4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009214 <_dtoa_r+0x2ec>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 855c 	beq.w	8009a76 <_dtoa_r+0xb4e>
 8008fbe:	f10a 0303 	add.w	r3, sl, #3
 8008fc2:	f000 bd56 	b.w	8009a72 <_dtoa_r+0xb4a>
 8008fc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	ec51 0b17 	vmov	r0, r1, d7
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008fd6:	f7f7 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fda:	4680      	mov	r8, r0
 8008fdc:	b158      	cbz	r0, 8008ff6 <_dtoa_r+0xce>
 8008fde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fe6:	b113      	cbz	r3, 8008fee <_dtoa_r+0xc6>
 8008fe8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008fea:	4b86      	ldr	r3, [pc, #536]	@ (8009204 <_dtoa_r+0x2dc>)
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009218 <_dtoa_r+0x2f0>
 8008ff2:	f000 bd40 	b.w	8009a76 <_dtoa_r+0xb4e>
 8008ff6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008ffa:	aa14      	add	r2, sp, #80	@ 0x50
 8008ffc:	a915      	add	r1, sp, #84	@ 0x54
 8008ffe:	4648      	mov	r0, r9
 8009000:	f001 fd8a 	bl	800ab18 <__d2b>
 8009004:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009008:	9002      	str	r0, [sp, #8]
 800900a:	2e00      	cmp	r6, #0
 800900c:	d078      	beq.n	8009100 <_dtoa_r+0x1d8>
 800900e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009010:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800901c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009020:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009024:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009028:	4619      	mov	r1, r3
 800902a:	2200      	movs	r2, #0
 800902c:	4b76      	ldr	r3, [pc, #472]	@ (8009208 <_dtoa_r+0x2e0>)
 800902e:	f7f7 f933 	bl	8000298 <__aeabi_dsub>
 8009032:	a36b      	add	r3, pc, #428	@ (adr r3, 80091e0 <_dtoa_r+0x2b8>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7f7 fae6 	bl	8000608 <__aeabi_dmul>
 800903c:	a36a      	add	r3, pc, #424	@ (adr r3, 80091e8 <_dtoa_r+0x2c0>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 f92b 	bl	800029c <__adddf3>
 8009046:	4604      	mov	r4, r0
 8009048:	4630      	mov	r0, r6
 800904a:	460d      	mov	r5, r1
 800904c:	f7f7 fa72 	bl	8000534 <__aeabi_i2d>
 8009050:	a367      	add	r3, pc, #412	@ (adr r3, 80091f0 <_dtoa_r+0x2c8>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 fad7 	bl	8000608 <__aeabi_dmul>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4620      	mov	r0, r4
 8009060:	4629      	mov	r1, r5
 8009062:	f7f7 f91b 	bl	800029c <__adddf3>
 8009066:	4604      	mov	r4, r0
 8009068:	460d      	mov	r5, r1
 800906a:	f7f7 fd7d 	bl	8000b68 <__aeabi_d2iz>
 800906e:	2200      	movs	r2, #0
 8009070:	4607      	mov	r7, r0
 8009072:	2300      	movs	r3, #0
 8009074:	4620      	mov	r0, r4
 8009076:	4629      	mov	r1, r5
 8009078:	f7f7 fd38 	bl	8000aec <__aeabi_dcmplt>
 800907c:	b140      	cbz	r0, 8009090 <_dtoa_r+0x168>
 800907e:	4638      	mov	r0, r7
 8009080:	f7f7 fa58 	bl	8000534 <__aeabi_i2d>
 8009084:	4622      	mov	r2, r4
 8009086:	462b      	mov	r3, r5
 8009088:	f7f7 fd26 	bl	8000ad8 <__aeabi_dcmpeq>
 800908c:	b900      	cbnz	r0, 8009090 <_dtoa_r+0x168>
 800908e:	3f01      	subs	r7, #1
 8009090:	2f16      	cmp	r7, #22
 8009092:	d852      	bhi.n	800913a <_dtoa_r+0x212>
 8009094:	4b5d      	ldr	r3, [pc, #372]	@ (800920c <_dtoa_r+0x2e4>)
 8009096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090a2:	f7f7 fd23 	bl	8000aec <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d049      	beq.n	800913e <_dtoa_r+0x216>
 80090aa:	3f01      	subs	r7, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80090b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090b2:	1b9b      	subs	r3, r3, r6
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	bf45      	ittet	mi
 80090b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80090bc:	9300      	strmi	r3, [sp, #0]
 80090be:	2300      	movpl	r3, #0
 80090c0:	2300      	movmi	r3, #0
 80090c2:	9206      	str	r2, [sp, #24]
 80090c4:	bf54      	ite	pl
 80090c6:	9300      	strpl	r3, [sp, #0]
 80090c8:	9306      	strmi	r3, [sp, #24]
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	db39      	blt.n	8009142 <_dtoa_r+0x21a>
 80090ce:	9b06      	ldr	r3, [sp, #24]
 80090d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80090d2:	443b      	add	r3, r7
 80090d4:	9306      	str	r3, [sp, #24]
 80090d6:	2300      	movs	r3, #0
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	9b07      	ldr	r3, [sp, #28]
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d863      	bhi.n	80091a8 <_dtoa_r+0x280>
 80090e0:	2b05      	cmp	r3, #5
 80090e2:	bfc4      	itt	gt
 80090e4:	3b04      	subgt	r3, #4
 80090e6:	9307      	strgt	r3, [sp, #28]
 80090e8:	9b07      	ldr	r3, [sp, #28]
 80090ea:	f1a3 0302 	sub.w	r3, r3, #2
 80090ee:	bfcc      	ite	gt
 80090f0:	2400      	movgt	r4, #0
 80090f2:	2401      	movle	r4, #1
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d863      	bhi.n	80091c0 <_dtoa_r+0x298>
 80090f8:	e8df f003 	tbb	[pc, r3]
 80090fc:	2b375452 	.word	0x2b375452
 8009100:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009104:	441e      	add	r6, r3
 8009106:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800910a:	2b20      	cmp	r3, #32
 800910c:	bfc1      	itttt	gt
 800910e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009112:	409f      	lslgt	r7, r3
 8009114:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009118:	fa24 f303 	lsrgt.w	r3, r4, r3
 800911c:	bfd6      	itet	le
 800911e:	f1c3 0320 	rsble	r3, r3, #32
 8009122:	ea47 0003 	orrgt.w	r0, r7, r3
 8009126:	fa04 f003 	lslle.w	r0, r4, r3
 800912a:	f7f7 f9f3 	bl	8000514 <__aeabi_ui2d>
 800912e:	2201      	movs	r2, #1
 8009130:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009134:	3e01      	subs	r6, #1
 8009136:	9212      	str	r2, [sp, #72]	@ 0x48
 8009138:	e776      	b.n	8009028 <_dtoa_r+0x100>
 800913a:	2301      	movs	r3, #1
 800913c:	e7b7      	b.n	80090ae <_dtoa_r+0x186>
 800913e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009140:	e7b6      	b.n	80090b0 <_dtoa_r+0x188>
 8009142:	9b00      	ldr	r3, [sp, #0]
 8009144:	1bdb      	subs	r3, r3, r7
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	427b      	negs	r3, r7
 800914a:	9308      	str	r3, [sp, #32]
 800914c:	2300      	movs	r3, #0
 800914e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009150:	e7c3      	b.n	80090da <_dtoa_r+0x1b2>
 8009152:	2301      	movs	r3, #1
 8009154:	9309      	str	r3, [sp, #36]	@ 0x24
 8009156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009158:	eb07 0b03 	add.w	fp, r7, r3
 800915c:	f10b 0301 	add.w	r3, fp, #1
 8009160:	2b01      	cmp	r3, #1
 8009162:	9303      	str	r3, [sp, #12]
 8009164:	bfb8      	it	lt
 8009166:	2301      	movlt	r3, #1
 8009168:	e006      	b.n	8009178 <_dtoa_r+0x250>
 800916a:	2301      	movs	r3, #1
 800916c:	9309      	str	r3, [sp, #36]	@ 0x24
 800916e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009170:	2b00      	cmp	r3, #0
 8009172:	dd28      	ble.n	80091c6 <_dtoa_r+0x29e>
 8009174:	469b      	mov	fp, r3
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800917c:	2100      	movs	r1, #0
 800917e:	2204      	movs	r2, #4
 8009180:	f102 0514 	add.w	r5, r2, #20
 8009184:	429d      	cmp	r5, r3
 8009186:	d926      	bls.n	80091d6 <_dtoa_r+0x2ae>
 8009188:	6041      	str	r1, [r0, #4]
 800918a:	4648      	mov	r0, r9
 800918c:	f001 f8e8 	bl	800a360 <_Balloc>
 8009190:	4682      	mov	sl, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d142      	bne.n	800921c <_dtoa_r+0x2f4>
 8009196:	4b1e      	ldr	r3, [pc, #120]	@ (8009210 <_dtoa_r+0x2e8>)
 8009198:	4602      	mov	r2, r0
 800919a:	f240 11af 	movw	r1, #431	@ 0x1af
 800919e:	e6da      	b.n	8008f56 <_dtoa_r+0x2e>
 80091a0:	2300      	movs	r3, #0
 80091a2:	e7e3      	b.n	800916c <_dtoa_r+0x244>
 80091a4:	2300      	movs	r3, #0
 80091a6:	e7d5      	b.n	8009154 <_dtoa_r+0x22c>
 80091a8:	2401      	movs	r4, #1
 80091aa:	2300      	movs	r3, #0
 80091ac:	9307      	str	r3, [sp, #28]
 80091ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80091b0:	f04f 3bff 	mov.w	fp, #4294967295
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80091ba:	2312      	movs	r3, #18
 80091bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80091be:	e7db      	b.n	8009178 <_dtoa_r+0x250>
 80091c0:	2301      	movs	r3, #1
 80091c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c4:	e7f4      	b.n	80091b0 <_dtoa_r+0x288>
 80091c6:	f04f 0b01 	mov.w	fp, #1
 80091ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80091ce:	465b      	mov	r3, fp
 80091d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80091d4:	e7d0      	b.n	8009178 <_dtoa_r+0x250>
 80091d6:	3101      	adds	r1, #1
 80091d8:	0052      	lsls	r2, r2, #1
 80091da:	e7d1      	b.n	8009180 <_dtoa_r+0x258>
 80091dc:	f3af 8000 	nop.w
 80091e0:	636f4361 	.word	0x636f4361
 80091e4:	3fd287a7 	.word	0x3fd287a7
 80091e8:	8b60c8b3 	.word	0x8b60c8b3
 80091ec:	3fc68a28 	.word	0x3fc68a28
 80091f0:	509f79fb 	.word	0x509f79fb
 80091f4:	3fd34413 	.word	0x3fd34413
 80091f8:	0800ba22 	.word	0x0800ba22
 80091fc:	0800bae4 	.word	0x0800bae4
 8009200:	7ff00000 	.word	0x7ff00000
 8009204:	0800b9ff 	.word	0x0800b9ff
 8009208:	3ff80000 	.word	0x3ff80000
 800920c:	0800bca0 	.word	0x0800bca0
 8009210:	0800bb3c 	.word	0x0800bb3c
 8009214:	0800bae0 	.word	0x0800bae0
 8009218:	0800b9fe 	.word	0x0800b9fe
 800921c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009220:	6018      	str	r0, [r3, #0]
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	2b0e      	cmp	r3, #14
 8009226:	f200 80a1 	bhi.w	800936c <_dtoa_r+0x444>
 800922a:	2c00      	cmp	r4, #0
 800922c:	f000 809e 	beq.w	800936c <_dtoa_r+0x444>
 8009230:	2f00      	cmp	r7, #0
 8009232:	dd33      	ble.n	800929c <_dtoa_r+0x374>
 8009234:	4b9c      	ldr	r3, [pc, #624]	@ (80094a8 <_dtoa_r+0x580>)
 8009236:	f007 020f 	and.w	r2, r7, #15
 800923a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923e:	ed93 7b00 	vldr	d7, [r3]
 8009242:	05f8      	lsls	r0, r7, #23
 8009244:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009248:	ea4f 1427 	mov.w	r4, r7, asr #4
 800924c:	d516      	bpl.n	800927c <_dtoa_r+0x354>
 800924e:	4b97      	ldr	r3, [pc, #604]	@ (80094ac <_dtoa_r+0x584>)
 8009250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009258:	f7f7 fb00 	bl	800085c <__aeabi_ddiv>
 800925c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009260:	f004 040f 	and.w	r4, r4, #15
 8009264:	2603      	movs	r6, #3
 8009266:	4d91      	ldr	r5, [pc, #580]	@ (80094ac <_dtoa_r+0x584>)
 8009268:	b954      	cbnz	r4, 8009280 <_dtoa_r+0x358>
 800926a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800926e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009272:	f7f7 faf3 	bl	800085c <__aeabi_ddiv>
 8009276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800927a:	e028      	b.n	80092ce <_dtoa_r+0x3a6>
 800927c:	2602      	movs	r6, #2
 800927e:	e7f2      	b.n	8009266 <_dtoa_r+0x33e>
 8009280:	07e1      	lsls	r1, r4, #31
 8009282:	d508      	bpl.n	8009296 <_dtoa_r+0x36e>
 8009284:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800928c:	f7f7 f9bc 	bl	8000608 <__aeabi_dmul>
 8009290:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009294:	3601      	adds	r6, #1
 8009296:	1064      	asrs	r4, r4, #1
 8009298:	3508      	adds	r5, #8
 800929a:	e7e5      	b.n	8009268 <_dtoa_r+0x340>
 800929c:	f000 80af 	beq.w	80093fe <_dtoa_r+0x4d6>
 80092a0:	427c      	negs	r4, r7
 80092a2:	4b81      	ldr	r3, [pc, #516]	@ (80094a8 <_dtoa_r+0x580>)
 80092a4:	4d81      	ldr	r5, [pc, #516]	@ (80094ac <_dtoa_r+0x584>)
 80092a6:	f004 020f 	and.w	r2, r4, #15
 80092aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092b6:	f7f7 f9a7 	bl	8000608 <__aeabi_dmul>
 80092ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092be:	1124      	asrs	r4, r4, #4
 80092c0:	2300      	movs	r3, #0
 80092c2:	2602      	movs	r6, #2
 80092c4:	2c00      	cmp	r4, #0
 80092c6:	f040 808f 	bne.w	80093e8 <_dtoa_r+0x4c0>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1d3      	bne.n	8009276 <_dtoa_r+0x34e>
 80092ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8094 	beq.w	8009402 <_dtoa_r+0x4da>
 80092da:	4b75      	ldr	r3, [pc, #468]	@ (80094b0 <_dtoa_r+0x588>)
 80092dc:	2200      	movs	r2, #0
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f7 fc03 	bl	8000aec <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f000 808b 	beq.w	8009402 <_dtoa_r+0x4da>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 8087 	beq.w	8009402 <_dtoa_r+0x4da>
 80092f4:	f1bb 0f00 	cmp.w	fp, #0
 80092f8:	dd34      	ble.n	8009364 <_dtoa_r+0x43c>
 80092fa:	4620      	mov	r0, r4
 80092fc:	4b6d      	ldr	r3, [pc, #436]	@ (80094b4 <_dtoa_r+0x58c>)
 80092fe:	2200      	movs	r2, #0
 8009300:	4629      	mov	r1, r5
 8009302:	f7f7 f981 	bl	8000608 <__aeabi_dmul>
 8009306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800930a:	f107 38ff 	add.w	r8, r7, #4294967295
 800930e:	3601      	adds	r6, #1
 8009310:	465c      	mov	r4, fp
 8009312:	4630      	mov	r0, r6
 8009314:	f7f7 f90e 	bl	8000534 <__aeabi_i2d>
 8009318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800931c:	f7f7 f974 	bl	8000608 <__aeabi_dmul>
 8009320:	4b65      	ldr	r3, [pc, #404]	@ (80094b8 <_dtoa_r+0x590>)
 8009322:	2200      	movs	r2, #0
 8009324:	f7f6 ffba 	bl	800029c <__adddf3>
 8009328:	4605      	mov	r5, r0
 800932a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800932e:	2c00      	cmp	r4, #0
 8009330:	d16a      	bne.n	8009408 <_dtoa_r+0x4e0>
 8009332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009336:	4b61      	ldr	r3, [pc, #388]	@ (80094bc <_dtoa_r+0x594>)
 8009338:	2200      	movs	r2, #0
 800933a:	f7f6 ffad 	bl	8000298 <__aeabi_dsub>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009346:	462a      	mov	r2, r5
 8009348:	4633      	mov	r3, r6
 800934a:	f7f7 fbed 	bl	8000b28 <__aeabi_dcmpgt>
 800934e:	2800      	cmp	r0, #0
 8009350:	f040 8298 	bne.w	8009884 <_dtoa_r+0x95c>
 8009354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009358:	462a      	mov	r2, r5
 800935a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800935e:	f7f7 fbc5 	bl	8000aec <__aeabi_dcmplt>
 8009362:	bb38      	cbnz	r0, 80093b4 <_dtoa_r+0x48c>
 8009364:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009368:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800936c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800936e:	2b00      	cmp	r3, #0
 8009370:	f2c0 8157 	blt.w	8009622 <_dtoa_r+0x6fa>
 8009374:	2f0e      	cmp	r7, #14
 8009376:	f300 8154 	bgt.w	8009622 <_dtoa_r+0x6fa>
 800937a:	4b4b      	ldr	r3, [pc, #300]	@ (80094a8 <_dtoa_r+0x580>)
 800937c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009380:	ed93 7b00 	vldr	d7, [r3]
 8009384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009386:	2b00      	cmp	r3, #0
 8009388:	ed8d 7b00 	vstr	d7, [sp]
 800938c:	f280 80e5 	bge.w	800955a <_dtoa_r+0x632>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f300 80e1 	bgt.w	800955a <_dtoa_r+0x632>
 8009398:	d10c      	bne.n	80093b4 <_dtoa_r+0x48c>
 800939a:	4b48      	ldr	r3, [pc, #288]	@ (80094bc <_dtoa_r+0x594>)
 800939c:	2200      	movs	r2, #0
 800939e:	ec51 0b17 	vmov	r0, r1, d7
 80093a2:	f7f7 f931 	bl	8000608 <__aeabi_dmul>
 80093a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093aa:	f7f7 fbb3 	bl	8000b14 <__aeabi_dcmpge>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f000 8266 	beq.w	8009880 <_dtoa_r+0x958>
 80093b4:	2400      	movs	r4, #0
 80093b6:	4625      	mov	r5, r4
 80093b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093ba:	4656      	mov	r6, sl
 80093bc:	ea6f 0803 	mvn.w	r8, r3
 80093c0:	2700      	movs	r7, #0
 80093c2:	4621      	mov	r1, r4
 80093c4:	4648      	mov	r0, r9
 80093c6:	f001 f80b 	bl	800a3e0 <_Bfree>
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	f000 80bd 	beq.w	800954a <_dtoa_r+0x622>
 80093d0:	b12f      	cbz	r7, 80093de <_dtoa_r+0x4b6>
 80093d2:	42af      	cmp	r7, r5
 80093d4:	d003      	beq.n	80093de <_dtoa_r+0x4b6>
 80093d6:	4639      	mov	r1, r7
 80093d8:	4648      	mov	r0, r9
 80093da:	f001 f801 	bl	800a3e0 <_Bfree>
 80093de:	4629      	mov	r1, r5
 80093e0:	4648      	mov	r0, r9
 80093e2:	f000 fffd 	bl	800a3e0 <_Bfree>
 80093e6:	e0b0      	b.n	800954a <_dtoa_r+0x622>
 80093e8:	07e2      	lsls	r2, r4, #31
 80093ea:	d505      	bpl.n	80093f8 <_dtoa_r+0x4d0>
 80093ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093f0:	f7f7 f90a 	bl	8000608 <__aeabi_dmul>
 80093f4:	3601      	adds	r6, #1
 80093f6:	2301      	movs	r3, #1
 80093f8:	1064      	asrs	r4, r4, #1
 80093fa:	3508      	adds	r5, #8
 80093fc:	e762      	b.n	80092c4 <_dtoa_r+0x39c>
 80093fe:	2602      	movs	r6, #2
 8009400:	e765      	b.n	80092ce <_dtoa_r+0x3a6>
 8009402:	9c03      	ldr	r4, [sp, #12]
 8009404:	46b8      	mov	r8, r7
 8009406:	e784      	b.n	8009312 <_dtoa_r+0x3ea>
 8009408:	4b27      	ldr	r3, [pc, #156]	@ (80094a8 <_dtoa_r+0x580>)
 800940a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800940c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009414:	4454      	add	r4, sl
 8009416:	2900      	cmp	r1, #0
 8009418:	d054      	beq.n	80094c4 <_dtoa_r+0x59c>
 800941a:	4929      	ldr	r1, [pc, #164]	@ (80094c0 <_dtoa_r+0x598>)
 800941c:	2000      	movs	r0, #0
 800941e:	f7f7 fa1d 	bl	800085c <__aeabi_ddiv>
 8009422:	4633      	mov	r3, r6
 8009424:	462a      	mov	r2, r5
 8009426:	f7f6 ff37 	bl	8000298 <__aeabi_dsub>
 800942a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800942e:	4656      	mov	r6, sl
 8009430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009434:	f7f7 fb98 	bl	8000b68 <__aeabi_d2iz>
 8009438:	4605      	mov	r5, r0
 800943a:	f7f7 f87b 	bl	8000534 <__aeabi_i2d>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009446:	f7f6 ff27 	bl	8000298 <__aeabi_dsub>
 800944a:	3530      	adds	r5, #48	@ 0x30
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009454:	f806 5b01 	strb.w	r5, [r6], #1
 8009458:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800945c:	f7f7 fb46 	bl	8000aec <__aeabi_dcmplt>
 8009460:	2800      	cmp	r0, #0
 8009462:	d172      	bne.n	800954a <_dtoa_r+0x622>
 8009464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009468:	4911      	ldr	r1, [pc, #68]	@ (80094b0 <_dtoa_r+0x588>)
 800946a:	2000      	movs	r0, #0
 800946c:	f7f6 ff14 	bl	8000298 <__aeabi_dsub>
 8009470:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009474:	f7f7 fb3a 	bl	8000aec <__aeabi_dcmplt>
 8009478:	2800      	cmp	r0, #0
 800947a:	f040 80b4 	bne.w	80095e6 <_dtoa_r+0x6be>
 800947e:	42a6      	cmp	r6, r4
 8009480:	f43f af70 	beq.w	8009364 <_dtoa_r+0x43c>
 8009484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009488:	4b0a      	ldr	r3, [pc, #40]	@ (80094b4 <_dtoa_r+0x58c>)
 800948a:	2200      	movs	r2, #0
 800948c:	f7f7 f8bc 	bl	8000608 <__aeabi_dmul>
 8009490:	4b08      	ldr	r3, [pc, #32]	@ (80094b4 <_dtoa_r+0x58c>)
 8009492:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009496:	2200      	movs	r2, #0
 8009498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800949c:	f7f7 f8b4 	bl	8000608 <__aeabi_dmul>
 80094a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094a4:	e7c4      	b.n	8009430 <_dtoa_r+0x508>
 80094a6:	bf00      	nop
 80094a8:	0800bca0 	.word	0x0800bca0
 80094ac:	0800bc78 	.word	0x0800bc78
 80094b0:	3ff00000 	.word	0x3ff00000
 80094b4:	40240000 	.word	0x40240000
 80094b8:	401c0000 	.word	0x401c0000
 80094bc:	40140000 	.word	0x40140000
 80094c0:	3fe00000 	.word	0x3fe00000
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	f7f7 f89e 	bl	8000608 <__aeabi_dmul>
 80094cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80094d2:	4656      	mov	r6, sl
 80094d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094d8:	f7f7 fb46 	bl	8000b68 <__aeabi_d2iz>
 80094dc:	4605      	mov	r5, r0
 80094de:	f7f7 f829 	bl	8000534 <__aeabi_i2d>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ea:	f7f6 fed5 	bl	8000298 <__aeabi_dsub>
 80094ee:	3530      	adds	r5, #48	@ 0x30
 80094f0:	f806 5b01 	strb.w	r5, [r6], #1
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094fe:	f04f 0200 	mov.w	r2, #0
 8009502:	d124      	bne.n	800954e <_dtoa_r+0x626>
 8009504:	4baf      	ldr	r3, [pc, #700]	@ (80097c4 <_dtoa_r+0x89c>)
 8009506:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800950a:	f7f6 fec7 	bl	800029c <__adddf3>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009516:	f7f7 fb07 	bl	8000b28 <__aeabi_dcmpgt>
 800951a:	2800      	cmp	r0, #0
 800951c:	d163      	bne.n	80095e6 <_dtoa_r+0x6be>
 800951e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009522:	49a8      	ldr	r1, [pc, #672]	@ (80097c4 <_dtoa_r+0x89c>)
 8009524:	2000      	movs	r0, #0
 8009526:	f7f6 feb7 	bl	8000298 <__aeabi_dsub>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009532:	f7f7 fadb 	bl	8000aec <__aeabi_dcmplt>
 8009536:	2800      	cmp	r0, #0
 8009538:	f43f af14 	beq.w	8009364 <_dtoa_r+0x43c>
 800953c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800953e:	1e73      	subs	r3, r6, #1
 8009540:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009542:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009546:	2b30      	cmp	r3, #48	@ 0x30
 8009548:	d0f8      	beq.n	800953c <_dtoa_r+0x614>
 800954a:	4647      	mov	r7, r8
 800954c:	e03b      	b.n	80095c6 <_dtoa_r+0x69e>
 800954e:	4b9e      	ldr	r3, [pc, #632]	@ (80097c8 <_dtoa_r+0x8a0>)
 8009550:	f7f7 f85a 	bl	8000608 <__aeabi_dmul>
 8009554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009558:	e7bc      	b.n	80094d4 <_dtoa_r+0x5ac>
 800955a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800955e:	4656      	mov	r6, sl
 8009560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009564:	4620      	mov	r0, r4
 8009566:	4629      	mov	r1, r5
 8009568:	f7f7 f978 	bl	800085c <__aeabi_ddiv>
 800956c:	f7f7 fafc 	bl	8000b68 <__aeabi_d2iz>
 8009570:	4680      	mov	r8, r0
 8009572:	f7f6 ffdf 	bl	8000534 <__aeabi_i2d>
 8009576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800957a:	f7f7 f845 	bl	8000608 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800958a:	f7f6 fe85 	bl	8000298 <__aeabi_dsub>
 800958e:	f806 4b01 	strb.w	r4, [r6], #1
 8009592:	9d03      	ldr	r5, [sp, #12]
 8009594:	eba6 040a 	sub.w	r4, r6, sl
 8009598:	42a5      	cmp	r5, r4
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	d133      	bne.n	8009608 <_dtoa_r+0x6e0>
 80095a0:	f7f6 fe7c 	bl	800029c <__adddf3>
 80095a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	f7f7 fabc 	bl	8000b28 <__aeabi_dcmpgt>
 80095b0:	b9c0      	cbnz	r0, 80095e4 <_dtoa_r+0x6bc>
 80095b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f7 fa8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80095be:	b110      	cbz	r0, 80095c6 <_dtoa_r+0x69e>
 80095c0:	f018 0f01 	tst.w	r8, #1
 80095c4:	d10e      	bne.n	80095e4 <_dtoa_r+0x6bc>
 80095c6:	9902      	ldr	r1, [sp, #8]
 80095c8:	4648      	mov	r0, r9
 80095ca:	f000 ff09 	bl	800a3e0 <_Bfree>
 80095ce:	2300      	movs	r3, #0
 80095d0:	7033      	strb	r3, [r6, #0]
 80095d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095d4:	3701      	adds	r7, #1
 80095d6:	601f      	str	r7, [r3, #0]
 80095d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 824b 	beq.w	8009a76 <_dtoa_r+0xb4e>
 80095e0:	601e      	str	r6, [r3, #0]
 80095e2:	e248      	b.n	8009a76 <_dtoa_r+0xb4e>
 80095e4:	46b8      	mov	r8, r7
 80095e6:	4633      	mov	r3, r6
 80095e8:	461e      	mov	r6, r3
 80095ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ee:	2a39      	cmp	r2, #57	@ 0x39
 80095f0:	d106      	bne.n	8009600 <_dtoa_r+0x6d8>
 80095f2:	459a      	cmp	sl, r3
 80095f4:	d1f8      	bne.n	80095e8 <_dtoa_r+0x6c0>
 80095f6:	2230      	movs	r2, #48	@ 0x30
 80095f8:	f108 0801 	add.w	r8, r8, #1
 80095fc:	f88a 2000 	strb.w	r2, [sl]
 8009600:	781a      	ldrb	r2, [r3, #0]
 8009602:	3201      	adds	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	e7a0      	b.n	800954a <_dtoa_r+0x622>
 8009608:	4b6f      	ldr	r3, [pc, #444]	@ (80097c8 <_dtoa_r+0x8a0>)
 800960a:	2200      	movs	r2, #0
 800960c:	f7f6 fffc 	bl	8000608 <__aeabi_dmul>
 8009610:	2200      	movs	r2, #0
 8009612:	2300      	movs	r3, #0
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
 8009618:	f7f7 fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800961c:	2800      	cmp	r0, #0
 800961e:	d09f      	beq.n	8009560 <_dtoa_r+0x638>
 8009620:	e7d1      	b.n	80095c6 <_dtoa_r+0x69e>
 8009622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009624:	2a00      	cmp	r2, #0
 8009626:	f000 80ea 	beq.w	80097fe <_dtoa_r+0x8d6>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	2a01      	cmp	r2, #1
 800962e:	f300 80cd 	bgt.w	80097cc <_dtoa_r+0x8a4>
 8009632:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009634:	2a00      	cmp	r2, #0
 8009636:	f000 80c1 	beq.w	80097bc <_dtoa_r+0x894>
 800963a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800963e:	9c08      	ldr	r4, [sp, #32]
 8009640:	9e00      	ldr	r6, [sp, #0]
 8009642:	9a00      	ldr	r2, [sp, #0]
 8009644:	441a      	add	r2, r3
 8009646:	9200      	str	r2, [sp, #0]
 8009648:	9a06      	ldr	r2, [sp, #24]
 800964a:	2101      	movs	r1, #1
 800964c:	441a      	add	r2, r3
 800964e:	4648      	mov	r0, r9
 8009650:	9206      	str	r2, [sp, #24]
 8009652:	f000 ffc3 	bl	800a5dc <__i2b>
 8009656:	4605      	mov	r5, r0
 8009658:	b166      	cbz	r6, 8009674 <_dtoa_r+0x74c>
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd09      	ble.n	8009674 <_dtoa_r+0x74c>
 8009660:	42b3      	cmp	r3, r6
 8009662:	9a00      	ldr	r2, [sp, #0]
 8009664:	bfa8      	it	ge
 8009666:	4633      	movge	r3, r6
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	9200      	str	r2, [sp, #0]
 800966c:	9a06      	ldr	r2, [sp, #24]
 800966e:	1af6      	subs	r6, r6, r3
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	9306      	str	r3, [sp, #24]
 8009674:	9b08      	ldr	r3, [sp, #32]
 8009676:	b30b      	cbz	r3, 80096bc <_dtoa_r+0x794>
 8009678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80c6 	beq.w	800980c <_dtoa_r+0x8e4>
 8009680:	2c00      	cmp	r4, #0
 8009682:	f000 80c0 	beq.w	8009806 <_dtoa_r+0x8de>
 8009686:	4629      	mov	r1, r5
 8009688:	4622      	mov	r2, r4
 800968a:	4648      	mov	r0, r9
 800968c:	f001 f85e 	bl	800a74c <__pow5mult>
 8009690:	9a02      	ldr	r2, [sp, #8]
 8009692:	4601      	mov	r1, r0
 8009694:	4605      	mov	r5, r0
 8009696:	4648      	mov	r0, r9
 8009698:	f000 ffb6 	bl	800a608 <__multiply>
 800969c:	9902      	ldr	r1, [sp, #8]
 800969e:	4680      	mov	r8, r0
 80096a0:	4648      	mov	r0, r9
 80096a2:	f000 fe9d 	bl	800a3e0 <_Bfree>
 80096a6:	9b08      	ldr	r3, [sp, #32]
 80096a8:	1b1b      	subs	r3, r3, r4
 80096aa:	9308      	str	r3, [sp, #32]
 80096ac:	f000 80b1 	beq.w	8009812 <_dtoa_r+0x8ea>
 80096b0:	9a08      	ldr	r2, [sp, #32]
 80096b2:	4641      	mov	r1, r8
 80096b4:	4648      	mov	r0, r9
 80096b6:	f001 f849 	bl	800a74c <__pow5mult>
 80096ba:	9002      	str	r0, [sp, #8]
 80096bc:	2101      	movs	r1, #1
 80096be:	4648      	mov	r0, r9
 80096c0:	f000 ff8c 	bl	800a5dc <__i2b>
 80096c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096c6:	4604      	mov	r4, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 81d8 	beq.w	8009a7e <_dtoa_r+0xb56>
 80096ce:	461a      	mov	r2, r3
 80096d0:	4601      	mov	r1, r0
 80096d2:	4648      	mov	r0, r9
 80096d4:	f001 f83a 	bl	800a74c <__pow5mult>
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	4604      	mov	r4, r0
 80096de:	f300 809f 	bgt.w	8009820 <_dtoa_r+0x8f8>
 80096e2:	9b04      	ldr	r3, [sp, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f040 8097 	bne.w	8009818 <_dtoa_r+0x8f0>
 80096ea:	9b05      	ldr	r3, [sp, #20]
 80096ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 8093 	bne.w	800981c <_dtoa_r+0x8f4>
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096fc:	0d1b      	lsrs	r3, r3, #20
 80096fe:	051b      	lsls	r3, r3, #20
 8009700:	b133      	cbz	r3, 8009710 <_dtoa_r+0x7e8>
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	9b06      	ldr	r3, [sp, #24]
 800970a:	3301      	adds	r3, #1
 800970c:	9306      	str	r3, [sp, #24]
 800970e:	2301      	movs	r3, #1
 8009710:	9308      	str	r3, [sp, #32]
 8009712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 81b8 	beq.w	8009a8a <_dtoa_r+0xb62>
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009720:	6918      	ldr	r0, [r3, #16]
 8009722:	f000 ff0f 	bl	800a544 <__hi0bits>
 8009726:	f1c0 0020 	rsb	r0, r0, #32
 800972a:	9b06      	ldr	r3, [sp, #24]
 800972c:	4418      	add	r0, r3
 800972e:	f010 001f 	ands.w	r0, r0, #31
 8009732:	f000 8082 	beq.w	800983a <_dtoa_r+0x912>
 8009736:	f1c0 0320 	rsb	r3, r0, #32
 800973a:	2b04      	cmp	r3, #4
 800973c:	dd73      	ble.n	8009826 <_dtoa_r+0x8fe>
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	f1c0 001c 	rsb	r0, r0, #28
 8009744:	4403      	add	r3, r0
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	9b06      	ldr	r3, [sp, #24]
 800974a:	4403      	add	r3, r0
 800974c:	4406      	add	r6, r0
 800974e:	9306      	str	r3, [sp, #24]
 8009750:	9b00      	ldr	r3, [sp, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	dd05      	ble.n	8009762 <_dtoa_r+0x83a>
 8009756:	9902      	ldr	r1, [sp, #8]
 8009758:	461a      	mov	r2, r3
 800975a:	4648      	mov	r0, r9
 800975c:	f001 f850 	bl	800a800 <__lshift>
 8009760:	9002      	str	r0, [sp, #8]
 8009762:	9b06      	ldr	r3, [sp, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd05      	ble.n	8009774 <_dtoa_r+0x84c>
 8009768:	4621      	mov	r1, r4
 800976a:	461a      	mov	r2, r3
 800976c:	4648      	mov	r0, r9
 800976e:	f001 f847 	bl	800a800 <__lshift>
 8009772:	4604      	mov	r4, r0
 8009774:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d061      	beq.n	800983e <_dtoa_r+0x916>
 800977a:	9802      	ldr	r0, [sp, #8]
 800977c:	4621      	mov	r1, r4
 800977e:	f001 f8ab 	bl	800a8d8 <__mcmp>
 8009782:	2800      	cmp	r0, #0
 8009784:	da5b      	bge.n	800983e <_dtoa_r+0x916>
 8009786:	2300      	movs	r3, #0
 8009788:	9902      	ldr	r1, [sp, #8]
 800978a:	220a      	movs	r2, #10
 800978c:	4648      	mov	r0, r9
 800978e:	f000 fe49 	bl	800a424 <__multadd>
 8009792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009794:	9002      	str	r0, [sp, #8]
 8009796:	f107 38ff 	add.w	r8, r7, #4294967295
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 8177 	beq.w	8009a8e <_dtoa_r+0xb66>
 80097a0:	4629      	mov	r1, r5
 80097a2:	2300      	movs	r3, #0
 80097a4:	220a      	movs	r2, #10
 80097a6:	4648      	mov	r0, r9
 80097a8:	f000 fe3c 	bl	800a424 <__multadd>
 80097ac:	f1bb 0f00 	cmp.w	fp, #0
 80097b0:	4605      	mov	r5, r0
 80097b2:	dc6f      	bgt.n	8009894 <_dtoa_r+0x96c>
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	dc49      	bgt.n	800984e <_dtoa_r+0x926>
 80097ba:	e06b      	b.n	8009894 <_dtoa_r+0x96c>
 80097bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097c2:	e73c      	b.n	800963e <_dtoa_r+0x716>
 80097c4:	3fe00000 	.word	0x3fe00000
 80097c8:	40240000 	.word	0x40240000
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1e5c      	subs	r4, r3, #1
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	db09      	blt.n	80097ea <_dtoa_r+0x8c2>
 80097d6:	1b1c      	subs	r4, r3, r4
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f6bf af30 	bge.w	8009640 <_dtoa_r+0x718>
 80097e0:	9b00      	ldr	r3, [sp, #0]
 80097e2:	9a03      	ldr	r2, [sp, #12]
 80097e4:	1a9e      	subs	r6, r3, r2
 80097e6:	2300      	movs	r3, #0
 80097e8:	e72b      	b.n	8009642 <_dtoa_r+0x71a>
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097ee:	9408      	str	r4, [sp, #32]
 80097f0:	1ae3      	subs	r3, r4, r3
 80097f2:	441a      	add	r2, r3
 80097f4:	9e00      	ldr	r6, [sp, #0]
 80097f6:	9b03      	ldr	r3, [sp, #12]
 80097f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80097fa:	2400      	movs	r4, #0
 80097fc:	e721      	b.n	8009642 <_dtoa_r+0x71a>
 80097fe:	9c08      	ldr	r4, [sp, #32]
 8009800:	9e00      	ldr	r6, [sp, #0]
 8009802:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009804:	e728      	b.n	8009658 <_dtoa_r+0x730>
 8009806:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800980a:	e751      	b.n	80096b0 <_dtoa_r+0x788>
 800980c:	9a08      	ldr	r2, [sp, #32]
 800980e:	9902      	ldr	r1, [sp, #8]
 8009810:	e750      	b.n	80096b4 <_dtoa_r+0x78c>
 8009812:	f8cd 8008 	str.w	r8, [sp, #8]
 8009816:	e751      	b.n	80096bc <_dtoa_r+0x794>
 8009818:	2300      	movs	r3, #0
 800981a:	e779      	b.n	8009710 <_dtoa_r+0x7e8>
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	e777      	b.n	8009710 <_dtoa_r+0x7e8>
 8009820:	2300      	movs	r3, #0
 8009822:	9308      	str	r3, [sp, #32]
 8009824:	e779      	b.n	800971a <_dtoa_r+0x7f2>
 8009826:	d093      	beq.n	8009750 <_dtoa_r+0x828>
 8009828:	9a00      	ldr	r2, [sp, #0]
 800982a:	331c      	adds	r3, #28
 800982c:	441a      	add	r2, r3
 800982e:	9200      	str	r2, [sp, #0]
 8009830:	9a06      	ldr	r2, [sp, #24]
 8009832:	441a      	add	r2, r3
 8009834:	441e      	add	r6, r3
 8009836:	9206      	str	r2, [sp, #24]
 8009838:	e78a      	b.n	8009750 <_dtoa_r+0x828>
 800983a:	4603      	mov	r3, r0
 800983c:	e7f4      	b.n	8009828 <_dtoa_r+0x900>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	46b8      	mov	r8, r7
 8009844:	dc20      	bgt.n	8009888 <_dtoa_r+0x960>
 8009846:	469b      	mov	fp, r3
 8009848:	9b07      	ldr	r3, [sp, #28]
 800984a:	2b02      	cmp	r3, #2
 800984c:	dd1e      	ble.n	800988c <_dtoa_r+0x964>
 800984e:	f1bb 0f00 	cmp.w	fp, #0
 8009852:	f47f adb1 	bne.w	80093b8 <_dtoa_r+0x490>
 8009856:	4621      	mov	r1, r4
 8009858:	465b      	mov	r3, fp
 800985a:	2205      	movs	r2, #5
 800985c:	4648      	mov	r0, r9
 800985e:	f000 fde1 	bl	800a424 <__multadd>
 8009862:	4601      	mov	r1, r0
 8009864:	4604      	mov	r4, r0
 8009866:	9802      	ldr	r0, [sp, #8]
 8009868:	f001 f836 	bl	800a8d8 <__mcmp>
 800986c:	2800      	cmp	r0, #0
 800986e:	f77f ada3 	ble.w	80093b8 <_dtoa_r+0x490>
 8009872:	4656      	mov	r6, sl
 8009874:	2331      	movs	r3, #49	@ 0x31
 8009876:	f806 3b01 	strb.w	r3, [r6], #1
 800987a:	f108 0801 	add.w	r8, r8, #1
 800987e:	e59f      	b.n	80093c0 <_dtoa_r+0x498>
 8009880:	9c03      	ldr	r4, [sp, #12]
 8009882:	46b8      	mov	r8, r7
 8009884:	4625      	mov	r5, r4
 8009886:	e7f4      	b.n	8009872 <_dtoa_r+0x94a>
 8009888:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800988c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 8101 	beq.w	8009a96 <_dtoa_r+0xb6e>
 8009894:	2e00      	cmp	r6, #0
 8009896:	dd05      	ble.n	80098a4 <_dtoa_r+0x97c>
 8009898:	4629      	mov	r1, r5
 800989a:	4632      	mov	r2, r6
 800989c:	4648      	mov	r0, r9
 800989e:	f000 ffaf 	bl	800a800 <__lshift>
 80098a2:	4605      	mov	r5, r0
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d05c      	beq.n	8009964 <_dtoa_r+0xa3c>
 80098aa:	6869      	ldr	r1, [r5, #4]
 80098ac:	4648      	mov	r0, r9
 80098ae:	f000 fd57 	bl	800a360 <_Balloc>
 80098b2:	4606      	mov	r6, r0
 80098b4:	b928      	cbnz	r0, 80098c2 <_dtoa_r+0x99a>
 80098b6:	4b82      	ldr	r3, [pc, #520]	@ (8009ac0 <_dtoa_r+0xb98>)
 80098b8:	4602      	mov	r2, r0
 80098ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098be:	f7ff bb4a 	b.w	8008f56 <_dtoa_r+0x2e>
 80098c2:	692a      	ldr	r2, [r5, #16]
 80098c4:	3202      	adds	r2, #2
 80098c6:	0092      	lsls	r2, r2, #2
 80098c8:	f105 010c 	add.w	r1, r5, #12
 80098cc:	300c      	adds	r0, #12
 80098ce:	f7ff fa6a 	bl	8008da6 <memcpy>
 80098d2:	2201      	movs	r2, #1
 80098d4:	4631      	mov	r1, r6
 80098d6:	4648      	mov	r0, r9
 80098d8:	f000 ff92 	bl	800a800 <__lshift>
 80098dc:	f10a 0301 	add.w	r3, sl, #1
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	eb0a 030b 	add.w	r3, sl, fp
 80098e6:	9308      	str	r3, [sp, #32]
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	462f      	mov	r7, r5
 80098f0:	9306      	str	r3, [sp, #24]
 80098f2:	4605      	mov	r5, r0
 80098f4:	9b00      	ldr	r3, [sp, #0]
 80098f6:	9802      	ldr	r0, [sp, #8]
 80098f8:	4621      	mov	r1, r4
 80098fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80098fe:	f7ff fa89 	bl	8008e14 <quorem>
 8009902:	4603      	mov	r3, r0
 8009904:	3330      	adds	r3, #48	@ 0x30
 8009906:	9003      	str	r0, [sp, #12]
 8009908:	4639      	mov	r1, r7
 800990a:	9802      	ldr	r0, [sp, #8]
 800990c:	9309      	str	r3, [sp, #36]	@ 0x24
 800990e:	f000 ffe3 	bl	800a8d8 <__mcmp>
 8009912:	462a      	mov	r2, r5
 8009914:	9004      	str	r0, [sp, #16]
 8009916:	4621      	mov	r1, r4
 8009918:	4648      	mov	r0, r9
 800991a:	f000 fff9 	bl	800a910 <__mdiff>
 800991e:	68c2      	ldr	r2, [r0, #12]
 8009920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009922:	4606      	mov	r6, r0
 8009924:	bb02      	cbnz	r2, 8009968 <_dtoa_r+0xa40>
 8009926:	4601      	mov	r1, r0
 8009928:	9802      	ldr	r0, [sp, #8]
 800992a:	f000 ffd5 	bl	800a8d8 <__mcmp>
 800992e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009930:	4602      	mov	r2, r0
 8009932:	4631      	mov	r1, r6
 8009934:	4648      	mov	r0, r9
 8009936:	920c      	str	r2, [sp, #48]	@ 0x30
 8009938:	9309      	str	r3, [sp, #36]	@ 0x24
 800993a:	f000 fd51 	bl	800a3e0 <_Bfree>
 800993e:	9b07      	ldr	r3, [sp, #28]
 8009940:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009942:	9e00      	ldr	r6, [sp, #0]
 8009944:	ea42 0103 	orr.w	r1, r2, r3
 8009948:	9b06      	ldr	r3, [sp, #24]
 800994a:	4319      	orrs	r1, r3
 800994c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800994e:	d10d      	bne.n	800996c <_dtoa_r+0xa44>
 8009950:	2b39      	cmp	r3, #57	@ 0x39
 8009952:	d027      	beq.n	80099a4 <_dtoa_r+0xa7c>
 8009954:	9a04      	ldr	r2, [sp, #16]
 8009956:	2a00      	cmp	r2, #0
 8009958:	dd01      	ble.n	800995e <_dtoa_r+0xa36>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	3331      	adds	r3, #49	@ 0x31
 800995e:	f88b 3000 	strb.w	r3, [fp]
 8009962:	e52e      	b.n	80093c2 <_dtoa_r+0x49a>
 8009964:	4628      	mov	r0, r5
 8009966:	e7b9      	b.n	80098dc <_dtoa_r+0x9b4>
 8009968:	2201      	movs	r2, #1
 800996a:	e7e2      	b.n	8009932 <_dtoa_r+0xa0a>
 800996c:	9904      	ldr	r1, [sp, #16]
 800996e:	2900      	cmp	r1, #0
 8009970:	db04      	blt.n	800997c <_dtoa_r+0xa54>
 8009972:	9807      	ldr	r0, [sp, #28]
 8009974:	4301      	orrs	r1, r0
 8009976:	9806      	ldr	r0, [sp, #24]
 8009978:	4301      	orrs	r1, r0
 800997a:	d120      	bne.n	80099be <_dtoa_r+0xa96>
 800997c:	2a00      	cmp	r2, #0
 800997e:	ddee      	ble.n	800995e <_dtoa_r+0xa36>
 8009980:	9902      	ldr	r1, [sp, #8]
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	2201      	movs	r2, #1
 8009986:	4648      	mov	r0, r9
 8009988:	f000 ff3a 	bl	800a800 <__lshift>
 800998c:	4621      	mov	r1, r4
 800998e:	9002      	str	r0, [sp, #8]
 8009990:	f000 ffa2 	bl	800a8d8 <__mcmp>
 8009994:	2800      	cmp	r0, #0
 8009996:	9b00      	ldr	r3, [sp, #0]
 8009998:	dc02      	bgt.n	80099a0 <_dtoa_r+0xa78>
 800999a:	d1e0      	bne.n	800995e <_dtoa_r+0xa36>
 800999c:	07da      	lsls	r2, r3, #31
 800999e:	d5de      	bpl.n	800995e <_dtoa_r+0xa36>
 80099a0:	2b39      	cmp	r3, #57	@ 0x39
 80099a2:	d1da      	bne.n	800995a <_dtoa_r+0xa32>
 80099a4:	2339      	movs	r3, #57	@ 0x39
 80099a6:	f88b 3000 	strb.w	r3, [fp]
 80099aa:	4633      	mov	r3, r6
 80099ac:	461e      	mov	r6, r3
 80099ae:	3b01      	subs	r3, #1
 80099b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099b4:	2a39      	cmp	r2, #57	@ 0x39
 80099b6:	d04e      	beq.n	8009a56 <_dtoa_r+0xb2e>
 80099b8:	3201      	adds	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
 80099bc:	e501      	b.n	80093c2 <_dtoa_r+0x49a>
 80099be:	2a00      	cmp	r2, #0
 80099c0:	dd03      	ble.n	80099ca <_dtoa_r+0xaa2>
 80099c2:	2b39      	cmp	r3, #57	@ 0x39
 80099c4:	d0ee      	beq.n	80099a4 <_dtoa_r+0xa7c>
 80099c6:	3301      	adds	r3, #1
 80099c8:	e7c9      	b.n	800995e <_dtoa_r+0xa36>
 80099ca:	9a00      	ldr	r2, [sp, #0]
 80099cc:	9908      	ldr	r1, [sp, #32]
 80099ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099d2:	428a      	cmp	r2, r1
 80099d4:	d028      	beq.n	8009a28 <_dtoa_r+0xb00>
 80099d6:	9902      	ldr	r1, [sp, #8]
 80099d8:	2300      	movs	r3, #0
 80099da:	220a      	movs	r2, #10
 80099dc:	4648      	mov	r0, r9
 80099de:	f000 fd21 	bl	800a424 <__multadd>
 80099e2:	42af      	cmp	r7, r5
 80099e4:	9002      	str	r0, [sp, #8]
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	f04f 020a 	mov.w	r2, #10
 80099ee:	4639      	mov	r1, r7
 80099f0:	4648      	mov	r0, r9
 80099f2:	d107      	bne.n	8009a04 <_dtoa_r+0xadc>
 80099f4:	f000 fd16 	bl	800a424 <__multadd>
 80099f8:	4607      	mov	r7, r0
 80099fa:	4605      	mov	r5, r0
 80099fc:	9b00      	ldr	r3, [sp, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	e777      	b.n	80098f4 <_dtoa_r+0x9cc>
 8009a04:	f000 fd0e 	bl	800a424 <__multadd>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	220a      	movs	r2, #10
 8009a10:	4648      	mov	r0, r9
 8009a12:	f000 fd07 	bl	800a424 <__multadd>
 8009a16:	4605      	mov	r5, r0
 8009a18:	e7f0      	b.n	80099fc <_dtoa_r+0xad4>
 8009a1a:	f1bb 0f00 	cmp.w	fp, #0
 8009a1e:	bfcc      	ite	gt
 8009a20:	465e      	movgt	r6, fp
 8009a22:	2601      	movle	r6, #1
 8009a24:	4456      	add	r6, sl
 8009a26:	2700      	movs	r7, #0
 8009a28:	9902      	ldr	r1, [sp, #8]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f000 fee6 	bl	800a800 <__lshift>
 8009a34:	4621      	mov	r1, r4
 8009a36:	9002      	str	r0, [sp, #8]
 8009a38:	f000 ff4e 	bl	800a8d8 <__mcmp>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	dcb4      	bgt.n	80099aa <_dtoa_r+0xa82>
 8009a40:	d102      	bne.n	8009a48 <_dtoa_r+0xb20>
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	07db      	lsls	r3, r3, #31
 8009a46:	d4b0      	bmi.n	80099aa <_dtoa_r+0xa82>
 8009a48:	4633      	mov	r3, r6
 8009a4a:	461e      	mov	r6, r3
 8009a4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a50:	2a30      	cmp	r2, #48	@ 0x30
 8009a52:	d0fa      	beq.n	8009a4a <_dtoa_r+0xb22>
 8009a54:	e4b5      	b.n	80093c2 <_dtoa_r+0x49a>
 8009a56:	459a      	cmp	sl, r3
 8009a58:	d1a8      	bne.n	80099ac <_dtoa_r+0xa84>
 8009a5a:	2331      	movs	r3, #49	@ 0x31
 8009a5c:	f108 0801 	add.w	r8, r8, #1
 8009a60:	f88a 3000 	strb.w	r3, [sl]
 8009a64:	e4ad      	b.n	80093c2 <_dtoa_r+0x49a>
 8009a66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ac4 <_dtoa_r+0xb9c>
 8009a6c:	b11b      	cbz	r3, 8009a76 <_dtoa_r+0xb4e>
 8009a6e:	f10a 0308 	add.w	r3, sl, #8
 8009a72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	4650      	mov	r0, sl
 8009a78:	b017      	add	sp, #92	@ 0x5c
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	9b07      	ldr	r3, [sp, #28]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	f77f ae2e 	ble.w	80096e2 <_dtoa_r+0x7ba>
 8009a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a88:	9308      	str	r3, [sp, #32]
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	e64d      	b.n	800972a <_dtoa_r+0x802>
 8009a8e:	f1bb 0f00 	cmp.w	fp, #0
 8009a92:	f77f aed9 	ble.w	8009848 <_dtoa_r+0x920>
 8009a96:	4656      	mov	r6, sl
 8009a98:	9802      	ldr	r0, [sp, #8]
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	f7ff f9ba 	bl	8008e14 <quorem>
 8009aa0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009aa4:	f806 3b01 	strb.w	r3, [r6], #1
 8009aa8:	eba6 020a 	sub.w	r2, r6, sl
 8009aac:	4593      	cmp	fp, r2
 8009aae:	ddb4      	ble.n	8009a1a <_dtoa_r+0xaf2>
 8009ab0:	9902      	ldr	r1, [sp, #8]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	220a      	movs	r2, #10
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fcb4 	bl	800a424 <__multadd>
 8009abc:	9002      	str	r0, [sp, #8]
 8009abe:	e7eb      	b.n	8009a98 <_dtoa_r+0xb70>
 8009ac0:	0800bb3c 	.word	0x0800bb3c
 8009ac4:	0800bad7 	.word	0x0800bad7

08009ac8 <_free_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4605      	mov	r5, r0
 8009acc:	2900      	cmp	r1, #0
 8009ace:	d041      	beq.n	8009b54 <_free_r+0x8c>
 8009ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad4:	1f0c      	subs	r4, r1, #4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bfb8      	it	lt
 8009ada:	18e4      	addlt	r4, r4, r3
 8009adc:	f000 fc34 	bl	800a348 <__malloc_lock>
 8009ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b58 <_free_r+0x90>)
 8009ae2:	6813      	ldr	r3, [r2, #0]
 8009ae4:	b933      	cbnz	r3, 8009af4 <_free_r+0x2c>
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	6014      	str	r4, [r2, #0]
 8009aea:	4628      	mov	r0, r5
 8009aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af0:	f000 bc30 	b.w	800a354 <__malloc_unlock>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d908      	bls.n	8009b0a <_free_r+0x42>
 8009af8:	6820      	ldr	r0, [r4, #0]
 8009afa:	1821      	adds	r1, r4, r0
 8009afc:	428b      	cmp	r3, r1
 8009afe:	bf01      	itttt	eq
 8009b00:	6819      	ldreq	r1, [r3, #0]
 8009b02:	685b      	ldreq	r3, [r3, #4]
 8009b04:	1809      	addeq	r1, r1, r0
 8009b06:	6021      	streq	r1, [r4, #0]
 8009b08:	e7ed      	b.n	8009ae6 <_free_r+0x1e>
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	b10b      	cbz	r3, 8009b14 <_free_r+0x4c>
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d9fa      	bls.n	8009b0a <_free_r+0x42>
 8009b14:	6811      	ldr	r1, [r2, #0]
 8009b16:	1850      	adds	r0, r2, r1
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d10b      	bne.n	8009b34 <_free_r+0x6c>
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	4401      	add	r1, r0
 8009b20:	1850      	adds	r0, r2, r1
 8009b22:	4283      	cmp	r3, r0
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	d1e0      	bne.n	8009aea <_free_r+0x22>
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	6053      	str	r3, [r2, #4]
 8009b2e:	4408      	add	r0, r1
 8009b30:	6010      	str	r0, [r2, #0]
 8009b32:	e7da      	b.n	8009aea <_free_r+0x22>
 8009b34:	d902      	bls.n	8009b3c <_free_r+0x74>
 8009b36:	230c      	movs	r3, #12
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	e7d6      	b.n	8009aea <_free_r+0x22>
 8009b3c:	6820      	ldr	r0, [r4, #0]
 8009b3e:	1821      	adds	r1, r4, r0
 8009b40:	428b      	cmp	r3, r1
 8009b42:	bf04      	itt	eq
 8009b44:	6819      	ldreq	r1, [r3, #0]
 8009b46:	685b      	ldreq	r3, [r3, #4]
 8009b48:	6063      	str	r3, [r4, #4]
 8009b4a:	bf04      	itt	eq
 8009b4c:	1809      	addeq	r1, r1, r0
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	6054      	str	r4, [r2, #4]
 8009b52:	e7ca      	b.n	8009aea <_free_r+0x22>
 8009b54:	bd38      	pop	{r3, r4, r5, pc}
 8009b56:	bf00      	nop
 8009b58:	20000840 	.word	0x20000840

08009b5c <rshift>:
 8009b5c:	6903      	ldr	r3, [r0, #16]
 8009b5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b6a:	f100 0414 	add.w	r4, r0, #20
 8009b6e:	dd45      	ble.n	8009bfc <rshift+0xa0>
 8009b70:	f011 011f 	ands.w	r1, r1, #31
 8009b74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b7c:	d10c      	bne.n	8009b98 <rshift+0x3c>
 8009b7e:	f100 0710 	add.w	r7, r0, #16
 8009b82:	4629      	mov	r1, r5
 8009b84:	42b1      	cmp	r1, r6
 8009b86:	d334      	bcc.n	8009bf2 <rshift+0x96>
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	1eea      	subs	r2, r5, #3
 8009b8e:	4296      	cmp	r6, r2
 8009b90:	bf38      	it	cc
 8009b92:	2300      	movcc	r3, #0
 8009b94:	4423      	add	r3, r4
 8009b96:	e015      	b.n	8009bc4 <rshift+0x68>
 8009b98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b9c:	f1c1 0820 	rsb	r8, r1, #32
 8009ba0:	40cf      	lsrs	r7, r1
 8009ba2:	f105 0e04 	add.w	lr, r5, #4
 8009ba6:	46a1      	mov	r9, r4
 8009ba8:	4576      	cmp	r6, lr
 8009baa:	46f4      	mov	ip, lr
 8009bac:	d815      	bhi.n	8009bda <rshift+0x7e>
 8009bae:	1a9a      	subs	r2, r3, r2
 8009bb0:	0092      	lsls	r2, r2, #2
 8009bb2:	3a04      	subs	r2, #4
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	42ae      	cmp	r6, r5
 8009bb8:	bf38      	it	cc
 8009bba:	2200      	movcc	r2, #0
 8009bbc:	18a3      	adds	r3, r4, r2
 8009bbe:	50a7      	str	r7, [r4, r2]
 8009bc0:	b107      	cbz	r7, 8009bc4 <rshift+0x68>
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	1b1a      	subs	r2, r3, r4
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bcc:	bf08      	it	eq
 8009bce:	2300      	moveq	r3, #0
 8009bd0:	6102      	str	r2, [r0, #16]
 8009bd2:	bf08      	it	eq
 8009bd4:	6143      	streq	r3, [r0, #20]
 8009bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bda:	f8dc c000 	ldr.w	ip, [ip]
 8009bde:	fa0c fc08 	lsl.w	ip, ip, r8
 8009be2:	ea4c 0707 	orr.w	r7, ip, r7
 8009be6:	f849 7b04 	str.w	r7, [r9], #4
 8009bea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bee:	40cf      	lsrs	r7, r1
 8009bf0:	e7da      	b.n	8009ba8 <rshift+0x4c>
 8009bf2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009bf6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009bfa:	e7c3      	b.n	8009b84 <rshift+0x28>
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	e7e1      	b.n	8009bc4 <rshift+0x68>

08009c00 <__hexdig_fun>:
 8009c00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c04:	2b09      	cmp	r3, #9
 8009c06:	d802      	bhi.n	8009c0e <__hexdig_fun+0xe>
 8009c08:	3820      	subs	r0, #32
 8009c0a:	b2c0      	uxtb	r0, r0
 8009c0c:	4770      	bx	lr
 8009c0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	d801      	bhi.n	8009c1a <__hexdig_fun+0x1a>
 8009c16:	3847      	subs	r0, #71	@ 0x47
 8009c18:	e7f7      	b.n	8009c0a <__hexdig_fun+0xa>
 8009c1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d801      	bhi.n	8009c26 <__hexdig_fun+0x26>
 8009c22:	3827      	subs	r0, #39	@ 0x27
 8009c24:	e7f1      	b.n	8009c0a <__hexdig_fun+0xa>
 8009c26:	2000      	movs	r0, #0
 8009c28:	4770      	bx	lr
	...

08009c2c <__gethex>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	b085      	sub	sp, #20
 8009c32:	468a      	mov	sl, r1
 8009c34:	9302      	str	r3, [sp, #8]
 8009c36:	680b      	ldr	r3, [r1, #0]
 8009c38:	9001      	str	r0, [sp, #4]
 8009c3a:	4690      	mov	r8, r2
 8009c3c:	1c9c      	adds	r4, r3, #2
 8009c3e:	46a1      	mov	r9, r4
 8009c40:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c44:	2830      	cmp	r0, #48	@ 0x30
 8009c46:	d0fa      	beq.n	8009c3e <__gethex+0x12>
 8009c48:	eba9 0303 	sub.w	r3, r9, r3
 8009c4c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009c50:	f7ff ffd6 	bl	8009c00 <__hexdig_fun>
 8009c54:	4605      	mov	r5, r0
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d168      	bne.n	8009d2c <__gethex+0x100>
 8009c5a:	49a0      	ldr	r1, [pc, #640]	@ (8009edc <__gethex+0x2b0>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	4648      	mov	r0, r9
 8009c60:	f7fe ffbb 	bl	8008bda <strncmp>
 8009c64:	4607      	mov	r7, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d167      	bne.n	8009d3a <__gethex+0x10e>
 8009c6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c6e:	4626      	mov	r6, r4
 8009c70:	f7ff ffc6 	bl	8009c00 <__hexdig_fun>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d062      	beq.n	8009d3e <__gethex+0x112>
 8009c78:	4623      	mov	r3, r4
 8009c7a:	7818      	ldrb	r0, [r3, #0]
 8009c7c:	2830      	cmp	r0, #48	@ 0x30
 8009c7e:	4699      	mov	r9, r3
 8009c80:	f103 0301 	add.w	r3, r3, #1
 8009c84:	d0f9      	beq.n	8009c7a <__gethex+0x4e>
 8009c86:	f7ff ffbb 	bl	8009c00 <__hexdig_fun>
 8009c8a:	fab0 f580 	clz	r5, r0
 8009c8e:	096d      	lsrs	r5, r5, #5
 8009c90:	f04f 0b01 	mov.w	fp, #1
 8009c94:	464a      	mov	r2, r9
 8009c96:	4616      	mov	r6, r2
 8009c98:	3201      	adds	r2, #1
 8009c9a:	7830      	ldrb	r0, [r6, #0]
 8009c9c:	f7ff ffb0 	bl	8009c00 <__hexdig_fun>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d1f8      	bne.n	8009c96 <__gethex+0x6a>
 8009ca4:	498d      	ldr	r1, [pc, #564]	@ (8009edc <__gethex+0x2b0>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7fe ff96 	bl	8008bda <strncmp>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d13f      	bne.n	8009d32 <__gethex+0x106>
 8009cb2:	b944      	cbnz	r4, 8009cc6 <__gethex+0x9a>
 8009cb4:	1c74      	adds	r4, r6, #1
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	4616      	mov	r6, r2
 8009cba:	3201      	adds	r2, #1
 8009cbc:	7830      	ldrb	r0, [r6, #0]
 8009cbe:	f7ff ff9f 	bl	8009c00 <__hexdig_fun>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d1f8      	bne.n	8009cb8 <__gethex+0x8c>
 8009cc6:	1ba4      	subs	r4, r4, r6
 8009cc8:	00a7      	lsls	r7, r4, #2
 8009cca:	7833      	ldrb	r3, [r6, #0]
 8009ccc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009cd0:	2b50      	cmp	r3, #80	@ 0x50
 8009cd2:	d13e      	bne.n	8009d52 <__gethex+0x126>
 8009cd4:	7873      	ldrb	r3, [r6, #1]
 8009cd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009cd8:	d033      	beq.n	8009d42 <__gethex+0x116>
 8009cda:	2b2d      	cmp	r3, #45	@ 0x2d
 8009cdc:	d034      	beq.n	8009d48 <__gethex+0x11c>
 8009cde:	1c71      	adds	r1, r6, #1
 8009ce0:	2400      	movs	r4, #0
 8009ce2:	7808      	ldrb	r0, [r1, #0]
 8009ce4:	f7ff ff8c 	bl	8009c00 <__hexdig_fun>
 8009ce8:	1e43      	subs	r3, r0, #1
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b18      	cmp	r3, #24
 8009cee:	d830      	bhi.n	8009d52 <__gethex+0x126>
 8009cf0:	f1a0 0210 	sub.w	r2, r0, #16
 8009cf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009cf8:	f7ff ff82 	bl	8009c00 <__hexdig_fun>
 8009cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d00:	fa5f fc8c 	uxtb.w	ip, ip
 8009d04:	f1bc 0f18 	cmp.w	ip, #24
 8009d08:	f04f 030a 	mov.w	r3, #10
 8009d0c:	d91e      	bls.n	8009d4c <__gethex+0x120>
 8009d0e:	b104      	cbz	r4, 8009d12 <__gethex+0xe6>
 8009d10:	4252      	negs	r2, r2
 8009d12:	4417      	add	r7, r2
 8009d14:	f8ca 1000 	str.w	r1, [sl]
 8009d18:	b1ed      	cbz	r5, 8009d56 <__gethex+0x12a>
 8009d1a:	f1bb 0f00 	cmp.w	fp, #0
 8009d1e:	bf0c      	ite	eq
 8009d20:	2506      	moveq	r5, #6
 8009d22:	2500      	movne	r5, #0
 8009d24:	4628      	mov	r0, r5
 8009d26:	b005      	add	sp, #20
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2c:	2500      	movs	r5, #0
 8009d2e:	462c      	mov	r4, r5
 8009d30:	e7b0      	b.n	8009c94 <__gethex+0x68>
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d1c7      	bne.n	8009cc6 <__gethex+0x9a>
 8009d36:	4627      	mov	r7, r4
 8009d38:	e7c7      	b.n	8009cca <__gethex+0x9e>
 8009d3a:	464e      	mov	r6, r9
 8009d3c:	462f      	mov	r7, r5
 8009d3e:	2501      	movs	r5, #1
 8009d40:	e7c3      	b.n	8009cca <__gethex+0x9e>
 8009d42:	2400      	movs	r4, #0
 8009d44:	1cb1      	adds	r1, r6, #2
 8009d46:	e7cc      	b.n	8009ce2 <__gethex+0xb6>
 8009d48:	2401      	movs	r4, #1
 8009d4a:	e7fb      	b.n	8009d44 <__gethex+0x118>
 8009d4c:	fb03 0002 	mla	r0, r3, r2, r0
 8009d50:	e7ce      	b.n	8009cf0 <__gethex+0xc4>
 8009d52:	4631      	mov	r1, r6
 8009d54:	e7de      	b.n	8009d14 <__gethex+0xe8>
 8009d56:	eba6 0309 	sub.w	r3, r6, r9
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	2b07      	cmp	r3, #7
 8009d60:	dc0a      	bgt.n	8009d78 <__gethex+0x14c>
 8009d62:	9801      	ldr	r0, [sp, #4]
 8009d64:	f000 fafc 	bl	800a360 <_Balloc>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	b940      	cbnz	r0, 8009d7e <__gethex+0x152>
 8009d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee0 <__gethex+0x2b4>)
 8009d6e:	4602      	mov	r2, r0
 8009d70:	21e4      	movs	r1, #228	@ 0xe4
 8009d72:	485c      	ldr	r0, [pc, #368]	@ (8009ee4 <__gethex+0x2b8>)
 8009d74:	f7ff f830 	bl	8008dd8 <__assert_func>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	105b      	asrs	r3, r3, #1
 8009d7c:	e7ef      	b.n	8009d5e <__gethex+0x132>
 8009d7e:	f100 0a14 	add.w	sl, r0, #20
 8009d82:	2300      	movs	r3, #0
 8009d84:	4655      	mov	r5, sl
 8009d86:	469b      	mov	fp, r3
 8009d88:	45b1      	cmp	r9, r6
 8009d8a:	d337      	bcc.n	8009dfc <__gethex+0x1d0>
 8009d8c:	f845 bb04 	str.w	fp, [r5], #4
 8009d90:	eba5 050a 	sub.w	r5, r5, sl
 8009d94:	10ad      	asrs	r5, r5, #2
 8009d96:	6125      	str	r5, [r4, #16]
 8009d98:	4658      	mov	r0, fp
 8009d9a:	f000 fbd3 	bl	800a544 <__hi0bits>
 8009d9e:	016d      	lsls	r5, r5, #5
 8009da0:	f8d8 6000 	ldr.w	r6, [r8]
 8009da4:	1a2d      	subs	r5, r5, r0
 8009da6:	42b5      	cmp	r5, r6
 8009da8:	dd54      	ble.n	8009e54 <__gethex+0x228>
 8009daa:	1bad      	subs	r5, r5, r6
 8009dac:	4629      	mov	r1, r5
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 ff5f 	bl	800ac72 <__any_on>
 8009db4:	4681      	mov	r9, r0
 8009db6:	b178      	cbz	r0, 8009dd8 <__gethex+0x1ac>
 8009db8:	1e6b      	subs	r3, r5, #1
 8009dba:	1159      	asrs	r1, r3, #5
 8009dbc:	f003 021f 	and.w	r2, r3, #31
 8009dc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009dc4:	f04f 0901 	mov.w	r9, #1
 8009dc8:	fa09 f202 	lsl.w	r2, r9, r2
 8009dcc:	420a      	tst	r2, r1
 8009dce:	d003      	beq.n	8009dd8 <__gethex+0x1ac>
 8009dd0:	454b      	cmp	r3, r9
 8009dd2:	dc36      	bgt.n	8009e42 <__gethex+0x216>
 8009dd4:	f04f 0902 	mov.w	r9, #2
 8009dd8:	4629      	mov	r1, r5
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f7ff febe 	bl	8009b5c <rshift>
 8009de0:	442f      	add	r7, r5
 8009de2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009de6:	42bb      	cmp	r3, r7
 8009de8:	da42      	bge.n	8009e70 <__gethex+0x244>
 8009dea:	9801      	ldr	r0, [sp, #4]
 8009dec:	4621      	mov	r1, r4
 8009dee:	f000 faf7 	bl	800a3e0 <_Bfree>
 8009df2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009df4:	2300      	movs	r3, #0
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	25a3      	movs	r5, #163	@ 0xa3
 8009dfa:	e793      	b.n	8009d24 <__gethex+0xf8>
 8009dfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e00:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e02:	d012      	beq.n	8009e2a <__gethex+0x1fe>
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d104      	bne.n	8009e12 <__gethex+0x1e6>
 8009e08:	f845 bb04 	str.w	fp, [r5], #4
 8009e0c:	f04f 0b00 	mov.w	fp, #0
 8009e10:	465b      	mov	r3, fp
 8009e12:	7830      	ldrb	r0, [r6, #0]
 8009e14:	9303      	str	r3, [sp, #12]
 8009e16:	f7ff fef3 	bl	8009c00 <__hexdig_fun>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	f000 000f 	and.w	r0, r0, #15
 8009e20:	4098      	lsls	r0, r3
 8009e22:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e26:	3304      	adds	r3, #4
 8009e28:	e7ae      	b.n	8009d88 <__gethex+0x15c>
 8009e2a:	45b1      	cmp	r9, r6
 8009e2c:	d8ea      	bhi.n	8009e04 <__gethex+0x1d8>
 8009e2e:	492b      	ldr	r1, [pc, #172]	@ (8009edc <__gethex+0x2b0>)
 8009e30:	9303      	str	r3, [sp, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7fe fed0 	bl	8008bda <strncmp>
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d1e1      	bne.n	8009e04 <__gethex+0x1d8>
 8009e40:	e7a2      	b.n	8009d88 <__gethex+0x15c>
 8009e42:	1ea9      	subs	r1, r5, #2
 8009e44:	4620      	mov	r0, r4
 8009e46:	f000 ff14 	bl	800ac72 <__any_on>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d0c2      	beq.n	8009dd4 <__gethex+0x1a8>
 8009e4e:	f04f 0903 	mov.w	r9, #3
 8009e52:	e7c1      	b.n	8009dd8 <__gethex+0x1ac>
 8009e54:	da09      	bge.n	8009e6a <__gethex+0x23e>
 8009e56:	1b75      	subs	r5, r6, r5
 8009e58:	4621      	mov	r1, r4
 8009e5a:	9801      	ldr	r0, [sp, #4]
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	f000 fccf 	bl	800a800 <__lshift>
 8009e62:	1b7f      	subs	r7, r7, r5
 8009e64:	4604      	mov	r4, r0
 8009e66:	f100 0a14 	add.w	sl, r0, #20
 8009e6a:	f04f 0900 	mov.w	r9, #0
 8009e6e:	e7b8      	b.n	8009de2 <__gethex+0x1b6>
 8009e70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e74:	42bd      	cmp	r5, r7
 8009e76:	dd6f      	ble.n	8009f58 <__gethex+0x32c>
 8009e78:	1bed      	subs	r5, r5, r7
 8009e7a:	42ae      	cmp	r6, r5
 8009e7c:	dc34      	bgt.n	8009ee8 <__gethex+0x2bc>
 8009e7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d022      	beq.n	8009ecc <__gethex+0x2a0>
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d024      	beq.n	8009ed4 <__gethex+0x2a8>
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d115      	bne.n	8009eba <__gethex+0x28e>
 8009e8e:	42ae      	cmp	r6, r5
 8009e90:	d113      	bne.n	8009eba <__gethex+0x28e>
 8009e92:	2e01      	cmp	r6, #1
 8009e94:	d10b      	bne.n	8009eae <__gethex+0x282>
 8009e96:	9a02      	ldr	r2, [sp, #8]
 8009e98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	6123      	str	r3, [r4, #16]
 8009ea2:	f8ca 3000 	str.w	r3, [sl]
 8009ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea8:	2562      	movs	r5, #98	@ 0x62
 8009eaa:	601c      	str	r4, [r3, #0]
 8009eac:	e73a      	b.n	8009d24 <__gethex+0xf8>
 8009eae:	1e71      	subs	r1, r6, #1
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 fede 	bl	800ac72 <__any_on>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d1ed      	bne.n	8009e96 <__gethex+0x26a>
 8009eba:	9801      	ldr	r0, [sp, #4]
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	f000 fa8f 	bl	800a3e0 <_Bfree>
 8009ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	2550      	movs	r5, #80	@ 0x50
 8009eca:	e72b      	b.n	8009d24 <__gethex+0xf8>
 8009ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f3      	bne.n	8009eba <__gethex+0x28e>
 8009ed2:	e7e0      	b.n	8009e96 <__gethex+0x26a>
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1dd      	bne.n	8009e96 <__gethex+0x26a>
 8009eda:	e7ee      	b.n	8009eba <__gethex+0x28e>
 8009edc:	0800b9ec 	.word	0x0800b9ec
 8009ee0:	0800bb3c 	.word	0x0800bb3c
 8009ee4:	0800bb4d 	.word	0x0800bb4d
 8009ee8:	1e6f      	subs	r7, r5, #1
 8009eea:	f1b9 0f00 	cmp.w	r9, #0
 8009eee:	d130      	bne.n	8009f52 <__gethex+0x326>
 8009ef0:	b127      	cbz	r7, 8009efc <__gethex+0x2d0>
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 febc 	bl	800ac72 <__any_on>
 8009efa:	4681      	mov	r9, r0
 8009efc:	117a      	asrs	r2, r7, #5
 8009efe:	2301      	movs	r3, #1
 8009f00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f04:	f007 071f 	and.w	r7, r7, #31
 8009f08:	40bb      	lsls	r3, r7
 8009f0a:	4213      	tst	r3, r2
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	bf18      	it	ne
 8009f12:	f049 0902 	orrne.w	r9, r9, #2
 8009f16:	f7ff fe21 	bl	8009b5c <rshift>
 8009f1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f1e:	1b76      	subs	r6, r6, r5
 8009f20:	2502      	movs	r5, #2
 8009f22:	f1b9 0f00 	cmp.w	r9, #0
 8009f26:	d047      	beq.n	8009fb8 <__gethex+0x38c>
 8009f28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d015      	beq.n	8009f5c <__gethex+0x330>
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d017      	beq.n	8009f64 <__gethex+0x338>
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d109      	bne.n	8009f4c <__gethex+0x320>
 8009f38:	f019 0f02 	tst.w	r9, #2
 8009f3c:	d006      	beq.n	8009f4c <__gethex+0x320>
 8009f3e:	f8da 3000 	ldr.w	r3, [sl]
 8009f42:	ea49 0903 	orr.w	r9, r9, r3
 8009f46:	f019 0f01 	tst.w	r9, #1
 8009f4a:	d10e      	bne.n	8009f6a <__gethex+0x33e>
 8009f4c:	f045 0510 	orr.w	r5, r5, #16
 8009f50:	e032      	b.n	8009fb8 <__gethex+0x38c>
 8009f52:	f04f 0901 	mov.w	r9, #1
 8009f56:	e7d1      	b.n	8009efc <__gethex+0x2d0>
 8009f58:	2501      	movs	r5, #1
 8009f5a:	e7e2      	b.n	8009f22 <__gethex+0x2f6>
 8009f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5e:	f1c3 0301 	rsb	r3, r3, #1
 8009f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0f0      	beq.n	8009f4c <__gethex+0x320>
 8009f6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f6e:	f104 0314 	add.w	r3, r4, #20
 8009f72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f7a:	f04f 0c00 	mov.w	ip, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f88:	d01b      	beq.n	8009fc2 <__gethex+0x396>
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	6002      	str	r2, [r0, #0]
 8009f8e:	2d02      	cmp	r5, #2
 8009f90:	f104 0314 	add.w	r3, r4, #20
 8009f94:	d13c      	bne.n	800a010 <__gethex+0x3e4>
 8009f96:	f8d8 2000 	ldr.w	r2, [r8]
 8009f9a:	3a01      	subs	r2, #1
 8009f9c:	42b2      	cmp	r2, r6
 8009f9e:	d109      	bne.n	8009fb4 <__gethex+0x388>
 8009fa0:	1171      	asrs	r1, r6, #5
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fa8:	f006 061f 	and.w	r6, r6, #31
 8009fac:	fa02 f606 	lsl.w	r6, r2, r6
 8009fb0:	421e      	tst	r6, r3
 8009fb2:	d13a      	bne.n	800a02a <__gethex+0x3fe>
 8009fb4:	f045 0520 	orr.w	r5, r5, #32
 8009fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fba:	601c      	str	r4, [r3, #0]
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	601f      	str	r7, [r3, #0]
 8009fc0:	e6b0      	b.n	8009d24 <__gethex+0xf8>
 8009fc2:	4299      	cmp	r1, r3
 8009fc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009fc8:	d8d9      	bhi.n	8009f7e <__gethex+0x352>
 8009fca:	68a3      	ldr	r3, [r4, #8]
 8009fcc:	459b      	cmp	fp, r3
 8009fce:	db17      	blt.n	800a000 <__gethex+0x3d4>
 8009fd0:	6861      	ldr	r1, [r4, #4]
 8009fd2:	9801      	ldr	r0, [sp, #4]
 8009fd4:	3101      	adds	r1, #1
 8009fd6:	f000 f9c3 	bl	800a360 <_Balloc>
 8009fda:	4681      	mov	r9, r0
 8009fdc:	b918      	cbnz	r0, 8009fe6 <__gethex+0x3ba>
 8009fde:	4b1a      	ldr	r3, [pc, #104]	@ (800a048 <__gethex+0x41c>)
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	2184      	movs	r1, #132	@ 0x84
 8009fe4:	e6c5      	b.n	8009d72 <__gethex+0x146>
 8009fe6:	6922      	ldr	r2, [r4, #16]
 8009fe8:	3202      	adds	r2, #2
 8009fea:	f104 010c 	add.w	r1, r4, #12
 8009fee:	0092      	lsls	r2, r2, #2
 8009ff0:	300c      	adds	r0, #12
 8009ff2:	f7fe fed8 	bl	8008da6 <memcpy>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	9801      	ldr	r0, [sp, #4]
 8009ffa:	f000 f9f1 	bl	800a3e0 <_Bfree>
 8009ffe:	464c      	mov	r4, r9
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a008:	6122      	str	r2, [r4, #16]
 800a00a:	2201      	movs	r2, #1
 800a00c:	615a      	str	r2, [r3, #20]
 800a00e:	e7be      	b.n	8009f8e <__gethex+0x362>
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	455a      	cmp	r2, fp
 800a014:	dd0b      	ble.n	800a02e <__gethex+0x402>
 800a016:	2101      	movs	r1, #1
 800a018:	4620      	mov	r0, r4
 800a01a:	f7ff fd9f 	bl	8009b5c <rshift>
 800a01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a022:	3701      	adds	r7, #1
 800a024:	42bb      	cmp	r3, r7
 800a026:	f6ff aee0 	blt.w	8009dea <__gethex+0x1be>
 800a02a:	2501      	movs	r5, #1
 800a02c:	e7c2      	b.n	8009fb4 <__gethex+0x388>
 800a02e:	f016 061f 	ands.w	r6, r6, #31
 800a032:	d0fa      	beq.n	800a02a <__gethex+0x3fe>
 800a034:	4453      	add	r3, sl
 800a036:	f1c6 0620 	rsb	r6, r6, #32
 800a03a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a03e:	f000 fa81 	bl	800a544 <__hi0bits>
 800a042:	42b0      	cmp	r0, r6
 800a044:	dbe7      	blt.n	800a016 <__gethex+0x3ea>
 800a046:	e7f0      	b.n	800a02a <__gethex+0x3fe>
 800a048:	0800bb3c 	.word	0x0800bb3c

0800a04c <L_shift>:
 800a04c:	f1c2 0208 	rsb	r2, r2, #8
 800a050:	0092      	lsls	r2, r2, #2
 800a052:	b570      	push	{r4, r5, r6, lr}
 800a054:	f1c2 0620 	rsb	r6, r2, #32
 800a058:	6843      	ldr	r3, [r0, #4]
 800a05a:	6804      	ldr	r4, [r0, #0]
 800a05c:	fa03 f506 	lsl.w	r5, r3, r6
 800a060:	432c      	orrs	r4, r5
 800a062:	40d3      	lsrs	r3, r2
 800a064:	6004      	str	r4, [r0, #0]
 800a066:	f840 3f04 	str.w	r3, [r0, #4]!
 800a06a:	4288      	cmp	r0, r1
 800a06c:	d3f4      	bcc.n	800a058 <L_shift+0xc>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}

0800a070 <__match>:
 800a070:	b530      	push	{r4, r5, lr}
 800a072:	6803      	ldr	r3, [r0, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07a:	b914      	cbnz	r4, 800a082 <__match+0x12>
 800a07c:	6003      	str	r3, [r0, #0]
 800a07e:	2001      	movs	r0, #1
 800a080:	bd30      	pop	{r4, r5, pc}
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a08a:	2d19      	cmp	r5, #25
 800a08c:	bf98      	it	ls
 800a08e:	3220      	addls	r2, #32
 800a090:	42a2      	cmp	r2, r4
 800a092:	d0f0      	beq.n	800a076 <__match+0x6>
 800a094:	2000      	movs	r0, #0
 800a096:	e7f3      	b.n	800a080 <__match+0x10>

0800a098 <__hexnan>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	680b      	ldr	r3, [r1, #0]
 800a09e:	6801      	ldr	r1, [r0, #0]
 800a0a0:	115e      	asrs	r6, r3, #5
 800a0a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0a6:	f013 031f 	ands.w	r3, r3, #31
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	bf18      	it	ne
 800a0ae:	3604      	addne	r6, #4
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	1f37      	subs	r7, r6, #4
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	4690      	mov	r8, r2
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0be:	46b9      	mov	r9, r7
 800a0c0:	463c      	mov	r4, r7
 800a0c2:	9502      	str	r5, [sp, #8]
 800a0c4:	46ab      	mov	fp, r5
 800a0c6:	784a      	ldrb	r2, [r1, #1]
 800a0c8:	1c4b      	adds	r3, r1, #1
 800a0ca:	9303      	str	r3, [sp, #12]
 800a0cc:	b342      	cbz	r2, 800a120 <__hexnan+0x88>
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	9105      	str	r1, [sp, #20]
 800a0d2:	9204      	str	r2, [sp, #16]
 800a0d4:	f7ff fd94 	bl	8009c00 <__hexdig_fun>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d151      	bne.n	800a180 <__hexnan+0xe8>
 800a0dc:	9a04      	ldr	r2, [sp, #16]
 800a0de:	9905      	ldr	r1, [sp, #20]
 800a0e0:	2a20      	cmp	r2, #32
 800a0e2:	d818      	bhi.n	800a116 <__hexnan+0x7e>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	459b      	cmp	fp, r3
 800a0e8:	dd13      	ble.n	800a112 <__hexnan+0x7a>
 800a0ea:	454c      	cmp	r4, r9
 800a0ec:	d206      	bcs.n	800a0fc <__hexnan+0x64>
 800a0ee:	2d07      	cmp	r5, #7
 800a0f0:	dc04      	bgt.n	800a0fc <__hexnan+0x64>
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff ffa8 	bl	800a04c <L_shift>
 800a0fc:	4544      	cmp	r4, r8
 800a0fe:	d952      	bls.n	800a1a6 <__hexnan+0x10e>
 800a100:	2300      	movs	r3, #0
 800a102:	f1a4 0904 	sub.w	r9, r4, #4
 800a106:	f844 3c04 	str.w	r3, [r4, #-4]
 800a10a:	f8cd b008 	str.w	fp, [sp, #8]
 800a10e:	464c      	mov	r4, r9
 800a110:	461d      	mov	r5, r3
 800a112:	9903      	ldr	r1, [sp, #12]
 800a114:	e7d7      	b.n	800a0c6 <__hexnan+0x2e>
 800a116:	2a29      	cmp	r2, #41	@ 0x29
 800a118:	d157      	bne.n	800a1ca <__hexnan+0x132>
 800a11a:	3102      	adds	r1, #2
 800a11c:	f8ca 1000 	str.w	r1, [sl]
 800a120:	f1bb 0f00 	cmp.w	fp, #0
 800a124:	d051      	beq.n	800a1ca <__hexnan+0x132>
 800a126:	454c      	cmp	r4, r9
 800a128:	d206      	bcs.n	800a138 <__hexnan+0xa0>
 800a12a:	2d07      	cmp	r5, #7
 800a12c:	dc04      	bgt.n	800a138 <__hexnan+0xa0>
 800a12e:	462a      	mov	r2, r5
 800a130:	4649      	mov	r1, r9
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff ff8a 	bl	800a04c <L_shift>
 800a138:	4544      	cmp	r4, r8
 800a13a:	d936      	bls.n	800a1aa <__hexnan+0x112>
 800a13c:	f1a8 0204 	sub.w	r2, r8, #4
 800a140:	4623      	mov	r3, r4
 800a142:	f853 1b04 	ldr.w	r1, [r3], #4
 800a146:	f842 1f04 	str.w	r1, [r2, #4]!
 800a14a:	429f      	cmp	r7, r3
 800a14c:	d2f9      	bcs.n	800a142 <__hexnan+0xaa>
 800a14e:	1b3b      	subs	r3, r7, r4
 800a150:	f023 0303 	bic.w	r3, r3, #3
 800a154:	3304      	adds	r3, #4
 800a156:	3401      	adds	r4, #1
 800a158:	3e03      	subs	r6, #3
 800a15a:	42b4      	cmp	r4, r6
 800a15c:	bf88      	it	hi
 800a15e:	2304      	movhi	r3, #4
 800a160:	4443      	add	r3, r8
 800a162:	2200      	movs	r2, #0
 800a164:	f843 2b04 	str.w	r2, [r3], #4
 800a168:	429f      	cmp	r7, r3
 800a16a:	d2fb      	bcs.n	800a164 <__hexnan+0xcc>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	b91b      	cbnz	r3, 800a178 <__hexnan+0xe0>
 800a170:	4547      	cmp	r7, r8
 800a172:	d128      	bne.n	800a1c6 <__hexnan+0x12e>
 800a174:	2301      	movs	r3, #1
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	2005      	movs	r0, #5
 800a17a:	b007      	add	sp, #28
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a180:	3501      	adds	r5, #1
 800a182:	2d08      	cmp	r5, #8
 800a184:	f10b 0b01 	add.w	fp, fp, #1
 800a188:	dd06      	ble.n	800a198 <__hexnan+0x100>
 800a18a:	4544      	cmp	r4, r8
 800a18c:	d9c1      	bls.n	800a112 <__hexnan+0x7a>
 800a18e:	2300      	movs	r3, #0
 800a190:	f844 3c04 	str.w	r3, [r4, #-4]
 800a194:	2501      	movs	r5, #1
 800a196:	3c04      	subs	r4, #4
 800a198:	6822      	ldr	r2, [r4, #0]
 800a19a:	f000 000f 	and.w	r0, r0, #15
 800a19e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1a2:	6020      	str	r0, [r4, #0]
 800a1a4:	e7b5      	b.n	800a112 <__hexnan+0x7a>
 800a1a6:	2508      	movs	r5, #8
 800a1a8:	e7b3      	b.n	800a112 <__hexnan+0x7a>
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0dd      	beq.n	800a16c <__hexnan+0xd4>
 800a1b0:	f1c3 0320 	rsb	r3, r3, #32
 800a1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b8:	40da      	lsrs	r2, r3
 800a1ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1c4:	e7d2      	b.n	800a16c <__hexnan+0xd4>
 800a1c6:	3f04      	subs	r7, #4
 800a1c8:	e7d0      	b.n	800a16c <__hexnan+0xd4>
 800a1ca:	2004      	movs	r0, #4
 800a1cc:	e7d5      	b.n	800a17a <__hexnan+0xe2>
	...

0800a1d0 <malloc>:
 800a1d0:	4b02      	ldr	r3, [pc, #8]	@ (800a1dc <malloc+0xc>)
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	6818      	ldr	r0, [r3, #0]
 800a1d6:	f000 b825 	b.w	800a224 <_malloc_r>
 800a1da:	bf00      	nop
 800a1dc:	200001d4 	.word	0x200001d4

0800a1e0 <sbrk_aligned>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4e0f      	ldr	r6, [pc, #60]	@ (800a220 <sbrk_aligned+0x40>)
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	6831      	ldr	r1, [r6, #0]
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	b911      	cbnz	r1, 800a1f2 <sbrk_aligned+0x12>
 800a1ec:	f000 ff9e 	bl	800b12c <_sbrk_r>
 800a1f0:	6030      	str	r0, [r6, #0]
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f000 ff99 	bl	800b12c <_sbrk_r>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d103      	bne.n	800a206 <sbrk_aligned+0x26>
 800a1fe:	f04f 34ff 	mov.w	r4, #4294967295
 800a202:	4620      	mov	r0, r4
 800a204:	bd70      	pop	{r4, r5, r6, pc}
 800a206:	1cc4      	adds	r4, r0, #3
 800a208:	f024 0403 	bic.w	r4, r4, #3
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d0f8      	beq.n	800a202 <sbrk_aligned+0x22>
 800a210:	1a21      	subs	r1, r4, r0
 800a212:	4628      	mov	r0, r5
 800a214:	f000 ff8a 	bl	800b12c <_sbrk_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	d1f2      	bne.n	800a202 <sbrk_aligned+0x22>
 800a21c:	e7ef      	b.n	800a1fe <sbrk_aligned+0x1e>
 800a21e:	bf00      	nop
 800a220:	2000083c 	.word	0x2000083c

0800a224 <_malloc_r>:
 800a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a228:	1ccd      	adds	r5, r1, #3
 800a22a:	f025 0503 	bic.w	r5, r5, #3
 800a22e:	3508      	adds	r5, #8
 800a230:	2d0c      	cmp	r5, #12
 800a232:	bf38      	it	cc
 800a234:	250c      	movcc	r5, #12
 800a236:	2d00      	cmp	r5, #0
 800a238:	4606      	mov	r6, r0
 800a23a:	db01      	blt.n	800a240 <_malloc_r+0x1c>
 800a23c:	42a9      	cmp	r1, r5
 800a23e:	d904      	bls.n	800a24a <_malloc_r+0x26>
 800a240:	230c      	movs	r3, #12
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	2000      	movs	r0, #0
 800a246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a320 <_malloc_r+0xfc>
 800a24e:	f000 f87b 	bl	800a348 <__malloc_lock>
 800a252:	f8d8 3000 	ldr.w	r3, [r8]
 800a256:	461c      	mov	r4, r3
 800a258:	bb44      	cbnz	r4, 800a2ac <_malloc_r+0x88>
 800a25a:	4629      	mov	r1, r5
 800a25c:	4630      	mov	r0, r6
 800a25e:	f7ff ffbf 	bl	800a1e0 <sbrk_aligned>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	4604      	mov	r4, r0
 800a266:	d158      	bne.n	800a31a <_malloc_r+0xf6>
 800a268:	f8d8 4000 	ldr.w	r4, [r8]
 800a26c:	4627      	mov	r7, r4
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d143      	bne.n	800a2fa <_malloc_r+0xd6>
 800a272:	2c00      	cmp	r4, #0
 800a274:	d04b      	beq.n	800a30e <_malloc_r+0xea>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	4639      	mov	r1, r7
 800a27a:	4630      	mov	r0, r6
 800a27c:	eb04 0903 	add.w	r9, r4, r3
 800a280:	f000 ff54 	bl	800b12c <_sbrk_r>
 800a284:	4581      	cmp	r9, r0
 800a286:	d142      	bne.n	800a30e <_malloc_r+0xea>
 800a288:	6821      	ldr	r1, [r4, #0]
 800a28a:	1a6d      	subs	r5, r5, r1
 800a28c:	4629      	mov	r1, r5
 800a28e:	4630      	mov	r0, r6
 800a290:	f7ff ffa6 	bl	800a1e0 <sbrk_aligned>
 800a294:	3001      	adds	r0, #1
 800a296:	d03a      	beq.n	800a30e <_malloc_r+0xea>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	442b      	add	r3, r5
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	bb62      	cbnz	r2, 800a300 <_malloc_r+0xdc>
 800a2a6:	f8c8 7000 	str.w	r7, [r8]
 800a2aa:	e00f      	b.n	800a2cc <_malloc_r+0xa8>
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	1b52      	subs	r2, r2, r5
 800a2b0:	d420      	bmi.n	800a2f4 <_malloc_r+0xd0>
 800a2b2:	2a0b      	cmp	r2, #11
 800a2b4:	d917      	bls.n	800a2e6 <_malloc_r+0xc2>
 800a2b6:	1961      	adds	r1, r4, r5
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	6025      	str	r5, [r4, #0]
 800a2bc:	bf18      	it	ne
 800a2be:	6059      	strne	r1, [r3, #4]
 800a2c0:	6863      	ldr	r3, [r4, #4]
 800a2c2:	bf08      	it	eq
 800a2c4:	f8c8 1000 	streq.w	r1, [r8]
 800a2c8:	5162      	str	r2, [r4, r5]
 800a2ca:	604b      	str	r3, [r1, #4]
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f000 f841 	bl	800a354 <__malloc_unlock>
 800a2d2:	f104 000b 	add.w	r0, r4, #11
 800a2d6:	1d23      	adds	r3, r4, #4
 800a2d8:	f020 0007 	bic.w	r0, r0, #7
 800a2dc:	1ac2      	subs	r2, r0, r3
 800a2de:	bf1c      	itt	ne
 800a2e0:	1a1b      	subne	r3, r3, r0
 800a2e2:	50a3      	strne	r3, [r4, r2]
 800a2e4:	e7af      	b.n	800a246 <_malloc_r+0x22>
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	bf0c      	ite	eq
 800a2ec:	f8c8 2000 	streq.w	r2, [r8]
 800a2f0:	605a      	strne	r2, [r3, #4]
 800a2f2:	e7eb      	b.n	800a2cc <_malloc_r+0xa8>
 800a2f4:	4623      	mov	r3, r4
 800a2f6:	6864      	ldr	r4, [r4, #4]
 800a2f8:	e7ae      	b.n	800a258 <_malloc_r+0x34>
 800a2fa:	463c      	mov	r4, r7
 800a2fc:	687f      	ldr	r7, [r7, #4]
 800a2fe:	e7b6      	b.n	800a26e <_malloc_r+0x4a>
 800a300:	461a      	mov	r2, r3
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	42a3      	cmp	r3, r4
 800a306:	d1fb      	bne.n	800a300 <_malloc_r+0xdc>
 800a308:	2300      	movs	r3, #0
 800a30a:	6053      	str	r3, [r2, #4]
 800a30c:	e7de      	b.n	800a2cc <_malloc_r+0xa8>
 800a30e:	230c      	movs	r3, #12
 800a310:	6033      	str	r3, [r6, #0]
 800a312:	4630      	mov	r0, r6
 800a314:	f000 f81e 	bl	800a354 <__malloc_unlock>
 800a318:	e794      	b.n	800a244 <_malloc_r+0x20>
 800a31a:	6005      	str	r5, [r0, #0]
 800a31c:	e7d6      	b.n	800a2cc <_malloc_r+0xa8>
 800a31e:	bf00      	nop
 800a320:	20000840 	.word	0x20000840

0800a324 <__ascii_mbtowc>:
 800a324:	b082      	sub	sp, #8
 800a326:	b901      	cbnz	r1, 800a32a <__ascii_mbtowc+0x6>
 800a328:	a901      	add	r1, sp, #4
 800a32a:	b142      	cbz	r2, 800a33e <__ascii_mbtowc+0x1a>
 800a32c:	b14b      	cbz	r3, 800a342 <__ascii_mbtowc+0x1e>
 800a32e:	7813      	ldrb	r3, [r2, #0]
 800a330:	600b      	str	r3, [r1, #0]
 800a332:	7812      	ldrb	r2, [r2, #0]
 800a334:	1e10      	subs	r0, r2, #0
 800a336:	bf18      	it	ne
 800a338:	2001      	movne	r0, #1
 800a33a:	b002      	add	sp, #8
 800a33c:	4770      	bx	lr
 800a33e:	4610      	mov	r0, r2
 800a340:	e7fb      	b.n	800a33a <__ascii_mbtowc+0x16>
 800a342:	f06f 0001 	mvn.w	r0, #1
 800a346:	e7f8      	b.n	800a33a <__ascii_mbtowc+0x16>

0800a348 <__malloc_lock>:
 800a348:	4801      	ldr	r0, [pc, #4]	@ (800a350 <__malloc_lock+0x8>)
 800a34a:	f7fe bd2a 	b.w	8008da2 <__retarget_lock_acquire_recursive>
 800a34e:	bf00      	nop
 800a350:	20000838 	.word	0x20000838

0800a354 <__malloc_unlock>:
 800a354:	4801      	ldr	r0, [pc, #4]	@ (800a35c <__malloc_unlock+0x8>)
 800a356:	f7fe bd25 	b.w	8008da4 <__retarget_lock_release_recursive>
 800a35a:	bf00      	nop
 800a35c:	20000838 	.word	0x20000838

0800a360 <_Balloc>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	69c6      	ldr	r6, [r0, #28]
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	b976      	cbnz	r6, 800a388 <_Balloc+0x28>
 800a36a:	2010      	movs	r0, #16
 800a36c:	f7ff ff30 	bl	800a1d0 <malloc>
 800a370:	4602      	mov	r2, r0
 800a372:	61e0      	str	r0, [r4, #28]
 800a374:	b920      	cbnz	r0, 800a380 <_Balloc+0x20>
 800a376:	4b18      	ldr	r3, [pc, #96]	@ (800a3d8 <_Balloc+0x78>)
 800a378:	4818      	ldr	r0, [pc, #96]	@ (800a3dc <_Balloc+0x7c>)
 800a37a:	216b      	movs	r1, #107	@ 0x6b
 800a37c:	f7fe fd2c 	bl	8008dd8 <__assert_func>
 800a380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a384:	6006      	str	r6, [r0, #0]
 800a386:	60c6      	str	r6, [r0, #12]
 800a388:	69e6      	ldr	r6, [r4, #28]
 800a38a:	68f3      	ldr	r3, [r6, #12]
 800a38c:	b183      	cbz	r3, 800a3b0 <_Balloc+0x50>
 800a38e:	69e3      	ldr	r3, [r4, #28]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a396:	b9b8      	cbnz	r0, 800a3c8 <_Balloc+0x68>
 800a398:	2101      	movs	r1, #1
 800a39a:	fa01 f605 	lsl.w	r6, r1, r5
 800a39e:	1d72      	adds	r2, r6, #5
 800a3a0:	0092      	lsls	r2, r2, #2
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fed9 	bl	800b15a <_calloc_r>
 800a3a8:	b160      	cbz	r0, 800a3c4 <_Balloc+0x64>
 800a3aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3ae:	e00e      	b.n	800a3ce <_Balloc+0x6e>
 800a3b0:	2221      	movs	r2, #33	@ 0x21
 800a3b2:	2104      	movs	r1, #4
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 fed0 	bl	800b15a <_calloc_r>
 800a3ba:	69e3      	ldr	r3, [r4, #28]
 800a3bc:	60f0      	str	r0, [r6, #12]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e4      	bne.n	800a38e <_Balloc+0x2e>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	6802      	ldr	r2, [r0, #0]
 800a3ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3d4:	e7f7      	b.n	800a3c6 <_Balloc+0x66>
 800a3d6:	bf00      	nop
 800a3d8:	0800ba22 	.word	0x0800ba22
 800a3dc:	0800bbad 	.word	0x0800bbad

0800a3e0 <_Bfree>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	69c6      	ldr	r6, [r0, #28]
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	b976      	cbnz	r6, 800a408 <_Bfree+0x28>
 800a3ea:	2010      	movs	r0, #16
 800a3ec:	f7ff fef0 	bl	800a1d0 <malloc>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	61e8      	str	r0, [r5, #28]
 800a3f4:	b920      	cbnz	r0, 800a400 <_Bfree+0x20>
 800a3f6:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <_Bfree+0x3c>)
 800a3f8:	4809      	ldr	r0, [pc, #36]	@ (800a420 <_Bfree+0x40>)
 800a3fa:	218f      	movs	r1, #143	@ 0x8f
 800a3fc:	f7fe fcec 	bl	8008dd8 <__assert_func>
 800a400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a404:	6006      	str	r6, [r0, #0]
 800a406:	60c6      	str	r6, [r0, #12]
 800a408:	b13c      	cbz	r4, 800a41a <_Bfree+0x3a>
 800a40a:	69eb      	ldr	r3, [r5, #28]
 800a40c:	6862      	ldr	r2, [r4, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a414:	6021      	str	r1, [r4, #0]
 800a416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	0800ba22 	.word	0x0800ba22
 800a420:	0800bbad 	.word	0x0800bbad

0800a424 <__multadd>:
 800a424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a428:	690d      	ldr	r5, [r1, #16]
 800a42a:	4607      	mov	r7, r0
 800a42c:	460c      	mov	r4, r1
 800a42e:	461e      	mov	r6, r3
 800a430:	f101 0c14 	add.w	ip, r1, #20
 800a434:	2000      	movs	r0, #0
 800a436:	f8dc 3000 	ldr.w	r3, [ip]
 800a43a:	b299      	uxth	r1, r3
 800a43c:	fb02 6101 	mla	r1, r2, r1, r6
 800a440:	0c1e      	lsrs	r6, r3, #16
 800a442:	0c0b      	lsrs	r3, r1, #16
 800a444:	fb02 3306 	mla	r3, r2, r6, r3
 800a448:	b289      	uxth	r1, r1
 800a44a:	3001      	adds	r0, #1
 800a44c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a450:	4285      	cmp	r5, r0
 800a452:	f84c 1b04 	str.w	r1, [ip], #4
 800a456:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a45a:	dcec      	bgt.n	800a436 <__multadd+0x12>
 800a45c:	b30e      	cbz	r6, 800a4a2 <__multadd+0x7e>
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	42ab      	cmp	r3, r5
 800a462:	dc19      	bgt.n	800a498 <__multadd+0x74>
 800a464:	6861      	ldr	r1, [r4, #4]
 800a466:	4638      	mov	r0, r7
 800a468:	3101      	adds	r1, #1
 800a46a:	f7ff ff79 	bl	800a360 <_Balloc>
 800a46e:	4680      	mov	r8, r0
 800a470:	b928      	cbnz	r0, 800a47e <__multadd+0x5a>
 800a472:	4602      	mov	r2, r0
 800a474:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <__multadd+0x84>)
 800a476:	480d      	ldr	r0, [pc, #52]	@ (800a4ac <__multadd+0x88>)
 800a478:	21ba      	movs	r1, #186	@ 0xba
 800a47a:	f7fe fcad 	bl	8008dd8 <__assert_func>
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	3202      	adds	r2, #2
 800a482:	f104 010c 	add.w	r1, r4, #12
 800a486:	0092      	lsls	r2, r2, #2
 800a488:	300c      	adds	r0, #12
 800a48a:	f7fe fc8c 	bl	8008da6 <memcpy>
 800a48e:	4621      	mov	r1, r4
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff ffa5 	bl	800a3e0 <_Bfree>
 800a496:	4644      	mov	r4, r8
 800a498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a49c:	3501      	adds	r5, #1
 800a49e:	615e      	str	r6, [r3, #20]
 800a4a0:	6125      	str	r5, [r4, #16]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a8:	0800bb3c 	.word	0x0800bb3c
 800a4ac:	0800bbad 	.word	0x0800bbad

0800a4b0 <__s2b>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	4615      	mov	r5, r2
 800a4b8:	461f      	mov	r7, r3
 800a4ba:	2209      	movs	r2, #9
 800a4bc:	3308      	adds	r3, #8
 800a4be:	4606      	mov	r6, r0
 800a4c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	db09      	blt.n	800a4e0 <__s2b+0x30>
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7ff ff47 	bl	800a360 <_Balloc>
 800a4d2:	b940      	cbnz	r0, 800a4e6 <__s2b+0x36>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	4b19      	ldr	r3, [pc, #100]	@ (800a53c <__s2b+0x8c>)
 800a4d8:	4819      	ldr	r0, [pc, #100]	@ (800a540 <__s2b+0x90>)
 800a4da:	21d3      	movs	r1, #211	@ 0xd3
 800a4dc:	f7fe fc7c 	bl	8008dd8 <__assert_func>
 800a4e0:	0052      	lsls	r2, r2, #1
 800a4e2:	3101      	adds	r1, #1
 800a4e4:	e7f0      	b.n	800a4c8 <__s2b+0x18>
 800a4e6:	9b08      	ldr	r3, [sp, #32]
 800a4e8:	6143      	str	r3, [r0, #20]
 800a4ea:	2d09      	cmp	r5, #9
 800a4ec:	f04f 0301 	mov.w	r3, #1
 800a4f0:	6103      	str	r3, [r0, #16]
 800a4f2:	dd16      	ble.n	800a522 <__s2b+0x72>
 800a4f4:	f104 0909 	add.w	r9, r4, #9
 800a4f8:	46c8      	mov	r8, r9
 800a4fa:	442c      	add	r4, r5
 800a4fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a500:	4601      	mov	r1, r0
 800a502:	3b30      	subs	r3, #48	@ 0x30
 800a504:	220a      	movs	r2, #10
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ff8c 	bl	800a424 <__multadd>
 800a50c:	45a0      	cmp	r8, r4
 800a50e:	d1f5      	bne.n	800a4fc <__s2b+0x4c>
 800a510:	f1a5 0408 	sub.w	r4, r5, #8
 800a514:	444c      	add	r4, r9
 800a516:	1b2d      	subs	r5, r5, r4
 800a518:	1963      	adds	r3, r4, r5
 800a51a:	42bb      	cmp	r3, r7
 800a51c:	db04      	blt.n	800a528 <__s2b+0x78>
 800a51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a522:	340a      	adds	r4, #10
 800a524:	2509      	movs	r5, #9
 800a526:	e7f6      	b.n	800a516 <__s2b+0x66>
 800a528:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a52c:	4601      	mov	r1, r0
 800a52e:	3b30      	subs	r3, #48	@ 0x30
 800a530:	220a      	movs	r2, #10
 800a532:	4630      	mov	r0, r6
 800a534:	f7ff ff76 	bl	800a424 <__multadd>
 800a538:	e7ee      	b.n	800a518 <__s2b+0x68>
 800a53a:	bf00      	nop
 800a53c:	0800bb3c 	.word	0x0800bb3c
 800a540:	0800bbad 	.word	0x0800bbad

0800a544 <__hi0bits>:
 800a544:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a548:	4603      	mov	r3, r0
 800a54a:	bf36      	itet	cc
 800a54c:	0403      	lslcc	r3, r0, #16
 800a54e:	2000      	movcs	r0, #0
 800a550:	2010      	movcc	r0, #16
 800a552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a556:	bf3c      	itt	cc
 800a558:	021b      	lslcc	r3, r3, #8
 800a55a:	3008      	addcc	r0, #8
 800a55c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a560:	bf3c      	itt	cc
 800a562:	011b      	lslcc	r3, r3, #4
 800a564:	3004      	addcc	r0, #4
 800a566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a56a:	bf3c      	itt	cc
 800a56c:	009b      	lslcc	r3, r3, #2
 800a56e:	3002      	addcc	r0, #2
 800a570:	2b00      	cmp	r3, #0
 800a572:	db05      	blt.n	800a580 <__hi0bits+0x3c>
 800a574:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a578:	f100 0001 	add.w	r0, r0, #1
 800a57c:	bf08      	it	eq
 800a57e:	2020      	moveq	r0, #32
 800a580:	4770      	bx	lr

0800a582 <__lo0bits>:
 800a582:	6803      	ldr	r3, [r0, #0]
 800a584:	4602      	mov	r2, r0
 800a586:	f013 0007 	ands.w	r0, r3, #7
 800a58a:	d00b      	beq.n	800a5a4 <__lo0bits+0x22>
 800a58c:	07d9      	lsls	r1, r3, #31
 800a58e:	d421      	bmi.n	800a5d4 <__lo0bits+0x52>
 800a590:	0798      	lsls	r0, r3, #30
 800a592:	bf49      	itett	mi
 800a594:	085b      	lsrmi	r3, r3, #1
 800a596:	089b      	lsrpl	r3, r3, #2
 800a598:	2001      	movmi	r0, #1
 800a59a:	6013      	strmi	r3, [r2, #0]
 800a59c:	bf5c      	itt	pl
 800a59e:	6013      	strpl	r3, [r2, #0]
 800a5a0:	2002      	movpl	r0, #2
 800a5a2:	4770      	bx	lr
 800a5a4:	b299      	uxth	r1, r3
 800a5a6:	b909      	cbnz	r1, 800a5ac <__lo0bits+0x2a>
 800a5a8:	0c1b      	lsrs	r3, r3, #16
 800a5aa:	2010      	movs	r0, #16
 800a5ac:	b2d9      	uxtb	r1, r3
 800a5ae:	b909      	cbnz	r1, 800a5b4 <__lo0bits+0x32>
 800a5b0:	3008      	adds	r0, #8
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	0719      	lsls	r1, r3, #28
 800a5b6:	bf04      	itt	eq
 800a5b8:	091b      	lsreq	r3, r3, #4
 800a5ba:	3004      	addeq	r0, #4
 800a5bc:	0799      	lsls	r1, r3, #30
 800a5be:	bf04      	itt	eq
 800a5c0:	089b      	lsreq	r3, r3, #2
 800a5c2:	3002      	addeq	r0, #2
 800a5c4:	07d9      	lsls	r1, r3, #31
 800a5c6:	d403      	bmi.n	800a5d0 <__lo0bits+0x4e>
 800a5c8:	085b      	lsrs	r3, r3, #1
 800a5ca:	f100 0001 	add.w	r0, r0, #1
 800a5ce:	d003      	beq.n	800a5d8 <__lo0bits+0x56>
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	4770      	bx	lr
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	4770      	bx	lr
 800a5d8:	2020      	movs	r0, #32
 800a5da:	4770      	bx	lr

0800a5dc <__i2b>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	460c      	mov	r4, r1
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	f7ff febd 	bl	800a360 <_Balloc>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	b928      	cbnz	r0, 800a5f6 <__i2b+0x1a>
 800a5ea:	4b05      	ldr	r3, [pc, #20]	@ (800a600 <__i2b+0x24>)
 800a5ec:	4805      	ldr	r0, [pc, #20]	@ (800a604 <__i2b+0x28>)
 800a5ee:	f240 1145 	movw	r1, #325	@ 0x145
 800a5f2:	f7fe fbf1 	bl	8008dd8 <__assert_func>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	6144      	str	r4, [r0, #20]
 800a5fa:	6103      	str	r3, [r0, #16]
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	bf00      	nop
 800a600:	0800bb3c 	.word	0x0800bb3c
 800a604:	0800bbad 	.word	0x0800bbad

0800a608 <__multiply>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	4617      	mov	r7, r2
 800a60e:	690a      	ldr	r2, [r1, #16]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	429a      	cmp	r2, r3
 800a614:	bfa8      	it	ge
 800a616:	463b      	movge	r3, r7
 800a618:	4689      	mov	r9, r1
 800a61a:	bfa4      	itt	ge
 800a61c:	460f      	movge	r7, r1
 800a61e:	4699      	movge	r9, r3
 800a620:	693d      	ldr	r5, [r7, #16]
 800a622:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	eb05 060a 	add.w	r6, r5, sl
 800a62e:	42b3      	cmp	r3, r6
 800a630:	b085      	sub	sp, #20
 800a632:	bfb8      	it	lt
 800a634:	3101      	addlt	r1, #1
 800a636:	f7ff fe93 	bl	800a360 <_Balloc>
 800a63a:	b930      	cbnz	r0, 800a64a <__multiply+0x42>
 800a63c:	4602      	mov	r2, r0
 800a63e:	4b41      	ldr	r3, [pc, #260]	@ (800a744 <__multiply+0x13c>)
 800a640:	4841      	ldr	r0, [pc, #260]	@ (800a748 <__multiply+0x140>)
 800a642:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a646:	f7fe fbc7 	bl	8008dd8 <__assert_func>
 800a64a:	f100 0414 	add.w	r4, r0, #20
 800a64e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a652:	4623      	mov	r3, r4
 800a654:	2200      	movs	r2, #0
 800a656:	4573      	cmp	r3, lr
 800a658:	d320      	bcc.n	800a69c <__multiply+0x94>
 800a65a:	f107 0814 	add.w	r8, r7, #20
 800a65e:	f109 0114 	add.w	r1, r9, #20
 800a662:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a666:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a66a:	9302      	str	r3, [sp, #8]
 800a66c:	1beb      	subs	r3, r5, r7
 800a66e:	3b15      	subs	r3, #21
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	3304      	adds	r3, #4
 800a676:	3715      	adds	r7, #21
 800a678:	42bd      	cmp	r5, r7
 800a67a:	bf38      	it	cc
 800a67c:	2304      	movcc	r3, #4
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	9b02      	ldr	r3, [sp, #8]
 800a682:	9103      	str	r1, [sp, #12]
 800a684:	428b      	cmp	r3, r1
 800a686:	d80c      	bhi.n	800a6a2 <__multiply+0x9a>
 800a688:	2e00      	cmp	r6, #0
 800a68a:	dd03      	ble.n	800a694 <__multiply+0x8c>
 800a68c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a690:	2b00      	cmp	r3, #0
 800a692:	d055      	beq.n	800a740 <__multiply+0x138>
 800a694:	6106      	str	r6, [r0, #16]
 800a696:	b005      	add	sp, #20
 800a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69c:	f843 2b04 	str.w	r2, [r3], #4
 800a6a0:	e7d9      	b.n	800a656 <__multiply+0x4e>
 800a6a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6a6:	f1ba 0f00 	cmp.w	sl, #0
 800a6aa:	d01f      	beq.n	800a6ec <__multiply+0xe4>
 800a6ac:	46c4      	mov	ip, r8
 800a6ae:	46a1      	mov	r9, r4
 800a6b0:	2700      	movs	r7, #0
 800a6b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6b6:	f8d9 3000 	ldr.w	r3, [r9]
 800a6ba:	fa1f fb82 	uxth.w	fp, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6c4:	443b      	add	r3, r7
 800a6c6:	f8d9 7000 	ldr.w	r7, [r9]
 800a6ca:	0c12      	lsrs	r2, r2, #16
 800a6cc:	0c3f      	lsrs	r7, r7, #16
 800a6ce:	fb0a 7202 	mla	r2, sl, r2, r7
 800a6d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6dc:	4565      	cmp	r5, ip
 800a6de:	f849 3b04 	str.w	r3, [r9], #4
 800a6e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6e6:	d8e4      	bhi.n	800a6b2 <__multiply+0xaa>
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	50e7      	str	r7, [r4, r3]
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6f2:	3104      	adds	r1, #4
 800a6f4:	f1b9 0f00 	cmp.w	r9, #0
 800a6f8:	d020      	beq.n	800a73c <__multiply+0x134>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	4647      	mov	r7, r8
 800a6fe:	46a4      	mov	ip, r4
 800a700:	f04f 0a00 	mov.w	sl, #0
 800a704:	f8b7 b000 	ldrh.w	fp, [r7]
 800a708:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a70c:	fb09 220b 	mla	r2, r9, fp, r2
 800a710:	4452      	add	r2, sl
 800a712:	b29b      	uxth	r3, r3
 800a714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a718:	f84c 3b04 	str.w	r3, [ip], #4
 800a71c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a724:	f8bc 3000 	ldrh.w	r3, [ip]
 800a728:	fb09 330a 	mla	r3, r9, sl, r3
 800a72c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a730:	42bd      	cmp	r5, r7
 800a732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a736:	d8e5      	bhi.n	800a704 <__multiply+0xfc>
 800a738:	9a01      	ldr	r2, [sp, #4]
 800a73a:	50a3      	str	r3, [r4, r2]
 800a73c:	3404      	adds	r4, #4
 800a73e:	e79f      	b.n	800a680 <__multiply+0x78>
 800a740:	3e01      	subs	r6, #1
 800a742:	e7a1      	b.n	800a688 <__multiply+0x80>
 800a744:	0800bb3c 	.word	0x0800bb3c
 800a748:	0800bbad 	.word	0x0800bbad

0800a74c <__pow5mult>:
 800a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a750:	4615      	mov	r5, r2
 800a752:	f012 0203 	ands.w	r2, r2, #3
 800a756:	4607      	mov	r7, r0
 800a758:	460e      	mov	r6, r1
 800a75a:	d007      	beq.n	800a76c <__pow5mult+0x20>
 800a75c:	4c25      	ldr	r4, [pc, #148]	@ (800a7f4 <__pow5mult+0xa8>)
 800a75e:	3a01      	subs	r2, #1
 800a760:	2300      	movs	r3, #0
 800a762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a766:	f7ff fe5d 	bl	800a424 <__multadd>
 800a76a:	4606      	mov	r6, r0
 800a76c:	10ad      	asrs	r5, r5, #2
 800a76e:	d03d      	beq.n	800a7ec <__pow5mult+0xa0>
 800a770:	69fc      	ldr	r4, [r7, #28]
 800a772:	b97c      	cbnz	r4, 800a794 <__pow5mult+0x48>
 800a774:	2010      	movs	r0, #16
 800a776:	f7ff fd2b 	bl	800a1d0 <malloc>
 800a77a:	4602      	mov	r2, r0
 800a77c:	61f8      	str	r0, [r7, #28]
 800a77e:	b928      	cbnz	r0, 800a78c <__pow5mult+0x40>
 800a780:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f8 <__pow5mult+0xac>)
 800a782:	481e      	ldr	r0, [pc, #120]	@ (800a7fc <__pow5mult+0xb0>)
 800a784:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a788:	f7fe fb26 	bl	8008dd8 <__assert_func>
 800a78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a790:	6004      	str	r4, [r0, #0]
 800a792:	60c4      	str	r4, [r0, #12]
 800a794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a79c:	b94c      	cbnz	r4, 800a7b2 <__pow5mult+0x66>
 800a79e:	f240 2171 	movw	r1, #625	@ 0x271
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	f7ff ff1a 	bl	800a5dc <__i2b>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	f04f 0900 	mov.w	r9, #0
 800a7b6:	07eb      	lsls	r3, r5, #31
 800a7b8:	d50a      	bpl.n	800a7d0 <__pow5mult+0x84>
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f7ff ff22 	bl	800a608 <__multiply>
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4680      	mov	r8, r0
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f7ff fe09 	bl	800a3e0 <_Bfree>
 800a7ce:	4646      	mov	r6, r8
 800a7d0:	106d      	asrs	r5, r5, #1
 800a7d2:	d00b      	beq.n	800a7ec <__pow5mult+0xa0>
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	b938      	cbnz	r0, 800a7e8 <__pow5mult+0x9c>
 800a7d8:	4622      	mov	r2, r4
 800a7da:	4621      	mov	r1, r4
 800a7dc:	4638      	mov	r0, r7
 800a7de:	f7ff ff13 	bl	800a608 <__multiply>
 800a7e2:	6020      	str	r0, [r4, #0]
 800a7e4:	f8c0 9000 	str.w	r9, [r0]
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	e7e4      	b.n	800a7b6 <__pow5mult+0x6a>
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f2:	bf00      	nop
 800a7f4:	0800bc68 	.word	0x0800bc68
 800a7f8:	0800ba22 	.word	0x0800ba22
 800a7fc:	0800bbad 	.word	0x0800bbad

0800a800 <__lshift>:
 800a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	460c      	mov	r4, r1
 800a806:	6849      	ldr	r1, [r1, #4]
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	4607      	mov	r7, r0
 800a812:	4691      	mov	r9, r2
 800a814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a818:	f108 0601 	add.w	r6, r8, #1
 800a81c:	42b3      	cmp	r3, r6
 800a81e:	db0b      	blt.n	800a838 <__lshift+0x38>
 800a820:	4638      	mov	r0, r7
 800a822:	f7ff fd9d 	bl	800a360 <_Balloc>
 800a826:	4605      	mov	r5, r0
 800a828:	b948      	cbnz	r0, 800a83e <__lshift+0x3e>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b28      	ldr	r3, [pc, #160]	@ (800a8d0 <__lshift+0xd0>)
 800a82e:	4829      	ldr	r0, [pc, #164]	@ (800a8d4 <__lshift+0xd4>)
 800a830:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a834:	f7fe fad0 	bl	8008dd8 <__assert_func>
 800a838:	3101      	adds	r1, #1
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	e7ee      	b.n	800a81c <__lshift+0x1c>
 800a83e:	2300      	movs	r3, #0
 800a840:	f100 0114 	add.w	r1, r0, #20
 800a844:	f100 0210 	add.w	r2, r0, #16
 800a848:	4618      	mov	r0, r3
 800a84a:	4553      	cmp	r3, sl
 800a84c:	db33      	blt.n	800a8b6 <__lshift+0xb6>
 800a84e:	6920      	ldr	r0, [r4, #16]
 800a850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a854:	f104 0314 	add.w	r3, r4, #20
 800a858:	f019 091f 	ands.w	r9, r9, #31
 800a85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a864:	d02b      	beq.n	800a8be <__lshift+0xbe>
 800a866:	f1c9 0e20 	rsb	lr, r9, #32
 800a86a:	468a      	mov	sl, r1
 800a86c:	2200      	movs	r2, #0
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	fa00 f009 	lsl.w	r0, r0, r9
 800a874:	4310      	orrs	r0, r2
 800a876:	f84a 0b04 	str.w	r0, [sl], #4
 800a87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87e:	459c      	cmp	ip, r3
 800a880:	fa22 f20e 	lsr.w	r2, r2, lr
 800a884:	d8f3      	bhi.n	800a86e <__lshift+0x6e>
 800a886:	ebac 0304 	sub.w	r3, ip, r4
 800a88a:	3b15      	subs	r3, #21
 800a88c:	f023 0303 	bic.w	r3, r3, #3
 800a890:	3304      	adds	r3, #4
 800a892:	f104 0015 	add.w	r0, r4, #21
 800a896:	4560      	cmp	r0, ip
 800a898:	bf88      	it	hi
 800a89a:	2304      	movhi	r3, #4
 800a89c:	50ca      	str	r2, [r1, r3]
 800a89e:	b10a      	cbz	r2, 800a8a4 <__lshift+0xa4>
 800a8a0:	f108 0602 	add.w	r6, r8, #2
 800a8a4:	3e01      	subs	r6, #1
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	612e      	str	r6, [r5, #16]
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	f7ff fd98 	bl	800a3e0 <_Bfree>
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	e7c5      	b.n	800a84a <__lshift+0x4a>
 800a8be:	3904      	subs	r1, #4
 800a8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8c8:	459c      	cmp	ip, r3
 800a8ca:	d8f9      	bhi.n	800a8c0 <__lshift+0xc0>
 800a8cc:	e7ea      	b.n	800a8a4 <__lshift+0xa4>
 800a8ce:	bf00      	nop
 800a8d0:	0800bb3c 	.word	0x0800bb3c
 800a8d4:	0800bbad 	.word	0x0800bbad

0800a8d8 <__mcmp>:
 800a8d8:	690a      	ldr	r2, [r1, #16]
 800a8da:	4603      	mov	r3, r0
 800a8dc:	6900      	ldr	r0, [r0, #16]
 800a8de:	1a80      	subs	r0, r0, r2
 800a8e0:	b530      	push	{r4, r5, lr}
 800a8e2:	d10e      	bne.n	800a902 <__mcmp+0x2a>
 800a8e4:	3314      	adds	r3, #20
 800a8e6:	3114      	adds	r1, #20
 800a8e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8f8:	4295      	cmp	r5, r2
 800a8fa:	d003      	beq.n	800a904 <__mcmp+0x2c>
 800a8fc:	d205      	bcs.n	800a90a <__mcmp+0x32>
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	bd30      	pop	{r4, r5, pc}
 800a904:	42a3      	cmp	r3, r4
 800a906:	d3f3      	bcc.n	800a8f0 <__mcmp+0x18>
 800a908:	e7fb      	b.n	800a902 <__mcmp+0x2a>
 800a90a:	2001      	movs	r0, #1
 800a90c:	e7f9      	b.n	800a902 <__mcmp+0x2a>
	...

0800a910 <__mdiff>:
 800a910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	4689      	mov	r9, r1
 800a916:	4606      	mov	r6, r0
 800a918:	4611      	mov	r1, r2
 800a91a:	4648      	mov	r0, r9
 800a91c:	4614      	mov	r4, r2
 800a91e:	f7ff ffdb 	bl	800a8d8 <__mcmp>
 800a922:	1e05      	subs	r5, r0, #0
 800a924:	d112      	bne.n	800a94c <__mdiff+0x3c>
 800a926:	4629      	mov	r1, r5
 800a928:	4630      	mov	r0, r6
 800a92a:	f7ff fd19 	bl	800a360 <_Balloc>
 800a92e:	4602      	mov	r2, r0
 800a930:	b928      	cbnz	r0, 800a93e <__mdiff+0x2e>
 800a932:	4b3f      	ldr	r3, [pc, #252]	@ (800aa30 <__mdiff+0x120>)
 800a934:	f240 2137 	movw	r1, #567	@ 0x237
 800a938:	483e      	ldr	r0, [pc, #248]	@ (800aa34 <__mdiff+0x124>)
 800a93a:	f7fe fa4d 	bl	8008dd8 <__assert_func>
 800a93e:	2301      	movs	r3, #1
 800a940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a944:	4610      	mov	r0, r2
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94c:	bfbc      	itt	lt
 800a94e:	464b      	movlt	r3, r9
 800a950:	46a1      	movlt	r9, r4
 800a952:	4630      	mov	r0, r6
 800a954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a958:	bfba      	itte	lt
 800a95a:	461c      	movlt	r4, r3
 800a95c:	2501      	movlt	r5, #1
 800a95e:	2500      	movge	r5, #0
 800a960:	f7ff fcfe 	bl	800a360 <_Balloc>
 800a964:	4602      	mov	r2, r0
 800a966:	b918      	cbnz	r0, 800a970 <__mdiff+0x60>
 800a968:	4b31      	ldr	r3, [pc, #196]	@ (800aa30 <__mdiff+0x120>)
 800a96a:	f240 2145 	movw	r1, #581	@ 0x245
 800a96e:	e7e3      	b.n	800a938 <__mdiff+0x28>
 800a970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a974:	6926      	ldr	r6, [r4, #16]
 800a976:	60c5      	str	r5, [r0, #12]
 800a978:	f109 0310 	add.w	r3, r9, #16
 800a97c:	f109 0514 	add.w	r5, r9, #20
 800a980:	f104 0e14 	add.w	lr, r4, #20
 800a984:	f100 0b14 	add.w	fp, r0, #20
 800a988:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a98c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	46d9      	mov	r9, fp
 800a994:	f04f 0c00 	mov.w	ip, #0
 800a998:	9b01      	ldr	r3, [sp, #4]
 800a99a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a99e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	fa1f f38a 	uxth.w	r3, sl
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	b283      	uxth	r3, r0
 800a9ac:	1acb      	subs	r3, r1, r3
 800a9ae:	0c00      	lsrs	r0, r0, #16
 800a9b0:	4463      	add	r3, ip
 800a9b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9c0:	4576      	cmp	r6, lr
 800a9c2:	f849 3b04 	str.w	r3, [r9], #4
 800a9c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9ca:	d8e5      	bhi.n	800a998 <__mdiff+0x88>
 800a9cc:	1b33      	subs	r3, r6, r4
 800a9ce:	3b15      	subs	r3, #21
 800a9d0:	f023 0303 	bic.w	r3, r3, #3
 800a9d4:	3415      	adds	r4, #21
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	42a6      	cmp	r6, r4
 800a9da:	bf38      	it	cc
 800a9dc:	2304      	movcc	r3, #4
 800a9de:	441d      	add	r5, r3
 800a9e0:	445b      	add	r3, fp
 800a9e2:	461e      	mov	r6, r3
 800a9e4:	462c      	mov	r4, r5
 800a9e6:	4544      	cmp	r4, r8
 800a9e8:	d30e      	bcc.n	800aa08 <__mdiff+0xf8>
 800a9ea:	f108 0103 	add.w	r1, r8, #3
 800a9ee:	1b49      	subs	r1, r1, r5
 800a9f0:	f021 0103 	bic.w	r1, r1, #3
 800a9f4:	3d03      	subs	r5, #3
 800a9f6:	45a8      	cmp	r8, r5
 800a9f8:	bf38      	it	cc
 800a9fa:	2100      	movcc	r1, #0
 800a9fc:	440b      	add	r3, r1
 800a9fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa02:	b191      	cbz	r1, 800aa2a <__mdiff+0x11a>
 800aa04:	6117      	str	r7, [r2, #16]
 800aa06:	e79d      	b.n	800a944 <__mdiff+0x34>
 800aa08:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa0c:	46e6      	mov	lr, ip
 800aa0e:	0c08      	lsrs	r0, r1, #16
 800aa10:	fa1c fc81 	uxtah	ip, ip, r1
 800aa14:	4471      	add	r1, lr
 800aa16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa1a:	b289      	uxth	r1, r1
 800aa1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa20:	f846 1b04 	str.w	r1, [r6], #4
 800aa24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa28:	e7dd      	b.n	800a9e6 <__mdiff+0xd6>
 800aa2a:	3f01      	subs	r7, #1
 800aa2c:	e7e7      	b.n	800a9fe <__mdiff+0xee>
 800aa2e:	bf00      	nop
 800aa30:	0800bb3c 	.word	0x0800bb3c
 800aa34:	0800bbad 	.word	0x0800bbad

0800aa38 <__ulp>:
 800aa38:	b082      	sub	sp, #8
 800aa3a:	ed8d 0b00 	vstr	d0, [sp]
 800aa3e:	9a01      	ldr	r2, [sp, #4]
 800aa40:	4b0f      	ldr	r3, [pc, #60]	@ (800aa80 <__ulp+0x48>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dc08      	bgt.n	800aa5e <__ulp+0x26>
 800aa4c:	425b      	negs	r3, r3
 800aa4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aa52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa56:	da04      	bge.n	800aa62 <__ulp+0x2a>
 800aa58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa5c:	4113      	asrs	r3, r2
 800aa5e:	2200      	movs	r2, #0
 800aa60:	e008      	b.n	800aa74 <__ulp+0x3c>
 800aa62:	f1a2 0314 	sub.w	r3, r2, #20
 800aa66:	2b1e      	cmp	r3, #30
 800aa68:	bfda      	itte	le
 800aa6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aa6e:	40da      	lsrle	r2, r3
 800aa70:	2201      	movgt	r2, #1
 800aa72:	2300      	movs	r3, #0
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	ec41 0b10 	vmov	d0, r0, r1
 800aa7c:	b002      	add	sp, #8
 800aa7e:	4770      	bx	lr
 800aa80:	7ff00000 	.word	0x7ff00000

0800aa84 <__b2d>:
 800aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa88:	6906      	ldr	r6, [r0, #16]
 800aa8a:	f100 0814 	add.w	r8, r0, #20
 800aa8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa92:	1f37      	subs	r7, r6, #4
 800aa94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa98:	4610      	mov	r0, r2
 800aa9a:	f7ff fd53 	bl	800a544 <__hi0bits>
 800aa9e:	f1c0 0320 	rsb	r3, r0, #32
 800aaa2:	280a      	cmp	r0, #10
 800aaa4:	600b      	str	r3, [r1, #0]
 800aaa6:	491b      	ldr	r1, [pc, #108]	@ (800ab14 <__b2d+0x90>)
 800aaa8:	dc15      	bgt.n	800aad6 <__b2d+0x52>
 800aaaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800aaae:	fa22 f30c 	lsr.w	r3, r2, ip
 800aab2:	45b8      	cmp	r8, r7
 800aab4:	ea43 0501 	orr.w	r5, r3, r1
 800aab8:	bf34      	ite	cc
 800aaba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aabe:	2300      	movcs	r3, #0
 800aac0:	3015      	adds	r0, #21
 800aac2:	fa02 f000 	lsl.w	r0, r2, r0
 800aac6:	fa23 f30c 	lsr.w	r3, r3, ip
 800aaca:	4303      	orrs	r3, r0
 800aacc:	461c      	mov	r4, r3
 800aace:	ec45 4b10 	vmov	d0, r4, r5
 800aad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad6:	45b8      	cmp	r8, r7
 800aad8:	bf3a      	itte	cc
 800aada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aade:	f1a6 0708 	subcc.w	r7, r6, #8
 800aae2:	2300      	movcs	r3, #0
 800aae4:	380b      	subs	r0, #11
 800aae6:	d012      	beq.n	800ab0e <__b2d+0x8a>
 800aae8:	f1c0 0120 	rsb	r1, r0, #32
 800aaec:	fa23 f401 	lsr.w	r4, r3, r1
 800aaf0:	4082      	lsls	r2, r0
 800aaf2:	4322      	orrs	r2, r4
 800aaf4:	4547      	cmp	r7, r8
 800aaf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aafa:	bf8c      	ite	hi
 800aafc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab00:	2200      	movls	r2, #0
 800ab02:	4083      	lsls	r3, r0
 800ab04:	40ca      	lsrs	r2, r1
 800ab06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	e7de      	b.n	800aacc <__b2d+0x48>
 800ab0e:	ea42 0501 	orr.w	r5, r2, r1
 800ab12:	e7db      	b.n	800aacc <__b2d+0x48>
 800ab14:	3ff00000 	.word	0x3ff00000

0800ab18 <__d2b>:
 800ab18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	2101      	movs	r1, #1
 800ab20:	ec59 8b10 	vmov	r8, r9, d0
 800ab24:	4616      	mov	r6, r2
 800ab26:	f7ff fc1b 	bl	800a360 <_Balloc>
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	b930      	cbnz	r0, 800ab3c <__d2b+0x24>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	4b23      	ldr	r3, [pc, #140]	@ (800abc0 <__d2b+0xa8>)
 800ab32:	4824      	ldr	r0, [pc, #144]	@ (800abc4 <__d2b+0xac>)
 800ab34:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab38:	f7fe f94e 	bl	8008dd8 <__assert_func>
 800ab3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab44:	b10d      	cbz	r5, 800ab4a <__d2b+0x32>
 800ab46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	f1b8 0300 	subs.w	r3, r8, #0
 800ab50:	d023      	beq.n	800ab9a <__d2b+0x82>
 800ab52:	4668      	mov	r0, sp
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	f7ff fd14 	bl	800a582 <__lo0bits>
 800ab5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab5e:	b1d0      	cbz	r0, 800ab96 <__d2b+0x7e>
 800ab60:	f1c0 0320 	rsb	r3, r0, #32
 800ab64:	fa02 f303 	lsl.w	r3, r2, r3
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	40c2      	lsrs	r2, r0
 800ab6c:	6163      	str	r3, [r4, #20]
 800ab6e:	9201      	str	r2, [sp, #4]
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	61a3      	str	r3, [r4, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bf0c      	ite	eq
 800ab78:	2201      	moveq	r2, #1
 800ab7a:	2202      	movne	r2, #2
 800ab7c:	6122      	str	r2, [r4, #16]
 800ab7e:	b1a5      	cbz	r5, 800abaa <__d2b+0x92>
 800ab80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab84:	4405      	add	r5, r0
 800ab86:	603d      	str	r5, [r7, #0]
 800ab88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab8c:	6030      	str	r0, [r6, #0]
 800ab8e:	4620      	mov	r0, r4
 800ab90:	b003      	add	sp, #12
 800ab92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab96:	6161      	str	r1, [r4, #20]
 800ab98:	e7ea      	b.n	800ab70 <__d2b+0x58>
 800ab9a:	a801      	add	r0, sp, #4
 800ab9c:	f7ff fcf1 	bl	800a582 <__lo0bits>
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	6163      	str	r3, [r4, #20]
 800aba4:	3020      	adds	r0, #32
 800aba6:	2201      	movs	r2, #1
 800aba8:	e7e8      	b.n	800ab7c <__d2b+0x64>
 800abaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abb2:	6038      	str	r0, [r7, #0]
 800abb4:	6918      	ldr	r0, [r3, #16]
 800abb6:	f7ff fcc5 	bl	800a544 <__hi0bits>
 800abba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abbe:	e7e5      	b.n	800ab8c <__d2b+0x74>
 800abc0:	0800bb3c 	.word	0x0800bb3c
 800abc4:	0800bbad 	.word	0x0800bbad

0800abc8 <__ratio>:
 800abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	b085      	sub	sp, #20
 800abce:	e9cd 1000 	strd	r1, r0, [sp]
 800abd2:	a902      	add	r1, sp, #8
 800abd4:	f7ff ff56 	bl	800aa84 <__b2d>
 800abd8:	9800      	ldr	r0, [sp, #0]
 800abda:	a903      	add	r1, sp, #12
 800abdc:	ec55 4b10 	vmov	r4, r5, d0
 800abe0:	f7ff ff50 	bl	800aa84 <__b2d>
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	6919      	ldr	r1, [r3, #16]
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	1ac9      	subs	r1, r1, r3
 800abee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	ec5b ab10 	vmov	sl, fp, d0
 800abf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfce      	itee	gt
 800ac00:	462a      	movgt	r2, r5
 800ac02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac06:	465a      	movle	r2, fp
 800ac08:	462f      	mov	r7, r5
 800ac0a:	46d9      	mov	r9, fp
 800ac0c:	bfcc      	ite	gt
 800ac0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac16:	464b      	mov	r3, r9
 800ac18:	4652      	mov	r2, sl
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f7f5 fe1d 	bl	800085c <__aeabi_ddiv>
 800ac22:	ec41 0b10 	vmov	d0, r0, r1
 800ac26:	b005      	add	sp, #20
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac2c <__copybits>:
 800ac2c:	3901      	subs	r1, #1
 800ac2e:	b570      	push	{r4, r5, r6, lr}
 800ac30:	1149      	asrs	r1, r1, #5
 800ac32:	6914      	ldr	r4, [r2, #16]
 800ac34:	3101      	adds	r1, #1
 800ac36:	f102 0314 	add.w	r3, r2, #20
 800ac3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac42:	1f05      	subs	r5, r0, #4
 800ac44:	42a3      	cmp	r3, r4
 800ac46:	d30c      	bcc.n	800ac62 <__copybits+0x36>
 800ac48:	1aa3      	subs	r3, r4, r2
 800ac4a:	3b11      	subs	r3, #17
 800ac4c:	f023 0303 	bic.w	r3, r3, #3
 800ac50:	3211      	adds	r2, #17
 800ac52:	42a2      	cmp	r2, r4
 800ac54:	bf88      	it	hi
 800ac56:	2300      	movhi	r3, #0
 800ac58:	4418      	add	r0, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4288      	cmp	r0, r1
 800ac5e:	d305      	bcc.n	800ac6c <__copybits+0x40>
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
 800ac62:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac66:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac6a:	e7eb      	b.n	800ac44 <__copybits+0x18>
 800ac6c:	f840 3b04 	str.w	r3, [r0], #4
 800ac70:	e7f4      	b.n	800ac5c <__copybits+0x30>

0800ac72 <__any_on>:
 800ac72:	f100 0214 	add.w	r2, r0, #20
 800ac76:	6900      	ldr	r0, [r0, #16]
 800ac78:	114b      	asrs	r3, r1, #5
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	db11      	blt.n	800aca4 <__any_on+0x32>
 800ac80:	dd0a      	ble.n	800ac98 <__any_on+0x26>
 800ac82:	f011 011f 	ands.w	r1, r1, #31
 800ac86:	d007      	beq.n	800ac98 <__any_on+0x26>
 800ac88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac8c:	fa24 f001 	lsr.w	r0, r4, r1
 800ac90:	fa00 f101 	lsl.w	r1, r0, r1
 800ac94:	428c      	cmp	r4, r1
 800ac96:	d10b      	bne.n	800acb0 <__any_on+0x3e>
 800ac98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d803      	bhi.n	800aca8 <__any_on+0x36>
 800aca0:	2000      	movs	r0, #0
 800aca2:	bd10      	pop	{r4, pc}
 800aca4:	4603      	mov	r3, r0
 800aca6:	e7f7      	b.n	800ac98 <__any_on+0x26>
 800aca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acac:	2900      	cmp	r1, #0
 800acae:	d0f5      	beq.n	800ac9c <__any_on+0x2a>
 800acb0:	2001      	movs	r0, #1
 800acb2:	e7f6      	b.n	800aca2 <__any_on+0x30>

0800acb4 <__ascii_wctomb>:
 800acb4:	4603      	mov	r3, r0
 800acb6:	4608      	mov	r0, r1
 800acb8:	b141      	cbz	r1, 800accc <__ascii_wctomb+0x18>
 800acba:	2aff      	cmp	r2, #255	@ 0xff
 800acbc:	d904      	bls.n	800acc8 <__ascii_wctomb+0x14>
 800acbe:	228a      	movs	r2, #138	@ 0x8a
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	4770      	bx	lr
 800acc8:	700a      	strb	r2, [r1, #0]
 800acca:	2001      	movs	r0, #1
 800accc:	4770      	bx	lr

0800acce <__ssputs_r>:
 800acce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd2:	688e      	ldr	r6, [r1, #8]
 800acd4:	461f      	mov	r7, r3
 800acd6:	42be      	cmp	r6, r7
 800acd8:	680b      	ldr	r3, [r1, #0]
 800acda:	4682      	mov	sl, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	4690      	mov	r8, r2
 800ace0:	d82d      	bhi.n	800ad3e <__ssputs_r+0x70>
 800ace2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ace6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acea:	d026      	beq.n	800ad3a <__ssputs_r+0x6c>
 800acec:	6965      	ldr	r5, [r4, #20]
 800acee:	6909      	ldr	r1, [r1, #16]
 800acf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf4:	eba3 0901 	sub.w	r9, r3, r1
 800acf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acfc:	1c7b      	adds	r3, r7, #1
 800acfe:	444b      	add	r3, r9
 800ad00:	106d      	asrs	r5, r5, #1
 800ad02:	429d      	cmp	r5, r3
 800ad04:	bf38      	it	cc
 800ad06:	461d      	movcc	r5, r3
 800ad08:	0553      	lsls	r3, r2, #21
 800ad0a:	d527      	bpl.n	800ad5c <__ssputs_r+0x8e>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7ff fa89 	bl	800a224 <_malloc_r>
 800ad12:	4606      	mov	r6, r0
 800ad14:	b360      	cbz	r0, 800ad70 <__ssputs_r+0xa2>
 800ad16:	6921      	ldr	r1, [r4, #16]
 800ad18:	464a      	mov	r2, r9
 800ad1a:	f7fe f844 	bl	8008da6 <memcpy>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad28:	81a3      	strh	r3, [r4, #12]
 800ad2a:	6126      	str	r6, [r4, #16]
 800ad2c:	6165      	str	r5, [r4, #20]
 800ad2e:	444e      	add	r6, r9
 800ad30:	eba5 0509 	sub.w	r5, r5, r9
 800ad34:	6026      	str	r6, [r4, #0]
 800ad36:	60a5      	str	r5, [r4, #8]
 800ad38:	463e      	mov	r6, r7
 800ad3a:	42be      	cmp	r6, r7
 800ad3c:	d900      	bls.n	800ad40 <__ssputs_r+0x72>
 800ad3e:	463e      	mov	r6, r7
 800ad40:	6820      	ldr	r0, [r4, #0]
 800ad42:	4632      	mov	r2, r6
 800ad44:	4641      	mov	r1, r8
 800ad46:	f000 f9d7 	bl	800b0f8 <memmove>
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	1b9b      	subs	r3, r3, r6
 800ad4e:	60a3      	str	r3, [r4, #8]
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	4433      	add	r3, r6
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	2000      	movs	r0, #0
 800ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	f000 fa10 	bl	800b182 <_realloc_r>
 800ad62:	4606      	mov	r6, r0
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d1e0      	bne.n	800ad2a <__ssputs_r+0x5c>
 800ad68:	6921      	ldr	r1, [r4, #16]
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	f7fe feac 	bl	8009ac8 <_free_r>
 800ad70:	230c      	movs	r3, #12
 800ad72:	f8ca 3000 	str.w	r3, [sl]
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad7c:	81a3      	strh	r3, [r4, #12]
 800ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad82:	e7e9      	b.n	800ad58 <__ssputs_r+0x8a>

0800ad84 <_svfiprintf_r>:
 800ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad88:	4698      	mov	r8, r3
 800ad8a:	898b      	ldrh	r3, [r1, #12]
 800ad8c:	061b      	lsls	r3, r3, #24
 800ad8e:	b09d      	sub	sp, #116	@ 0x74
 800ad90:	4607      	mov	r7, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	4614      	mov	r4, r2
 800ad96:	d510      	bpl.n	800adba <_svfiprintf_r+0x36>
 800ad98:	690b      	ldr	r3, [r1, #16]
 800ad9a:	b973      	cbnz	r3, 800adba <_svfiprintf_r+0x36>
 800ad9c:	2140      	movs	r1, #64	@ 0x40
 800ad9e:	f7ff fa41 	bl	800a224 <_malloc_r>
 800ada2:	6028      	str	r0, [r5, #0]
 800ada4:	6128      	str	r0, [r5, #16]
 800ada6:	b930      	cbnz	r0, 800adb6 <_svfiprintf_r+0x32>
 800ada8:	230c      	movs	r3, #12
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	b01d      	add	sp, #116	@ 0x74
 800adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb6:	2340      	movs	r3, #64	@ 0x40
 800adb8:	616b      	str	r3, [r5, #20]
 800adba:	2300      	movs	r3, #0
 800adbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adbe:	2320      	movs	r3, #32
 800adc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc8:	2330      	movs	r3, #48	@ 0x30
 800adca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af68 <_svfiprintf_r+0x1e4>
 800adce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	4623      	mov	r3, r4
 800add8:	469a      	mov	sl, r3
 800adda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adde:	b10a      	cbz	r2, 800ade4 <_svfiprintf_r+0x60>
 800ade0:	2a25      	cmp	r2, #37	@ 0x25
 800ade2:	d1f9      	bne.n	800add8 <_svfiprintf_r+0x54>
 800ade4:	ebba 0b04 	subs.w	fp, sl, r4
 800ade8:	d00b      	beq.n	800ae02 <_svfiprintf_r+0x7e>
 800adea:	465b      	mov	r3, fp
 800adec:	4622      	mov	r2, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff ff6c 	bl	800acce <__ssputs_r>
 800adf6:	3001      	adds	r0, #1
 800adf8:	f000 80a7 	beq.w	800af4a <_svfiprintf_r+0x1c6>
 800adfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adfe:	445a      	add	r2, fp
 800ae00:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 809f 	beq.w	800af4a <_svfiprintf_r+0x1c6>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae16:	f10a 0a01 	add.w	sl, sl, #1
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	9307      	str	r3, [sp, #28]
 800ae1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae22:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae24:	4654      	mov	r4, sl
 800ae26:	2205      	movs	r2, #5
 800ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2c:	484e      	ldr	r0, [pc, #312]	@ (800af68 <_svfiprintf_r+0x1e4>)
 800ae2e:	f7f5 f9d7 	bl	80001e0 <memchr>
 800ae32:	9a04      	ldr	r2, [sp, #16]
 800ae34:	b9d8      	cbnz	r0, 800ae6e <_svfiprintf_r+0xea>
 800ae36:	06d0      	lsls	r0, r2, #27
 800ae38:	bf44      	itt	mi
 800ae3a:	2320      	movmi	r3, #32
 800ae3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae40:	0711      	lsls	r1, r2, #28
 800ae42:	bf44      	itt	mi
 800ae44:	232b      	movmi	r3, #43	@ 0x2b
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae50:	d015      	beq.n	800ae7e <_svfiprintf_r+0xfa>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	4654      	mov	r4, sl
 800ae56:	2000      	movs	r0, #0
 800ae58:	f04f 0c0a 	mov.w	ip, #10
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae62:	3b30      	subs	r3, #48	@ 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d94b      	bls.n	800af00 <_svfiprintf_r+0x17c>
 800ae68:	b1b0      	cbz	r0, 800ae98 <_svfiprintf_r+0x114>
 800ae6a:	9207      	str	r2, [sp, #28]
 800ae6c:	e014      	b.n	800ae98 <_svfiprintf_r+0x114>
 800ae6e:	eba0 0308 	sub.w	r3, r0, r8
 800ae72:	fa09 f303 	lsl.w	r3, r9, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	46a2      	mov	sl, r4
 800ae7c:	e7d2      	b.n	800ae24 <_svfiprintf_r+0xa0>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	1d19      	adds	r1, r3, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	9103      	str	r1, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfbb      	ittet	lt
 800ae8a:	425b      	neglt	r3, r3
 800ae8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae90:	9307      	strge	r3, [sp, #28]
 800ae92:	9307      	strlt	r3, [sp, #28]
 800ae94:	bfb8      	it	lt
 800ae96:	9204      	strlt	r2, [sp, #16]
 800ae98:	7823      	ldrb	r3, [r4, #0]
 800ae9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae9c:	d10a      	bne.n	800aeb4 <_svfiprintf_r+0x130>
 800ae9e:	7863      	ldrb	r3, [r4, #1]
 800aea0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aea2:	d132      	bne.n	800af0a <_svfiprintf_r+0x186>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	1d1a      	adds	r2, r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	9203      	str	r2, [sp, #12]
 800aeac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeb0:	3402      	adds	r4, #2
 800aeb2:	9305      	str	r3, [sp, #20]
 800aeb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af78 <_svfiprintf_r+0x1f4>
 800aeb8:	7821      	ldrb	r1, [r4, #0]
 800aeba:	2203      	movs	r2, #3
 800aebc:	4650      	mov	r0, sl
 800aebe:	f7f5 f98f 	bl	80001e0 <memchr>
 800aec2:	b138      	cbz	r0, 800aed4 <_svfiprintf_r+0x150>
 800aec4:	9b04      	ldr	r3, [sp, #16]
 800aec6:	eba0 000a 	sub.w	r0, r0, sl
 800aeca:	2240      	movs	r2, #64	@ 0x40
 800aecc:	4082      	lsls	r2, r0
 800aece:	4313      	orrs	r3, r2
 800aed0:	3401      	adds	r4, #1
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed8:	4824      	ldr	r0, [pc, #144]	@ (800af6c <_svfiprintf_r+0x1e8>)
 800aeda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aede:	2206      	movs	r2, #6
 800aee0:	f7f5 f97e 	bl	80001e0 <memchr>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d036      	beq.n	800af56 <_svfiprintf_r+0x1d2>
 800aee8:	4b21      	ldr	r3, [pc, #132]	@ (800af70 <_svfiprintf_r+0x1ec>)
 800aeea:	bb1b      	cbnz	r3, 800af34 <_svfiprintf_r+0x1b0>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	3307      	adds	r3, #7
 800aef0:	f023 0307 	bic.w	r3, r3, #7
 800aef4:	3308      	adds	r3, #8
 800aef6:	9303      	str	r3, [sp, #12]
 800aef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aefa:	4433      	add	r3, r6
 800aefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aefe:	e76a      	b.n	800add6 <_svfiprintf_r+0x52>
 800af00:	fb0c 3202 	mla	r2, ip, r2, r3
 800af04:	460c      	mov	r4, r1
 800af06:	2001      	movs	r0, #1
 800af08:	e7a8      	b.n	800ae5c <_svfiprintf_r+0xd8>
 800af0a:	2300      	movs	r3, #0
 800af0c:	3401      	adds	r4, #1
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	4619      	mov	r1, r3
 800af12:	f04f 0c0a 	mov.w	ip, #10
 800af16:	4620      	mov	r0, r4
 800af18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af1c:	3a30      	subs	r2, #48	@ 0x30
 800af1e:	2a09      	cmp	r2, #9
 800af20:	d903      	bls.n	800af2a <_svfiprintf_r+0x1a6>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0c6      	beq.n	800aeb4 <_svfiprintf_r+0x130>
 800af26:	9105      	str	r1, [sp, #20]
 800af28:	e7c4      	b.n	800aeb4 <_svfiprintf_r+0x130>
 800af2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af2e:	4604      	mov	r4, r0
 800af30:	2301      	movs	r3, #1
 800af32:	e7f0      	b.n	800af16 <_svfiprintf_r+0x192>
 800af34:	ab03      	add	r3, sp, #12
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	462a      	mov	r2, r5
 800af3a:	4b0e      	ldr	r3, [pc, #56]	@ (800af74 <_svfiprintf_r+0x1f0>)
 800af3c:	a904      	add	r1, sp, #16
 800af3e:	4638      	mov	r0, r7
 800af40:	f7fd f952 	bl	80081e8 <_printf_float>
 800af44:	1c42      	adds	r2, r0, #1
 800af46:	4606      	mov	r6, r0
 800af48:	d1d6      	bne.n	800aef8 <_svfiprintf_r+0x174>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	065b      	lsls	r3, r3, #25
 800af4e:	f53f af2d 	bmi.w	800adac <_svfiprintf_r+0x28>
 800af52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af54:	e72c      	b.n	800adb0 <_svfiprintf_r+0x2c>
 800af56:	ab03      	add	r3, sp, #12
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	462a      	mov	r2, r5
 800af5c:	4b05      	ldr	r3, [pc, #20]	@ (800af74 <_svfiprintf_r+0x1f0>)
 800af5e:	a904      	add	r1, sp, #16
 800af60:	4638      	mov	r0, r7
 800af62:	f7fd fbd9 	bl	8008718 <_printf_i>
 800af66:	e7ed      	b.n	800af44 <_svfiprintf_r+0x1c0>
 800af68:	0800bc06 	.word	0x0800bc06
 800af6c:	0800bc10 	.word	0x0800bc10
 800af70:	080081e9 	.word	0x080081e9
 800af74:	0800accf 	.word	0x0800accf
 800af78:	0800bc0c 	.word	0x0800bc0c

0800af7c <__sflush_r>:
 800af7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	0716      	lsls	r6, r2, #28
 800af86:	4605      	mov	r5, r0
 800af88:	460c      	mov	r4, r1
 800af8a:	d454      	bmi.n	800b036 <__sflush_r+0xba>
 800af8c:	684b      	ldr	r3, [r1, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dc02      	bgt.n	800af98 <__sflush_r+0x1c>
 800af92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd48      	ble.n	800b02a <__sflush_r+0xae>
 800af98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af9a:	2e00      	cmp	r6, #0
 800af9c:	d045      	beq.n	800b02a <__sflush_r+0xae>
 800af9e:	2300      	movs	r3, #0
 800afa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afa4:	682f      	ldr	r7, [r5, #0]
 800afa6:	6a21      	ldr	r1, [r4, #32]
 800afa8:	602b      	str	r3, [r5, #0]
 800afaa:	d030      	beq.n	800b00e <__sflush_r+0x92>
 800afac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	0759      	lsls	r1, r3, #29
 800afb2:	d505      	bpl.n	800afc0 <__sflush_r+0x44>
 800afb4:	6863      	ldr	r3, [r4, #4]
 800afb6:	1ad2      	subs	r2, r2, r3
 800afb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afba:	b10b      	cbz	r3, 800afc0 <__sflush_r+0x44>
 800afbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afbe:	1ad2      	subs	r2, r2, r3
 800afc0:	2300      	movs	r3, #0
 800afc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afc4:	6a21      	ldr	r1, [r4, #32]
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b0      	blx	r6
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	d106      	bne.n	800afde <__sflush_r+0x62>
 800afd0:	6829      	ldr	r1, [r5, #0]
 800afd2:	291d      	cmp	r1, #29
 800afd4:	d82b      	bhi.n	800b02e <__sflush_r+0xb2>
 800afd6:	4a2a      	ldr	r2, [pc, #168]	@ (800b080 <__sflush_r+0x104>)
 800afd8:	40ca      	lsrs	r2, r1
 800afda:	07d6      	lsls	r6, r2, #31
 800afdc:	d527      	bpl.n	800b02e <__sflush_r+0xb2>
 800afde:	2200      	movs	r2, #0
 800afe0:	6062      	str	r2, [r4, #4]
 800afe2:	04d9      	lsls	r1, r3, #19
 800afe4:	6922      	ldr	r2, [r4, #16]
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	d504      	bpl.n	800aff4 <__sflush_r+0x78>
 800afea:	1c42      	adds	r2, r0, #1
 800afec:	d101      	bne.n	800aff2 <__sflush_r+0x76>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b903      	cbnz	r3, 800aff4 <__sflush_r+0x78>
 800aff2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aff6:	602f      	str	r7, [r5, #0]
 800aff8:	b1b9      	cbz	r1, 800b02a <__sflush_r+0xae>
 800affa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800affe:	4299      	cmp	r1, r3
 800b000:	d002      	beq.n	800b008 <__sflush_r+0x8c>
 800b002:	4628      	mov	r0, r5
 800b004:	f7fe fd60 	bl	8009ac8 <_free_r>
 800b008:	2300      	movs	r3, #0
 800b00a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b00c:	e00d      	b.n	800b02a <__sflush_r+0xae>
 800b00e:	2301      	movs	r3, #1
 800b010:	4628      	mov	r0, r5
 800b012:	47b0      	blx	r6
 800b014:	4602      	mov	r2, r0
 800b016:	1c50      	adds	r0, r2, #1
 800b018:	d1c9      	bne.n	800afae <__sflush_r+0x32>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0c6      	beq.n	800afae <__sflush_r+0x32>
 800b020:	2b1d      	cmp	r3, #29
 800b022:	d001      	beq.n	800b028 <__sflush_r+0xac>
 800b024:	2b16      	cmp	r3, #22
 800b026:	d11e      	bne.n	800b066 <__sflush_r+0xea>
 800b028:	602f      	str	r7, [r5, #0]
 800b02a:	2000      	movs	r0, #0
 800b02c:	e022      	b.n	800b074 <__sflush_r+0xf8>
 800b02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b032:	b21b      	sxth	r3, r3
 800b034:	e01b      	b.n	800b06e <__sflush_r+0xf2>
 800b036:	690f      	ldr	r7, [r1, #16]
 800b038:	2f00      	cmp	r7, #0
 800b03a:	d0f6      	beq.n	800b02a <__sflush_r+0xae>
 800b03c:	0793      	lsls	r3, r2, #30
 800b03e:	680e      	ldr	r6, [r1, #0]
 800b040:	bf08      	it	eq
 800b042:	694b      	ldreq	r3, [r1, #20]
 800b044:	600f      	str	r7, [r1, #0]
 800b046:	bf18      	it	ne
 800b048:	2300      	movne	r3, #0
 800b04a:	eba6 0807 	sub.w	r8, r6, r7
 800b04e:	608b      	str	r3, [r1, #8]
 800b050:	f1b8 0f00 	cmp.w	r8, #0
 800b054:	dde9      	ble.n	800b02a <__sflush_r+0xae>
 800b056:	6a21      	ldr	r1, [r4, #32]
 800b058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b05a:	4643      	mov	r3, r8
 800b05c:	463a      	mov	r2, r7
 800b05e:	4628      	mov	r0, r5
 800b060:	47b0      	blx	r6
 800b062:	2800      	cmp	r0, #0
 800b064:	dc08      	bgt.n	800b078 <__sflush_r+0xfc>
 800b066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	f04f 30ff 	mov.w	r0, #4294967295
 800b074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b078:	4407      	add	r7, r0
 800b07a:	eba8 0800 	sub.w	r8, r8, r0
 800b07e:	e7e7      	b.n	800b050 <__sflush_r+0xd4>
 800b080:	20400001 	.word	0x20400001

0800b084 <_fflush_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	690b      	ldr	r3, [r1, #16]
 800b088:	4605      	mov	r5, r0
 800b08a:	460c      	mov	r4, r1
 800b08c:	b913      	cbnz	r3, 800b094 <_fflush_r+0x10>
 800b08e:	2500      	movs	r5, #0
 800b090:	4628      	mov	r0, r5
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	b118      	cbz	r0, 800b09e <_fflush_r+0x1a>
 800b096:	6a03      	ldr	r3, [r0, #32]
 800b098:	b90b      	cbnz	r3, 800b09e <_fflush_r+0x1a>
 800b09a:	f7fd fce7 	bl	8008a6c <__sinit>
 800b09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0f3      	beq.n	800b08e <_fflush_r+0xa>
 800b0a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0a8:	07d0      	lsls	r0, r2, #31
 800b0aa:	d404      	bmi.n	800b0b6 <_fflush_r+0x32>
 800b0ac:	0599      	lsls	r1, r3, #22
 800b0ae:	d402      	bmi.n	800b0b6 <_fflush_r+0x32>
 800b0b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0b2:	f7fd fe76 	bl	8008da2 <__retarget_lock_acquire_recursive>
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	f7ff ff5f 	bl	800af7c <__sflush_r>
 800b0be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0c0:	07da      	lsls	r2, r3, #31
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	d4e4      	bmi.n	800b090 <_fflush_r+0xc>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	059b      	lsls	r3, r3, #22
 800b0ca:	d4e1      	bmi.n	800b090 <_fflush_r+0xc>
 800b0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ce:	f7fd fe69 	bl	8008da4 <__retarget_lock_release_recursive>
 800b0d2:	e7dd      	b.n	800b090 <_fflush_r+0xc>

0800b0d4 <fiprintf>:
 800b0d4:	b40e      	push	{r1, r2, r3}
 800b0d6:	b503      	push	{r0, r1, lr}
 800b0d8:	4601      	mov	r1, r0
 800b0da:	ab03      	add	r3, sp, #12
 800b0dc:	4805      	ldr	r0, [pc, #20]	@ (800b0f4 <fiprintf+0x20>)
 800b0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e2:	6800      	ldr	r0, [r0, #0]
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	f000 f8a3 	bl	800b230 <_vfiprintf_r>
 800b0ea:	b002      	add	sp, #8
 800b0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0f0:	b003      	add	sp, #12
 800b0f2:	4770      	bx	lr
 800b0f4:	200001d4 	.word	0x200001d4

0800b0f8 <memmove>:
 800b0f8:	4288      	cmp	r0, r1
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	eb01 0402 	add.w	r4, r1, r2
 800b100:	d902      	bls.n	800b108 <memmove+0x10>
 800b102:	4284      	cmp	r4, r0
 800b104:	4623      	mov	r3, r4
 800b106:	d807      	bhi.n	800b118 <memmove+0x20>
 800b108:	1e43      	subs	r3, r0, #1
 800b10a:	42a1      	cmp	r1, r4
 800b10c:	d008      	beq.n	800b120 <memmove+0x28>
 800b10e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b112:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b116:	e7f8      	b.n	800b10a <memmove+0x12>
 800b118:	4402      	add	r2, r0
 800b11a:	4601      	mov	r1, r0
 800b11c:	428a      	cmp	r2, r1
 800b11e:	d100      	bne.n	800b122 <memmove+0x2a>
 800b120:	bd10      	pop	{r4, pc}
 800b122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b12a:	e7f7      	b.n	800b11c <memmove+0x24>

0800b12c <_sbrk_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d06      	ldr	r5, [pc, #24]	@ (800b148 <_sbrk_r+0x1c>)
 800b130:	2300      	movs	r3, #0
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	f7f7 febc 	bl	8002eb4 <_sbrk>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_sbrk_r+0x1a>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_sbrk_r+0x1a>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	20000834 	.word	0x20000834

0800b14c <abort>:
 800b14c:	b508      	push	{r3, lr}
 800b14e:	2006      	movs	r0, #6
 800b150:	f000 fa42 	bl	800b5d8 <raise>
 800b154:	2001      	movs	r0, #1
 800b156:	f7f7 fe35 	bl	8002dc4 <_exit>

0800b15a <_calloc_r>:
 800b15a:	b570      	push	{r4, r5, r6, lr}
 800b15c:	fba1 5402 	umull	r5, r4, r1, r2
 800b160:	b934      	cbnz	r4, 800b170 <_calloc_r+0x16>
 800b162:	4629      	mov	r1, r5
 800b164:	f7ff f85e 	bl	800a224 <_malloc_r>
 800b168:	4606      	mov	r6, r0
 800b16a:	b928      	cbnz	r0, 800b178 <_calloc_r+0x1e>
 800b16c:	4630      	mov	r0, r6
 800b16e:	bd70      	pop	{r4, r5, r6, pc}
 800b170:	220c      	movs	r2, #12
 800b172:	6002      	str	r2, [r0, #0]
 800b174:	2600      	movs	r6, #0
 800b176:	e7f9      	b.n	800b16c <_calloc_r+0x12>
 800b178:	462a      	mov	r2, r5
 800b17a:	4621      	mov	r1, r4
 800b17c:	f7fd fd25 	bl	8008bca <memset>
 800b180:	e7f4      	b.n	800b16c <_calloc_r+0x12>

0800b182 <_realloc_r>:
 800b182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b186:	4607      	mov	r7, r0
 800b188:	4614      	mov	r4, r2
 800b18a:	460d      	mov	r5, r1
 800b18c:	b921      	cbnz	r1, 800b198 <_realloc_r+0x16>
 800b18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	4611      	mov	r1, r2
 800b194:	f7ff b846 	b.w	800a224 <_malloc_r>
 800b198:	b92a      	cbnz	r2, 800b1a6 <_realloc_r+0x24>
 800b19a:	f7fe fc95 	bl	8009ac8 <_free_r>
 800b19e:	4625      	mov	r5, r4
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a6:	f000 fa33 	bl	800b610 <_malloc_usable_size_r>
 800b1aa:	4284      	cmp	r4, r0
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	d802      	bhi.n	800b1b6 <_realloc_r+0x34>
 800b1b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1b4:	d8f4      	bhi.n	800b1a0 <_realloc_r+0x1e>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff f833 	bl	800a224 <_malloc_r>
 800b1be:	4680      	mov	r8, r0
 800b1c0:	b908      	cbnz	r0, 800b1c6 <_realloc_r+0x44>
 800b1c2:	4645      	mov	r5, r8
 800b1c4:	e7ec      	b.n	800b1a0 <_realloc_r+0x1e>
 800b1c6:	42b4      	cmp	r4, r6
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	bf28      	it	cs
 800b1ce:	4632      	movcs	r2, r6
 800b1d0:	f7fd fde9 	bl	8008da6 <memcpy>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7fe fc76 	bl	8009ac8 <_free_r>
 800b1dc:	e7f1      	b.n	800b1c2 <_realloc_r+0x40>

0800b1de <__sfputc_r>:
 800b1de:	6893      	ldr	r3, [r2, #8]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	b410      	push	{r4}
 800b1e6:	6093      	str	r3, [r2, #8]
 800b1e8:	da08      	bge.n	800b1fc <__sfputc_r+0x1e>
 800b1ea:	6994      	ldr	r4, [r2, #24]
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	db01      	blt.n	800b1f4 <__sfputc_r+0x16>
 800b1f0:	290a      	cmp	r1, #10
 800b1f2:	d103      	bne.n	800b1fc <__sfputc_r+0x1e>
 800b1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1f8:	f000 b932 	b.w	800b460 <__swbuf_r>
 800b1fc:	6813      	ldr	r3, [r2, #0]
 800b1fe:	1c58      	adds	r0, r3, #1
 800b200:	6010      	str	r0, [r2, #0]
 800b202:	7019      	strb	r1, [r3, #0]
 800b204:	4608      	mov	r0, r1
 800b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <__sfputs_r>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	4614      	mov	r4, r2
 800b214:	18d5      	adds	r5, r2, r3
 800b216:	42ac      	cmp	r4, r5
 800b218:	d101      	bne.n	800b21e <__sfputs_r+0x12>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e007      	b.n	800b22e <__sfputs_r+0x22>
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	463a      	mov	r2, r7
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ffda 	bl	800b1de <__sfputc_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d1f3      	bne.n	800b216 <__sfputs_r+0xa>
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b230 <_vfiprintf_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	460d      	mov	r5, r1
 800b236:	b09d      	sub	sp, #116	@ 0x74
 800b238:	4614      	mov	r4, r2
 800b23a:	4698      	mov	r8, r3
 800b23c:	4606      	mov	r6, r0
 800b23e:	b118      	cbz	r0, 800b248 <_vfiprintf_r+0x18>
 800b240:	6a03      	ldr	r3, [r0, #32]
 800b242:	b90b      	cbnz	r3, 800b248 <_vfiprintf_r+0x18>
 800b244:	f7fd fc12 	bl	8008a6c <__sinit>
 800b248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b24a:	07d9      	lsls	r1, r3, #31
 800b24c:	d405      	bmi.n	800b25a <_vfiprintf_r+0x2a>
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	059a      	lsls	r2, r3, #22
 800b252:	d402      	bmi.n	800b25a <_vfiprintf_r+0x2a>
 800b254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b256:	f7fd fda4 	bl	8008da2 <__retarget_lock_acquire_recursive>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	071b      	lsls	r3, r3, #28
 800b25e:	d501      	bpl.n	800b264 <_vfiprintf_r+0x34>
 800b260:	692b      	ldr	r3, [r5, #16]
 800b262:	b99b      	cbnz	r3, 800b28c <_vfiprintf_r+0x5c>
 800b264:	4629      	mov	r1, r5
 800b266:	4630      	mov	r0, r6
 800b268:	f000 f938 	bl	800b4dc <__swsetup_r>
 800b26c:	b170      	cbz	r0, 800b28c <_vfiprintf_r+0x5c>
 800b26e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b270:	07dc      	lsls	r4, r3, #31
 800b272:	d504      	bpl.n	800b27e <_vfiprintf_r+0x4e>
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	b01d      	add	sp, #116	@ 0x74
 800b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	0598      	lsls	r0, r3, #22
 800b282:	d4f7      	bmi.n	800b274 <_vfiprintf_r+0x44>
 800b284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b286:	f7fd fd8d 	bl	8008da4 <__retarget_lock_release_recursive>
 800b28a:	e7f3      	b.n	800b274 <_vfiprintf_r+0x44>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b290:	2320      	movs	r3, #32
 800b292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b296:	f8cd 800c 	str.w	r8, [sp, #12]
 800b29a:	2330      	movs	r3, #48	@ 0x30
 800b29c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b44c <_vfiprintf_r+0x21c>
 800b2a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2a4:	f04f 0901 	mov.w	r9, #1
 800b2a8:	4623      	mov	r3, r4
 800b2aa:	469a      	mov	sl, r3
 800b2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b0:	b10a      	cbz	r2, 800b2b6 <_vfiprintf_r+0x86>
 800b2b2:	2a25      	cmp	r2, #37	@ 0x25
 800b2b4:	d1f9      	bne.n	800b2aa <_vfiprintf_r+0x7a>
 800b2b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2ba:	d00b      	beq.n	800b2d4 <_vfiprintf_r+0xa4>
 800b2bc:	465b      	mov	r3, fp
 800b2be:	4622      	mov	r2, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ffa2 	bl	800b20c <__sfputs_r>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	f000 80a7 	beq.w	800b41c <_vfiprintf_r+0x1ec>
 800b2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2d0:	445a      	add	r2, fp
 800b2d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 809f 	beq.w	800b41c <_vfiprintf_r+0x1ec>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2e8:	f10a 0a01 	add.w	sl, sl, #1
 800b2ec:	9304      	str	r3, [sp, #16]
 800b2ee:	9307      	str	r3, [sp, #28]
 800b2f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2f6:	4654      	mov	r4, sl
 800b2f8:	2205      	movs	r2, #5
 800b2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fe:	4853      	ldr	r0, [pc, #332]	@ (800b44c <_vfiprintf_r+0x21c>)
 800b300:	f7f4 ff6e 	bl	80001e0 <memchr>
 800b304:	9a04      	ldr	r2, [sp, #16]
 800b306:	b9d8      	cbnz	r0, 800b340 <_vfiprintf_r+0x110>
 800b308:	06d1      	lsls	r1, r2, #27
 800b30a:	bf44      	itt	mi
 800b30c:	2320      	movmi	r3, #32
 800b30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b312:	0713      	lsls	r3, r2, #28
 800b314:	bf44      	itt	mi
 800b316:	232b      	movmi	r3, #43	@ 0x2b
 800b318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b31c:	f89a 3000 	ldrb.w	r3, [sl]
 800b320:	2b2a      	cmp	r3, #42	@ 0x2a
 800b322:	d015      	beq.n	800b350 <_vfiprintf_r+0x120>
 800b324:	9a07      	ldr	r2, [sp, #28]
 800b326:	4654      	mov	r4, sl
 800b328:	2000      	movs	r0, #0
 800b32a:	f04f 0c0a 	mov.w	ip, #10
 800b32e:	4621      	mov	r1, r4
 800b330:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b334:	3b30      	subs	r3, #48	@ 0x30
 800b336:	2b09      	cmp	r3, #9
 800b338:	d94b      	bls.n	800b3d2 <_vfiprintf_r+0x1a2>
 800b33a:	b1b0      	cbz	r0, 800b36a <_vfiprintf_r+0x13a>
 800b33c:	9207      	str	r2, [sp, #28]
 800b33e:	e014      	b.n	800b36a <_vfiprintf_r+0x13a>
 800b340:	eba0 0308 	sub.w	r3, r0, r8
 800b344:	fa09 f303 	lsl.w	r3, r9, r3
 800b348:	4313      	orrs	r3, r2
 800b34a:	9304      	str	r3, [sp, #16]
 800b34c:	46a2      	mov	sl, r4
 800b34e:	e7d2      	b.n	800b2f6 <_vfiprintf_r+0xc6>
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	1d19      	adds	r1, r3, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	9103      	str	r1, [sp, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bfbb      	ittet	lt
 800b35c:	425b      	neglt	r3, r3
 800b35e:	f042 0202 	orrlt.w	r2, r2, #2
 800b362:	9307      	strge	r3, [sp, #28]
 800b364:	9307      	strlt	r3, [sp, #28]
 800b366:	bfb8      	it	lt
 800b368:	9204      	strlt	r2, [sp, #16]
 800b36a:	7823      	ldrb	r3, [r4, #0]
 800b36c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b36e:	d10a      	bne.n	800b386 <_vfiprintf_r+0x156>
 800b370:	7863      	ldrb	r3, [r4, #1]
 800b372:	2b2a      	cmp	r3, #42	@ 0x2a
 800b374:	d132      	bne.n	800b3dc <_vfiprintf_r+0x1ac>
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	1d1a      	adds	r2, r3, #4
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	9203      	str	r2, [sp, #12]
 800b37e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b382:	3402      	adds	r4, #2
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b45c <_vfiprintf_r+0x22c>
 800b38a:	7821      	ldrb	r1, [r4, #0]
 800b38c:	2203      	movs	r2, #3
 800b38e:	4650      	mov	r0, sl
 800b390:	f7f4 ff26 	bl	80001e0 <memchr>
 800b394:	b138      	cbz	r0, 800b3a6 <_vfiprintf_r+0x176>
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	eba0 000a 	sub.w	r0, r0, sl
 800b39c:	2240      	movs	r2, #64	@ 0x40
 800b39e:	4082      	lsls	r2, r0
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	3401      	adds	r4, #1
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3aa:	4829      	ldr	r0, [pc, #164]	@ (800b450 <_vfiprintf_r+0x220>)
 800b3ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3b0:	2206      	movs	r2, #6
 800b3b2:	f7f4 ff15 	bl	80001e0 <memchr>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d03f      	beq.n	800b43a <_vfiprintf_r+0x20a>
 800b3ba:	4b26      	ldr	r3, [pc, #152]	@ (800b454 <_vfiprintf_r+0x224>)
 800b3bc:	bb1b      	cbnz	r3, 800b406 <_vfiprintf_r+0x1d6>
 800b3be:	9b03      	ldr	r3, [sp, #12]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	f023 0307 	bic.w	r3, r3, #7
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3cc:	443b      	add	r3, r7
 800b3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d0:	e76a      	b.n	800b2a8 <_vfiprintf_r+0x78>
 800b3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	2001      	movs	r0, #1
 800b3da:	e7a8      	b.n	800b32e <_vfiprintf_r+0xfe>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	3401      	adds	r4, #1
 800b3e0:	9305      	str	r3, [sp, #20]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f04f 0c0a 	mov.w	ip, #10
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ee:	3a30      	subs	r2, #48	@ 0x30
 800b3f0:	2a09      	cmp	r2, #9
 800b3f2:	d903      	bls.n	800b3fc <_vfiprintf_r+0x1cc>
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d0c6      	beq.n	800b386 <_vfiprintf_r+0x156>
 800b3f8:	9105      	str	r1, [sp, #20]
 800b3fa:	e7c4      	b.n	800b386 <_vfiprintf_r+0x156>
 800b3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b400:	4604      	mov	r4, r0
 800b402:	2301      	movs	r3, #1
 800b404:	e7f0      	b.n	800b3e8 <_vfiprintf_r+0x1b8>
 800b406:	ab03      	add	r3, sp, #12
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	462a      	mov	r2, r5
 800b40c:	4b12      	ldr	r3, [pc, #72]	@ (800b458 <_vfiprintf_r+0x228>)
 800b40e:	a904      	add	r1, sp, #16
 800b410:	4630      	mov	r0, r6
 800b412:	f7fc fee9 	bl	80081e8 <_printf_float>
 800b416:	4607      	mov	r7, r0
 800b418:	1c78      	adds	r0, r7, #1
 800b41a:	d1d6      	bne.n	800b3ca <_vfiprintf_r+0x19a>
 800b41c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	d405      	bmi.n	800b42e <_vfiprintf_r+0x1fe>
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	059a      	lsls	r2, r3, #22
 800b426:	d402      	bmi.n	800b42e <_vfiprintf_r+0x1fe>
 800b428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b42a:	f7fd fcbb 	bl	8008da4 <__retarget_lock_release_recursive>
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	065b      	lsls	r3, r3, #25
 800b432:	f53f af1f 	bmi.w	800b274 <_vfiprintf_r+0x44>
 800b436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b438:	e71e      	b.n	800b278 <_vfiprintf_r+0x48>
 800b43a:	ab03      	add	r3, sp, #12
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	462a      	mov	r2, r5
 800b440:	4b05      	ldr	r3, [pc, #20]	@ (800b458 <_vfiprintf_r+0x228>)
 800b442:	a904      	add	r1, sp, #16
 800b444:	4630      	mov	r0, r6
 800b446:	f7fd f967 	bl	8008718 <_printf_i>
 800b44a:	e7e4      	b.n	800b416 <_vfiprintf_r+0x1e6>
 800b44c:	0800bc06 	.word	0x0800bc06
 800b450:	0800bc10 	.word	0x0800bc10
 800b454:	080081e9 	.word	0x080081e9
 800b458:	0800b20d 	.word	0x0800b20d
 800b45c:	0800bc0c 	.word	0x0800bc0c

0800b460 <__swbuf_r>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	460e      	mov	r6, r1
 800b464:	4614      	mov	r4, r2
 800b466:	4605      	mov	r5, r0
 800b468:	b118      	cbz	r0, 800b472 <__swbuf_r+0x12>
 800b46a:	6a03      	ldr	r3, [r0, #32]
 800b46c:	b90b      	cbnz	r3, 800b472 <__swbuf_r+0x12>
 800b46e:	f7fd fafd 	bl	8008a6c <__sinit>
 800b472:	69a3      	ldr	r3, [r4, #24]
 800b474:	60a3      	str	r3, [r4, #8]
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	071a      	lsls	r2, r3, #28
 800b47a:	d501      	bpl.n	800b480 <__swbuf_r+0x20>
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	b943      	cbnz	r3, 800b492 <__swbuf_r+0x32>
 800b480:	4621      	mov	r1, r4
 800b482:	4628      	mov	r0, r5
 800b484:	f000 f82a 	bl	800b4dc <__swsetup_r>
 800b488:	b118      	cbz	r0, 800b492 <__swbuf_r+0x32>
 800b48a:	f04f 37ff 	mov.w	r7, #4294967295
 800b48e:	4638      	mov	r0, r7
 800b490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	6922      	ldr	r2, [r4, #16]
 800b496:	1a98      	subs	r0, r3, r2
 800b498:	6963      	ldr	r3, [r4, #20]
 800b49a:	b2f6      	uxtb	r6, r6
 800b49c:	4283      	cmp	r3, r0
 800b49e:	4637      	mov	r7, r6
 800b4a0:	dc05      	bgt.n	800b4ae <__swbuf_r+0x4e>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f7ff fded 	bl	800b084 <_fflush_r>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d1ed      	bne.n	800b48a <__swbuf_r+0x2a>
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	60a3      	str	r3, [r4, #8]
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	6022      	str	r2, [r4, #0]
 800b4ba:	701e      	strb	r6, [r3, #0]
 800b4bc:	6962      	ldr	r2, [r4, #20]
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d004      	beq.n	800b4ce <__swbuf_r+0x6e>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	07db      	lsls	r3, r3, #31
 800b4c8:	d5e1      	bpl.n	800b48e <__swbuf_r+0x2e>
 800b4ca:	2e0a      	cmp	r6, #10
 800b4cc:	d1df      	bne.n	800b48e <__swbuf_r+0x2e>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f7ff fdd7 	bl	800b084 <_fflush_r>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d0d9      	beq.n	800b48e <__swbuf_r+0x2e>
 800b4da:	e7d6      	b.n	800b48a <__swbuf_r+0x2a>

0800b4dc <__swsetup_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4b29      	ldr	r3, [pc, #164]	@ (800b584 <__swsetup_r+0xa8>)
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	b118      	cbz	r0, 800b4f0 <__swsetup_r+0x14>
 800b4e8:	6a03      	ldr	r3, [r0, #32]
 800b4ea:	b90b      	cbnz	r3, 800b4f0 <__swsetup_r+0x14>
 800b4ec:	f7fd fabe 	bl	8008a6c <__sinit>
 800b4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f4:	0719      	lsls	r1, r3, #28
 800b4f6:	d422      	bmi.n	800b53e <__swsetup_r+0x62>
 800b4f8:	06da      	lsls	r2, r3, #27
 800b4fa:	d407      	bmi.n	800b50c <__swsetup_r+0x30>
 800b4fc:	2209      	movs	r2, #9
 800b4fe:	602a      	str	r2, [r5, #0]
 800b500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	f04f 30ff 	mov.w	r0, #4294967295
 800b50a:	e033      	b.n	800b574 <__swsetup_r+0x98>
 800b50c:	0758      	lsls	r0, r3, #29
 800b50e:	d512      	bpl.n	800b536 <__swsetup_r+0x5a>
 800b510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b512:	b141      	cbz	r1, 800b526 <__swsetup_r+0x4a>
 800b514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b518:	4299      	cmp	r1, r3
 800b51a:	d002      	beq.n	800b522 <__swsetup_r+0x46>
 800b51c:	4628      	mov	r0, r5
 800b51e:	f7fe fad3 	bl	8009ac8 <_free_r>
 800b522:	2300      	movs	r3, #0
 800b524:	6363      	str	r3, [r4, #52]	@ 0x34
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	2300      	movs	r3, #0
 800b530:	6063      	str	r3, [r4, #4]
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f043 0308 	orr.w	r3, r3, #8
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	6923      	ldr	r3, [r4, #16]
 800b540:	b94b      	cbnz	r3, 800b556 <__swsetup_r+0x7a>
 800b542:	89a3      	ldrh	r3, [r4, #12]
 800b544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b54c:	d003      	beq.n	800b556 <__swsetup_r+0x7a>
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f000 f88b 	bl	800b66c <__smakebuf_r>
 800b556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55a:	f013 0201 	ands.w	r2, r3, #1
 800b55e:	d00a      	beq.n	800b576 <__swsetup_r+0x9a>
 800b560:	2200      	movs	r2, #0
 800b562:	60a2      	str	r2, [r4, #8]
 800b564:	6962      	ldr	r2, [r4, #20]
 800b566:	4252      	negs	r2, r2
 800b568:	61a2      	str	r2, [r4, #24]
 800b56a:	6922      	ldr	r2, [r4, #16]
 800b56c:	b942      	cbnz	r2, 800b580 <__swsetup_r+0xa4>
 800b56e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b572:	d1c5      	bne.n	800b500 <__swsetup_r+0x24>
 800b574:	bd38      	pop	{r3, r4, r5, pc}
 800b576:	0799      	lsls	r1, r3, #30
 800b578:	bf58      	it	pl
 800b57a:	6962      	ldrpl	r2, [r4, #20]
 800b57c:	60a2      	str	r2, [r4, #8]
 800b57e:	e7f4      	b.n	800b56a <__swsetup_r+0x8e>
 800b580:	2000      	movs	r0, #0
 800b582:	e7f7      	b.n	800b574 <__swsetup_r+0x98>
 800b584:	200001d4 	.word	0x200001d4

0800b588 <_raise_r>:
 800b588:	291f      	cmp	r1, #31
 800b58a:	b538      	push	{r3, r4, r5, lr}
 800b58c:	4605      	mov	r5, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	d904      	bls.n	800b59c <_raise_r+0x14>
 800b592:	2316      	movs	r3, #22
 800b594:	6003      	str	r3, [r0, #0]
 800b596:	f04f 30ff 	mov.w	r0, #4294967295
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b59e:	b112      	cbz	r2, 800b5a6 <_raise_r+0x1e>
 800b5a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5a4:	b94b      	cbnz	r3, 800b5ba <_raise_r+0x32>
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f000 f830 	bl	800b60c <_getpid_r>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b6:	f000 b817 	b.w	800b5e8 <_kill_r>
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d00a      	beq.n	800b5d4 <_raise_r+0x4c>
 800b5be:	1c59      	adds	r1, r3, #1
 800b5c0:	d103      	bne.n	800b5ca <_raise_r+0x42>
 800b5c2:	2316      	movs	r3, #22
 800b5c4:	6003      	str	r3, [r0, #0]
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	e7e7      	b.n	800b59a <_raise_r+0x12>
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4798      	blx	r3
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	e7e0      	b.n	800b59a <_raise_r+0x12>

0800b5d8 <raise>:
 800b5d8:	4b02      	ldr	r3, [pc, #8]	@ (800b5e4 <raise+0xc>)
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f7ff bfd3 	b.w	800b588 <_raise_r>
 800b5e2:	bf00      	nop
 800b5e4:	200001d4 	.word	0x200001d4

0800b5e8 <_kill_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	@ (800b608 <_kill_r+0x20>)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	602b      	str	r3, [r5, #0]
 800b5f6:	f7f7 fbd5 	bl	8002da4 <_kill>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d102      	bne.n	800b604 <_kill_r+0x1c>
 800b5fe:	682b      	ldr	r3, [r5, #0]
 800b600:	b103      	cbz	r3, 800b604 <_kill_r+0x1c>
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	bd38      	pop	{r3, r4, r5, pc}
 800b606:	bf00      	nop
 800b608:	20000834 	.word	0x20000834

0800b60c <_getpid_r>:
 800b60c:	f7f7 bbc2 	b.w	8002d94 <_getpid>

0800b610 <_malloc_usable_size_r>:
 800b610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b614:	1f18      	subs	r0, r3, #4
 800b616:	2b00      	cmp	r3, #0
 800b618:	bfbc      	itt	lt
 800b61a:	580b      	ldrlt	r3, [r1, r0]
 800b61c:	18c0      	addlt	r0, r0, r3
 800b61e:	4770      	bx	lr

0800b620 <__swhatbuf_r>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	460c      	mov	r4, r1
 800b624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b628:	2900      	cmp	r1, #0
 800b62a:	b096      	sub	sp, #88	@ 0x58
 800b62c:	4615      	mov	r5, r2
 800b62e:	461e      	mov	r6, r3
 800b630:	da0d      	bge.n	800b64e <__swhatbuf_r+0x2e>
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b638:	f04f 0100 	mov.w	r1, #0
 800b63c:	bf14      	ite	ne
 800b63e:	2340      	movne	r3, #64	@ 0x40
 800b640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b644:	2000      	movs	r0, #0
 800b646:	6031      	str	r1, [r6, #0]
 800b648:	602b      	str	r3, [r5, #0]
 800b64a:	b016      	add	sp, #88	@ 0x58
 800b64c:	bd70      	pop	{r4, r5, r6, pc}
 800b64e:	466a      	mov	r2, sp
 800b650:	f000 f848 	bl	800b6e4 <_fstat_r>
 800b654:	2800      	cmp	r0, #0
 800b656:	dbec      	blt.n	800b632 <__swhatbuf_r+0x12>
 800b658:	9901      	ldr	r1, [sp, #4]
 800b65a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b65e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b662:	4259      	negs	r1, r3
 800b664:	4159      	adcs	r1, r3
 800b666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b66a:	e7eb      	b.n	800b644 <__swhatbuf_r+0x24>

0800b66c <__smakebuf_r>:
 800b66c:	898b      	ldrh	r3, [r1, #12]
 800b66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b670:	079d      	lsls	r5, r3, #30
 800b672:	4606      	mov	r6, r0
 800b674:	460c      	mov	r4, r1
 800b676:	d507      	bpl.n	800b688 <__smakebuf_r+0x1c>
 800b678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	6123      	str	r3, [r4, #16]
 800b680:	2301      	movs	r3, #1
 800b682:	6163      	str	r3, [r4, #20]
 800b684:	b003      	add	sp, #12
 800b686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b688:	ab01      	add	r3, sp, #4
 800b68a:	466a      	mov	r2, sp
 800b68c:	f7ff ffc8 	bl	800b620 <__swhatbuf_r>
 800b690:	9f00      	ldr	r7, [sp, #0]
 800b692:	4605      	mov	r5, r0
 800b694:	4639      	mov	r1, r7
 800b696:	4630      	mov	r0, r6
 800b698:	f7fe fdc4 	bl	800a224 <_malloc_r>
 800b69c:	b948      	cbnz	r0, 800b6b2 <__smakebuf_r+0x46>
 800b69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a2:	059a      	lsls	r2, r3, #22
 800b6a4:	d4ee      	bmi.n	800b684 <__smakebuf_r+0x18>
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	f043 0302 	orr.w	r3, r3, #2
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	e7e2      	b.n	800b678 <__smakebuf_r+0xc>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	6020      	str	r0, [r4, #0]
 800b6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	9b01      	ldr	r3, [sp, #4]
 800b6be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6c2:	b15b      	cbz	r3, 800b6dc <__smakebuf_r+0x70>
 800b6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 f81d 	bl	800b708 <_isatty_r>
 800b6ce:	b128      	cbz	r0, 800b6dc <__smakebuf_r+0x70>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f023 0303 	bic.w	r3, r3, #3
 800b6d6:	f043 0301 	orr.w	r3, r3, #1
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	431d      	orrs	r5, r3
 800b6e0:	81a5      	strh	r5, [r4, #12]
 800b6e2:	e7cf      	b.n	800b684 <__smakebuf_r+0x18>

0800b6e4 <_fstat_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	@ (800b704 <_fstat_r+0x20>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	f7f7 fbb7 	bl	8002e64 <_fstat>
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	d102      	bne.n	800b700 <_fstat_r+0x1c>
 800b6fa:	682b      	ldr	r3, [r5, #0]
 800b6fc:	b103      	cbz	r3, 800b700 <_fstat_r+0x1c>
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	bf00      	nop
 800b704:	20000834 	.word	0x20000834

0800b708 <_isatty_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d06      	ldr	r5, [pc, #24]	@ (800b724 <_isatty_r+0x1c>)
 800b70c:	2300      	movs	r3, #0
 800b70e:	4604      	mov	r4, r0
 800b710:	4608      	mov	r0, r1
 800b712:	602b      	str	r3, [r5, #0]
 800b714:	f7f7 fbb6 	bl	8002e84 <_isatty>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_isatty_r+0x1a>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_isatty_r+0x1a>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	20000834 	.word	0x20000834

0800b728 <sqrt>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	ed2d 8b02 	vpush	{d8}
 800b72e:	ec55 4b10 	vmov	r4, r5, d0
 800b732:	f000 f85f 	bl	800b7f4 <__ieee754_sqrt>
 800b736:	4622      	mov	r2, r4
 800b738:	462b      	mov	r3, r5
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	eeb0 8a40 	vmov.f32	s16, s0
 800b742:	eef0 8a60 	vmov.f32	s17, s1
 800b746:	f7f5 f9f9 	bl	8000b3c <__aeabi_dcmpun>
 800b74a:	b990      	cbnz	r0, 800b772 <sqrt+0x4a>
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	4620      	mov	r0, r4
 800b752:	4629      	mov	r1, r5
 800b754:	f7f5 f9ca 	bl	8000aec <__aeabi_dcmplt>
 800b758:	b158      	cbz	r0, 800b772 <sqrt+0x4a>
 800b75a:	f7fd faf7 	bl	8008d4c <__errno>
 800b75e:	2321      	movs	r3, #33	@ 0x21
 800b760:	6003      	str	r3, [r0, #0]
 800b762:	2200      	movs	r2, #0
 800b764:	2300      	movs	r3, #0
 800b766:	4610      	mov	r0, r2
 800b768:	4619      	mov	r1, r3
 800b76a:	f7f5 f877 	bl	800085c <__aeabi_ddiv>
 800b76e:	ec41 0b18 	vmov	d8, r0, r1
 800b772:	eeb0 0a48 	vmov.f32	s0, s16
 800b776:	eef0 0a68 	vmov.f32	s1, s17
 800b77a:	ecbd 8b02 	vpop	{d8}
 800b77e:	bd38      	pop	{r3, r4, r5, pc}

0800b780 <fmaxf>:
 800b780:	b508      	push	{r3, lr}
 800b782:	ed2d 8b02 	vpush	{d8}
 800b786:	eeb0 8a40 	vmov.f32	s16, s0
 800b78a:	eef0 8a60 	vmov.f32	s17, s1
 800b78e:	f000 f815 	bl	800b7bc <__fpclassifyf>
 800b792:	b930      	cbnz	r0, 800b7a2 <fmaxf+0x22>
 800b794:	eeb0 8a68 	vmov.f32	s16, s17
 800b798:	eeb0 0a48 	vmov.f32	s0, s16
 800b79c:	ecbd 8b02 	vpop	{d8}
 800b7a0:	bd08      	pop	{r3, pc}
 800b7a2:	eeb0 0a68 	vmov.f32	s0, s17
 800b7a6:	f000 f809 	bl	800b7bc <__fpclassifyf>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d0f4      	beq.n	800b798 <fmaxf+0x18>
 800b7ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	dded      	ble.n	800b794 <fmaxf+0x14>
 800b7b8:	e7ee      	b.n	800b798 <fmaxf+0x18>
	...

0800b7bc <__fpclassifyf>:
 800b7bc:	ee10 3a10 	vmov	r3, s0
 800b7c0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800b7c4:	d00d      	beq.n	800b7e2 <__fpclassifyf+0x26>
 800b7c6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b7ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b7ce:	d30a      	bcc.n	800b7e6 <__fpclassifyf+0x2a>
 800b7d0:	4b07      	ldr	r3, [pc, #28]	@ (800b7f0 <__fpclassifyf+0x34>)
 800b7d2:	1e42      	subs	r2, r0, #1
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d908      	bls.n	800b7ea <__fpclassifyf+0x2e>
 800b7d8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800b7dc:	4258      	negs	r0, r3
 800b7de:	4158      	adcs	r0, r3
 800b7e0:	4770      	bx	lr
 800b7e2:	2002      	movs	r0, #2
 800b7e4:	4770      	bx	lr
 800b7e6:	2004      	movs	r0, #4
 800b7e8:	4770      	bx	lr
 800b7ea:	2003      	movs	r0, #3
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	007ffffe 	.word	0x007ffffe

0800b7f4 <__ieee754_sqrt>:
 800b7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f8:	4a66      	ldr	r2, [pc, #408]	@ (800b994 <__ieee754_sqrt+0x1a0>)
 800b7fa:	ec55 4b10 	vmov	r4, r5, d0
 800b7fe:	43aa      	bics	r2, r5
 800b800:	462b      	mov	r3, r5
 800b802:	4621      	mov	r1, r4
 800b804:	d110      	bne.n	800b828 <__ieee754_sqrt+0x34>
 800b806:	4622      	mov	r2, r4
 800b808:	4620      	mov	r0, r4
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fefc 	bl	8000608 <__aeabi_dmul>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 fd40 	bl	800029c <__adddf3>
 800b81c:	4604      	mov	r4, r0
 800b81e:	460d      	mov	r5, r1
 800b820:	ec45 4b10 	vmov	d0, r4, r5
 800b824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b828:	2d00      	cmp	r5, #0
 800b82a:	dc0e      	bgt.n	800b84a <__ieee754_sqrt+0x56>
 800b82c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b830:	4322      	orrs	r2, r4
 800b832:	d0f5      	beq.n	800b820 <__ieee754_sqrt+0x2c>
 800b834:	b19d      	cbz	r5, 800b85e <__ieee754_sqrt+0x6a>
 800b836:	4622      	mov	r2, r4
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f4 fd2c 	bl	8000298 <__aeabi_dsub>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	f7f5 f80a 	bl	800085c <__aeabi_ddiv>
 800b848:	e7e8      	b.n	800b81c <__ieee754_sqrt+0x28>
 800b84a:	152a      	asrs	r2, r5, #20
 800b84c:	d115      	bne.n	800b87a <__ieee754_sqrt+0x86>
 800b84e:	2000      	movs	r0, #0
 800b850:	e009      	b.n	800b866 <__ieee754_sqrt+0x72>
 800b852:	0acb      	lsrs	r3, r1, #11
 800b854:	3a15      	subs	r2, #21
 800b856:	0549      	lsls	r1, r1, #21
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0fa      	beq.n	800b852 <__ieee754_sqrt+0x5e>
 800b85c:	e7f7      	b.n	800b84e <__ieee754_sqrt+0x5a>
 800b85e:	462a      	mov	r2, r5
 800b860:	e7fa      	b.n	800b858 <__ieee754_sqrt+0x64>
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	3001      	adds	r0, #1
 800b866:	02dc      	lsls	r4, r3, #11
 800b868:	d5fb      	bpl.n	800b862 <__ieee754_sqrt+0x6e>
 800b86a:	1e44      	subs	r4, r0, #1
 800b86c:	1b12      	subs	r2, r2, r4
 800b86e:	f1c0 0420 	rsb	r4, r0, #32
 800b872:	fa21 f404 	lsr.w	r4, r1, r4
 800b876:	4323      	orrs	r3, r4
 800b878:	4081      	lsls	r1, r0
 800b87a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b87e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b886:	07d2      	lsls	r2, r2, #31
 800b888:	bf5c      	itt	pl
 800b88a:	005b      	lslpl	r3, r3, #1
 800b88c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b890:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b894:	bf58      	it	pl
 800b896:	0049      	lslpl	r1, r1, #1
 800b898:	2600      	movs	r6, #0
 800b89a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b89e:	107f      	asrs	r7, r7, #1
 800b8a0:	0049      	lsls	r1, r1, #1
 800b8a2:	2016      	movs	r0, #22
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b8aa:	1915      	adds	r5, r2, r4
 800b8ac:	429d      	cmp	r5, r3
 800b8ae:	bfde      	ittt	le
 800b8b0:	192a      	addle	r2, r5, r4
 800b8b2:	1b5b      	suble	r3, r3, r5
 800b8b4:	1936      	addle	r6, r6, r4
 800b8b6:	0fcd      	lsrs	r5, r1, #31
 800b8b8:	3801      	subs	r0, #1
 800b8ba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b8be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b8c2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b8c6:	d1f0      	bne.n	800b8aa <__ieee754_sqrt+0xb6>
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	2420      	movs	r4, #32
 800b8cc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	eb0c 0e00 	add.w	lr, ip, r0
 800b8d6:	dc02      	bgt.n	800b8de <__ieee754_sqrt+0xea>
 800b8d8:	d113      	bne.n	800b902 <__ieee754_sqrt+0x10e>
 800b8da:	458e      	cmp	lr, r1
 800b8dc:	d811      	bhi.n	800b902 <__ieee754_sqrt+0x10e>
 800b8de:	f1be 0f00 	cmp.w	lr, #0
 800b8e2:	eb0e 000c 	add.w	r0, lr, ip
 800b8e6:	da3f      	bge.n	800b968 <__ieee754_sqrt+0x174>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	db3d      	blt.n	800b968 <__ieee754_sqrt+0x174>
 800b8ec:	f102 0801 	add.w	r8, r2, #1
 800b8f0:	1a9b      	subs	r3, r3, r2
 800b8f2:	458e      	cmp	lr, r1
 800b8f4:	bf88      	it	hi
 800b8f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8fa:	eba1 010e 	sub.w	r1, r1, lr
 800b8fe:	4465      	add	r5, ip
 800b900:	4642      	mov	r2, r8
 800b902:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b906:	3c01      	subs	r4, #1
 800b908:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b90c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b910:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b914:	d1dc      	bne.n	800b8d0 <__ieee754_sqrt+0xdc>
 800b916:	4319      	orrs	r1, r3
 800b918:	d01b      	beq.n	800b952 <__ieee754_sqrt+0x15e>
 800b91a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800b998 <__ieee754_sqrt+0x1a4>
 800b91e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800b99c <__ieee754_sqrt+0x1a8>
 800b922:	e9da 0100 	ldrd	r0, r1, [sl]
 800b926:	e9db 2300 	ldrd	r2, r3, [fp]
 800b92a:	f7f4 fcb5 	bl	8000298 <__aeabi_dsub>
 800b92e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4640      	mov	r0, r8
 800b938:	4649      	mov	r1, r9
 800b93a:	f7f5 f8e1 	bl	8000b00 <__aeabi_dcmple>
 800b93e:	b140      	cbz	r0, 800b952 <__ieee754_sqrt+0x15e>
 800b940:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b944:	e9da 0100 	ldrd	r0, r1, [sl]
 800b948:	e9db 2300 	ldrd	r2, r3, [fp]
 800b94c:	d10e      	bne.n	800b96c <__ieee754_sqrt+0x178>
 800b94e:	3601      	adds	r6, #1
 800b950:	4625      	mov	r5, r4
 800b952:	1073      	asrs	r3, r6, #1
 800b954:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800b958:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800b95c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800b960:	086b      	lsrs	r3, r5, #1
 800b962:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800b966:	e759      	b.n	800b81c <__ieee754_sqrt+0x28>
 800b968:	4690      	mov	r8, r2
 800b96a:	e7c1      	b.n	800b8f0 <__ieee754_sqrt+0xfc>
 800b96c:	f7f4 fc96 	bl	800029c <__adddf3>
 800b970:	e9da 8900 	ldrd	r8, r9, [sl]
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4640      	mov	r0, r8
 800b97a:	4649      	mov	r1, r9
 800b97c:	f7f5 f8b6 	bl	8000aec <__aeabi_dcmplt>
 800b980:	b120      	cbz	r0, 800b98c <__ieee754_sqrt+0x198>
 800b982:	1cab      	adds	r3, r5, #2
 800b984:	bf08      	it	eq
 800b986:	3601      	addeq	r6, #1
 800b988:	3502      	adds	r5, #2
 800b98a:	e7e2      	b.n	800b952 <__ieee754_sqrt+0x15e>
 800b98c:	1c6b      	adds	r3, r5, #1
 800b98e:	f023 0501 	bic.w	r5, r3, #1
 800b992:	e7de      	b.n	800b952 <__ieee754_sqrt+0x15e>
 800b994:	7ff00000 	.word	0x7ff00000
 800b998:	0800be78 	.word	0x0800be78
 800b99c:	0800be70 	.word	0x0800be70

0800b9a0 <_init>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr

0800b9ac <_fini>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	bf00      	nop
 800b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b2:	bc08      	pop	{r3}
 800b9b4:	469e      	mov	lr, r3
 800b9b6:	4770      	bx	lr
